// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–ï–ü–ê–†–ê–¢–ê–ú–ò
// –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –ø–æ–∫—É–ø–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
// ============================================================================

console.log('üíä drugs.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
function showDrugsShop() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3><img src="https://static.tildacdn.com/tild3532-3565-4033-a136-653464353038/drugs.png" alt="üíä" style="width: 24px; height: 24px; margin-right: 0.5rem; vertical-align: middle;"> –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤</h3>
                <div style="display: flex; gap: 0.5rem; align-items: center;">
                    <button onclick="toggleDrugsFreeMode()" id="drugsFreeModeButton" style="background: transparent; border: 1px solid ${getThemeColors().border}; color: ${getThemeColors().text}; padding: 0.3rem 0.6rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</button>
                    <button class="icon-button" onclick="closeModal(this)">√ó</button>
                </div>
            </div>
            
            <!-- –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ -->
            <div style="padding: 1rem; border-bottom: 1px solid var(--border); display: flex; gap: 0.5rem; flex-wrap: wrap;">
                ${Object.keys(DRUGS_LIBRARY).map((category, idx) => `
                    <button class="pill-button drugs-category-filter ${idx === 0 ? 'active' : ''}" onclick="filterDrugs('${category}')" data-drugs-category="${category}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        ${category}
                    </button>
                `).join('')}
            </div>
            
            <div class="modal-body" style="overflow-y: auto; flex: 1;">
                       <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1rem; padding: 1rem;" id="drugsShopContent">
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ filterDrugs -->
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const style = document.createElement('style');
    style.textContent = `
        .drugs-category-filter.active {
            background: ${getThemeColors().accent} !important;
            color: white !important;
        }
    `;
    if (!document.getElementById('drugs-filter-styles')) {
        style.id = 'drugs-filter-styles';
        document.head.appendChild(style);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const firstCategory = Object.keys(DRUGS_LIBRARY)[0];
    filterDrugs(firstCategory);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
function filterDrugs(category) {
    const container = document.getElementById('drugsShopContent');
    if (!container) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    document.querySelectorAll('.drugs-category-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-drugs-category') === category) {
            btn.classList.add('active');
        }
    });
    
    const drugs = DRUGS_LIBRARY[category] || [];
    
    container.innerHTML = drugs.map((drug) => `
        <div class="shop-item">
            <div class="shop-item-header">
                <h4 class="shop-item-title">${drug.name}</h4>
            </div>
            
            <p class="shop-item-description">
                ${drug.description}
            </p>
            
            ${drug.effect ? `
                <div style="background: ${getThemeColors().successLight}; border-left: 3px solid ${getThemeColors().success}; padding: 0.5rem; margin: 0.5rem 0; border-radius: 4px;">
                    <div style="font-size: 0.85rem; color: ${getThemeColors().success};">
                        <strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> ${drug.effect}
                    </div>
                </div>
            ` : ''}
            
            ${drug.difficulty ? `
                <div style="background: ${getThemeColors().accentLight}; border-left: 3px solid ${getThemeColors().accent}; padding: 0.5rem; margin: 0.5rem 0; border-radius: 4px;">
                    <div style="font-size: 0.85rem; color: ${getThemeColors().accent};">
                        <strong>–°–õ:</strong> ${drug.difficulty}
                    </div>
                </div>
            ` : ''}
            
            ${drug.secondaryEffect ? `
                <div style="background: ${getThemeColors().dangerLight}; border-left: 3px solid ${getThemeColors().danger}; padding: 0.5rem; margin: 0.5rem 0; border-radius: 4px;">
                    <div style="font-size: 0.85rem; color: ${getThemeColors().danger};">
                        <strong>–í—Ç–æ—Ä–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> ${drug.secondaryEffect}
                    </div>
                </div>
            ` : ''}
            
            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border); gap: 0.5rem;">
                <span class="drug-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${drug.price}">
                    ${drug.price} —É–µ
                </span>
                <div style="display: flex; gap: 0.5rem; align-items: center;">
                    <input type="text" class="drug-quantity-input" data-drug-name="${drug.name}" value="1" maxlength="2" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 2); if(parseInt(this.value) > 99) this.value = '99';" style="width: 50px; padding: 0.25rem; text-align: center; border: 1px solid ${getThemeColors().border}; border-radius: 4px; background: ${getThemeColors().bg}; color: ${getThemeColors().text}; font-size: 0.8rem;">
                    <button class="pill-button primary-button drug-buy-button" onclick="buyDrugWithQuantity('${drug.name}', ${drug.price}, '${drug.description.replace(/'/g, "\\'")}', '${drug.effect ? drug.effect.replace(/'/g, "\\'") : ''}', '${drug.category}', ${drug.difficulty || 0}, '${drug.secondaryEffect ? drug.secondaryEffect.replace(/'/g, "\\'") : ''}')" data-drug-name="${drug.name}" data-price="${drug.price}" data-description="${drug.description.replace(/'/g, "\\'")}" data-effect="${drug.effect ? drug.effect.replace(/'/g, "\\'") : ''}" data-category="${drug.category}" data-difficulty="${drug.difficulty || 0}" data-secondary-effect="${drug.secondaryEffect ? drug.secondaryEffect.replace(/'/g, "\\'") : ''}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

function buyDrug(name, price, description, effect, category, difficulty, secondaryEffect, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!</p>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç
    const newDrug = {
        id: generateId('drug'),
        name: name,
        description: description,
        effect: effect,
        category: category,
        difficulty: difficulty,
        secondaryEffect: secondaryEffect,
        price: price,
        purchaseDate: new Date().toLocaleDateString('ru-RU'),
        catalogPrice: catalogPrice,
        purchasePrice: price,
        itemType: catalogPrice ? 'free_catalog' : 'purchased'
    };
    
    state.drugs.push(newDrug);
    renderDrugs();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: name,
        price: price,
        category: '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã'
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è –º–∞–≥–∞–∑–∏–Ω
    showToast(`${name} –∫—É–ø–ª–µ–Ω –∑–∞ ${price} —É–µ`, 2000);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
function buyDrugWithQuantity(name, price, description, effect, category, difficulty, secondaryEffect, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const quantityInput = document.querySelector(`input[data-drug-name="${name}"]`);
    const quantity = quantityInput ? parseInt(quantityInput.value) || 1 : 1;
    
    const totalPrice = price * quantity;
    
    if (currentMoney < totalPrice) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!</p>
                <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">–ù—É–∂–Ω–æ: ${totalPrice} —É–µ, —É –≤–∞—Å: ${currentMoney} —É–µ</p>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - totalPrice;
    updateMoneyDisplay();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
    for (let i = 0; i < quantity; i++) {
        const newDrug = {
            id: generateId('drug'),
            name: name,
            description: description,
            effect: effect,
            category: category,
            difficulty: difficulty,
            secondaryEffect: secondaryEffect,
            price: price,
            purchaseDate: new Date().toLocaleDateString('ru-RU'),
            catalogPrice: catalogPrice,
            purchasePrice: price,
            itemType: catalogPrice ? 'free_catalog' : 'purchased'
        };
        
        state.drugs.push(newDrug);
    }
    
    renderDrugs();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: quantity > 1 ? `${name} (${quantity} —à—Ç.)` : name,
        price: totalPrice,
        category: '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã'
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const message = quantity > 1 ? 
        `${name} (${quantity} —à—Ç.) –∫—É–ø–ª–µ–Ω—ã –∑–∞ ${totalPrice} —É–µ` : 
        `${name} –∫—É–ø–ª–µ–Ω –∑–∞ ${price} —É–µ`;
    showToast(message, 2000);
}

function getDrugFree(name, description, effect, category, difficulty, secondaryEffect) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const newDrug = {
        id: generateId('drug'),
        name: name,
        description: description,
        effect: effect,
        category: category,
        difficulty: difficulty,
        secondaryEffect: secondaryEffect,
        price: 0,
        purchaseDate: new Date().toLocaleDateString('ru-RU')
    };
    
    state.drugs.push(newDrug);
    renderDrugs();
    scheduleSave();
    
    showModal('–ü—Ä–µ–ø–∞—Ä–∞—Ç –ø–æ–ª—É—á–µ–Ω', `&#x2705; ${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`);
}

function removeDrug(drugId) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    modal.innerHTML = `
        <div class="modal" style="max-width: 400px;">
            <div class="modal-header">
                <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="text-align: center; color: ${getThemeColors().text}; font-size: 1rem;">–ü—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç (—É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞)?</p>
            </div>
            <div class="modal-footer">
                <button class="pill-button primary-button" onclick="confirmRemoveDrug('${drugId}')">–ü—Ä–∏–Ω—è—Ç—å</button>
                <button class="pill-button" onclick="closeModal(this)">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

function confirmRemoveDrug(drugId) {
    state.drugs = state.drugs.filter(drug => drug.id !== drugId);
    renderDrugs();
    scheduleSave();
    closeModal(document.querySelector('.modal-overlay .icon-button'));
}

function toggleDrugsFreeMode() {
    const priceElements = document.querySelectorAll('.drug-price');
    const buyButtons = document.querySelectorAll('.drug-buy-button');
    const toggleButton = document.getElementById('drugsFreeModeButton');
    const modalOverlay = document.querySelector('.modal-overlay');
    
    const isFreeMode = toggleButton.textContent === '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    if (isFreeMode) {
        priceElements.forEach(el => {
            const originalPrice = el.getAttribute('data-original-price');
            el.textContent = `–¶–µ–Ω–∞: ${originalPrice} —É–µ`;
        });
        
        buyButtons.forEach(btn => {
            const price = btn.getAttribute('data-price');
            const name = btn.getAttribute('data-drug-name');
            const description = btn.getAttribute('data-description');
            const effect = btn.getAttribute('data-effect');
            const category = btn.getAttribute('data-category');
            const difficulty = btn.getAttribute('data-difficulty');
            const secondaryEffect = btn.getAttribute('data-secondary-effect');
            btn.setAttribute('onclick', `buyDrug('${name}', ${price}, '${description}', '${effect}', '${category}', ${difficulty}, '${secondaryEffect}')`);
        });
        
        toggleButton.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'transparent';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 0, 0, 0.85)';
        }
    } else {
        priceElements.forEach(el => {
            el.textContent = '–¶–µ–Ω–∞: 0 —É–µ';
        });
        
        buyButtons.forEach(btn => {
            const name = btn.getAttribute('data-drug-name');
            const description = btn.getAttribute('data-description');
            const effect = btn.getAttribute('data-effect');
            const category = btn.getAttribute('data-category');
            const difficulty = btn.getAttribute('data-difficulty');
            const secondaryEffect = btn.getAttribute('data-secondary-effect');
            btn.setAttribute('onclick', `buyDrug('${name}', 0, '${description}', '${effect}', '${category}', ${difficulty}, '${secondaryEffect}')`);
        });
        
        toggleButton.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'linear-gradient(135deg, #7DF4C6, #5b9bff)';
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 100, 50, 0.85)';
        }
    }
}

function renderDrugs() {
    const container = document.getElementById('drugsContainer');
    if (!container) return;
    
    if (state.drugs.length === 0) {
        container.innerHTML = '<p style="color: ${getThemeColors().muted}; text-align: center; padding: 2rem;">–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const drugsByCategory = {
        'street': {},
        'clinical': {},
        'drugs': {}
    };
    
    state.drugs.forEach(drug => {
        if (!drugsByCategory[drug.category][drug.name]) {
            drugsByCategory[drug.category][drug.name] = [];
        }
        drugsByCategory[drug.category][drug.name].push(drug);
    });
    
    const categoryNames = {
        'street': '–£–ª–∏—á–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã',
        'clinical': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã', 
        'drugs': '–£–ª–∏—á–Ω—ã–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏'
    };
    
    let html = '';
    
    for (const [category, drugGroups] of Object.entries(drugsByCategory)) {
        if (Object.keys(drugGroups).length === 0) continue;
        
        html += `
            <div style="margin-bottom: 1.5rem;">
                <h4 style="color: ${getThemeColors().accent}; font-size: 0.9rem; font-weight: 600; margin-bottom: 0.75rem; border-bottom: 1px solid var(--border); padding-bottom: 0.25rem;">${categoryNames[category]}</h4>
        `;
        
        for (const [drugName, drugList] of Object.entries(drugGroups)) {
            const firstDrug = drugList[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const count = drugList.length;
            const drugId = `drug_${category}_${drugName.replace(/\s+/g, '_')}`;
            
            html += `
                <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 8px; padding: 0.75rem; margin-bottom: 0.5rem; position: relative;">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; padding-right: 2rem;">
                        <div style="flex: 1;">
                            <div style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 0.9rem; margin-bottom: 0.25rem; cursor: pointer; user-select: none;" onclick="toggleDrugDescription('${drugId}')">
                                ${firstDrug.name} <span style="color: ${getThemeColors().muted}; font-size: 0.8rem;">${count > 1 ? `(${count} —à—Ç.)` : ''}</span>
                            </div>
                            <div id="${drugId}_description" style="display: block;">
                                <div style="color: ${getThemeColors().text}; font-size: 0.75rem; margin-bottom: 0.25rem; line-height: 1.3;">
                                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${firstDrug.description}
                                </div>
                                <div style="color: ${getThemeColors().success}; font-size: 0.75rem; margin-bottom: 0.25rem; line-height: 1.3;">
                                    <strong>–≠—Ñ—Ñ–µ–∫—Ç:</strong> ${firstDrug.effect}
                                </div>
                                ${firstDrug.difficulty > 0 ? `<div style="color: ${getThemeColors().accent}; font-size: 0.75rem; margin-bottom: 0.25rem;"><strong>–°–õ:</strong> ${firstDrug.difficulty}</div>` : ''}
                                ${firstDrug.secondaryEffect ? `<div style="color: ${getThemeColors().danger}; font-size: 0.75rem; margin-bottom: 0.25rem; line-height: 1.3;"><strong>–í—Ç–æ—Ä–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</strong> ${firstDrug.secondaryEffect}</div>` : ''}
                                <div style="color: ${getThemeColors().muted}; font-size: 0.75rem; margin-top: 0.25rem;">
                                    –ö—É–ø–ª–µ–Ω–æ: ${firstDrug.purchaseDate} | –¶–µ–Ω–∞: ${firstDrug.price} —É–µ
                                </div>
                            </div>
                        </div>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            ${count > 1 ? `<span style="color: ${getThemeColors().muted}; font-size: 0.8rem; font-weight: 600;">√ó${count} —à—Ç.</span>` : ''}
                            <button onclick="removeDrug('${firstDrug.id}')" style="font-size: 0.9rem; background: transparent; border: none; color: ${getThemeColors().text}; cursor: pointer;" title="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç">üíä</button>
                        </div>
                    </div>
                </div>
            `;
        }
        
        html += `</div>`;
    }
    
    container.innerHTML = html;
}

function toggleDrugDescription(drugId) {
    const description = document.getElementById(`${drugId}_description`);
    if (description) {
        if (description.style.display === 'none') {
            description.style.display = 'block';
        } else {
            description.style.display = 'none';
        }
    }
}

console.log('‚úÖ drugs.js –∑–∞–≥—Ä—É–∂–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞');


