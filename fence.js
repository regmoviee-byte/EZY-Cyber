// ============================================================================
// –°–ö–£–ü–©–ò–ö (FENCE SHOP)
// ============================================================================

// –ó–∞–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª (—Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π), –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–∞–ª —Å–∫—É–ø—â–∏–∫–∞
function closeCurrentModal() {
    const allModals = document.querySelectorAll('.modal-overlay');
    if (allModals.length > 0) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –º–æ–¥–∞–ª (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º z-index)
        const topModal = Array.from(allModals).reduce((top, modal) => {
            const topZ = parseInt(top.style.zIndex) || 0;
            const currentZ = parseInt(modal.style.zIndex) || 0;
            return currentZ > topZ ? modal : top;
        });
        topModal.remove();
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å–∫—É–ø—â–∏–∫–∞
function showFenceShop() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ø-–∞–ø —Å–∫—É–ø—â–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    const existingFenceModal = document.querySelector('.modal-overlay');
    if (existingFenceModal) {
        const modalTitle = existingFenceModal.querySelector('h3');
        if (modalTitle && modalTitle.textContent.includes('–°–∫—É–ø—â–∏–∫')) {
            closeModal(existingFenceModal.querySelector('.icon-button'));
        }
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
    const sellableItems = getSellableItems();
    
    if (sellableItems.length === 0) {
        showAlertModal('–°–∫—É–ø—â–∏–∫', '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
    sellableItems.forEach(item => {
        getFencePrice(item);
    });
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    const itemsHTML = sellableItems.map(item => {
        const fencePrice = getFencePrice(item);
        const catalogPrice = item.price || 0;
        
        return `
            <div class="item-card" style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr; gap: 1rem; padding: 1rem; background: rgba(0,0,0,0.2); border: 1px solid var(--border); border-radius: 8px; align-items: center;">
                <div>
                    <div style="font-weight: 600; color: var(--text); margin-bottom: 0.25rem;">${item.name}</div>
                    <div style="font-size: 0.8rem; color: var(--muted);">${item.category}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 0.7rem; color: var(--muted); margin-bottom: 0.25rem;">–ü–æ –∫–∞—Ç–∞–ª–æ–≥—É</div>
                    <div style="font-weight: 600; color: var(--text);">${catalogPrice} —É–µ</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 0.7rem; color: var(--muted); margin-bottom: 0.25rem;">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</div>
                    <div style="font-weight: 600; color: var(--success);">${fencePrice} —É–µ</div>
                </div>
                <div style="display: flex; gap: 0.5rem; justify-content: flex-end;">
                    <button class="pill-button success-button" onclick="initiateSaleWithPrice('${item.id}', '${item.type}', ${fencePrice})" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">–ü—Ä–æ–¥–∞—Ç—å</button>
                    <button class="pill-button muted-button" onclick="enterManualPrice('${item.id}', '${item.type}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–≤–∞–ª —Ü–µ–Ω—É </button>
                </div>
            </div>
        `;
    }).join('');
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 900px; max-height: 80vh;">
            <div class="modal-header">
                <h3><img src="https://static.tildacdn.com/tild6630-3835-4431-b030-326266363466/seafood.png" alt="ü¶û" style="width: 24px; height: 24px; margin-right: 0.5rem; vertical-align: middle;"> –°–∫—É–ø—â–∏–∫ ‚Äî –ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body" style="overflow-y: auto; max-height: calc(80vh - 150px);">
                <div style="padding: 1rem; background: rgba(125, 244, 198, 0.1); border: 1px solid var(--success); border-radius: 8px; margin-bottom: 1.5rem;">
                    <p style="color: var(--text); font-size: 0.9rem; margin: 0; line-height: 1.5;">
                        <strong style="color: var(--success);">–°–∫—É–ø—â–∏–∫</strong> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –æ—Ç 20% –¥–æ 70% –æ—Ç –∫–∞—Ç–∞–ª–æ–∂–Ω–æ–π.<br>
                        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫ <strong>–¢–æ—Ä–≥</strong>, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ.
                    </p>
                </div>
                <div style="display: flex; flex-direction: column; gap: 1rem;">
                    ${itemsHTML}
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
function getSellableItems() {
    const items = [];
    
    // –û—Ä—É–∂–∏–µ
    state.weapons.forEach(weapon => {
        items.push({
            id: weapon.id,
            name: weapon.name,
            price: weapon.price,
            type: 'weapon',
            category: '–û—Ä—É–∂–∏–µ'
        });
    });
    
    // –ú–æ–¥—É–ª–∏ –æ—Ä—É–∂–∏—è (—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
    state.weapons.forEach(weapon => {
        if (weapon.modules && weapon.modules.length > 0) {
            weapon.modules.forEach((module, idx) => {
                if (!module.installed) {
                    items.push({
                        id: weapon.id + '_module_' + idx,
                        name: module.name + ' (–º–æ–¥—É–ª—å)',
                        price: module.price || 0,
                        type: 'weapon_module',
                        category: '–ú–æ–¥—É–ª—å –æ—Ä—É–∂–∏—è',
                        weaponId: weapon.id,
                        moduleIndex: idx
                    });
                }
            });
        }
    });
    
    // –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
    state.ammo.forEach(ammo => {
        items.push({
            id: ammo.id,
            name: ammo.name + ' (' + ammo.quantity + ' —à—Ç.)',
            price: (ammo.price || 0) * ammo.quantity,
            type: 'ammo',
            category: '–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã'
        });
    });
    
    // –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ (–∫—Ä–æ–º–µ –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–≥–æ —â–∏—Ç–∞)
    state.gear.forEach(gear => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç (—Ü–µ–Ω–∞ 0)
        if (gear.price === 0 || gear.price === '0') return;
        
        items.push({
            id: gear.id,
            name: gear.name,
            price: gear.price || 0,
            type: 'gear',
            category: '–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ'
        });
    });
    
    // –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–µ–∫–∏
    state.deckPrograms.forEach(program => {
        items.push({
            id: program.id,
            name: program.name,
            price: program.price,
            type: 'program',
            category: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–∫–∏'
        });
    });
    
    // –ö–∏–±–µ—Ä–∏–º–ø–ª–∞–Ω—Ç—ã (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏)
    state.installedModules.forEach(module => {
        items.push({
            id: module.id,
            name: module.name,
            price: module.price,
            type: 'implant_module',
            category: '–ú–æ–¥—É–ª—å –∏–º–ø–ª–∞–Ω—Ç–∞'
        });
    });
    
    // –ß–∞—Å—Ç–∏ –∏–º–ø–ª–∞–Ω—Ç–æ–≤ (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–º–ø–ª–∞–Ω—Ç–∞–º
    Object.keys(state.implants).forEach(implantType => {
        const implant = state.implants[implantType];
        if (implant.parts) {
            Object.keys(implant.parts).forEach(partKey => {
                const part = implant.parts[partKey];
                if (part && !implant.installed) {
                    items.push({
                        id: implantType + '_' + partKey,
                        name: part.name || '–ß–∞—Å—Ç—å –∏–º–ø–ª–∞–Ω—Ç–∞',
                        price: part.price || 0,
                        type: 'implant_part',
                        category: '–ß–∞—Å—Ç—å –∏–º–ø–ª–∞–Ω—Ç–∞',
                        implantType: implantType,
                        partKey: partKey
                    });
                }
            });
        }
    });
    
    // –ú–æ–¥—É–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    state.property.vehicles.forEach(vehicle => {
        if (vehicle.modules && vehicle.modules.length > 0) {
            vehicle.modules.forEach((module, idx) => {
                if (!module.installed) {
                    items.push({
                        id: vehicle.id + '_module_' + idx,
                        name: module.name + ' (–º–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)',
                        price: module.price || 0,
                        type: 'vehicle_module',
                        category: '–ú–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
                        vehicleId: vehicle.id,
                        moduleIndex: idx
                    });
                }
            });
        }
    });
    
    // –î–µ–∫–∏ (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–π)
    state.decks.forEach(deck => {
        items.push({
            id: deck.id,
            name: deck.name,
            price: Math.floor(deck.purchasePrice / 2), // –ü—Ä–æ–¥–∞–µ–º –∑–∞ –ø–æ–ª–æ–≤–∏–Ω—É —Ü–µ–Ω—ã
            type: 'deck',
            category: '–î–µ–∫–∞',
            catalogPrice: deck.catalogPrice,
            purchasePrice: deck.purchasePrice,
            itemType: deck.itemType
        });
    });
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–∫–∞ (–ø—Ä–æ–¥–∞–µ—Ç—Å—è –∑–∞ 0 —É–µ) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (state.deck && state.deck.name) {
        items.push({
            id: 'main_deck',
            name: state.deck.name + ' (–æ—Å–Ω–æ–≤–Ω–∞—è)',
            price: 0, // –ü—Ä–æ–¥–∞–µ—Ç—Å—è –∑–∞ 0 —É–µ
            type: 'main_deck',
            category: '–î–µ–∫–∞',
            catalogPrice: 0,
            purchasePrice: 0,
            itemType: 'main_deck'
        });
    }
    
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    state.property.vehicles.forEach(vehicle => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        let sellPrice;
        if (vehicle.itemType === 'free_default') {
            // –î–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–µ–º –∑–∞ –ø–æ–ª–æ–≤–∏–Ω—É –∫–∞—Ç–∞–ª–æ–∂–Ω–æ–π —Ü–µ–Ω—ã
            sellPrice = Math.floor(vehicle.catalogPrice / 2);
        } else {
            // –î–ª—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–µ–º –∑–∞ –ø–æ–ª–æ–≤–∏–Ω—É —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            sellPrice = Math.floor(vehicle.purchasePrice / 2);
        }
        
        items.push({
            id: vehicle.id,
            name: vehicle.name,
            price: sellPrice,
            type: 'vehicle',
            category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            catalogPrice: vehicle.catalogPrice,
            purchasePrice: vehicle.purchasePrice,
            itemType: vehicle.itemType
        });
    });
    
    return items;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å–∫—É–ø—â–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
function getFencePrice(item) {
    const itemKey = item.id + '_' + item.type;
    
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    if (state.fenceShop.itemPrices[itemKey] !== undefined) {
        return state.fenceShop.itemPrices[itemKey];
    }
    
    // –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ "–ø–æ–¥–æ–±—Ä–∞—Ç—å —Å –ø–æ–ª–∞" (price = 0 –∏–ª–∏ undefined) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if (!item.price || item.price === 0) {
        state.fenceShop.itemPrices[itemKey] = 0;
        scheduleSave();
        return 0;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –æ—Ç 20% –¥–æ 70%
    const catalogPrice = item.price;
    const percentage = 0.2 + Math.random() * 0.5; // 0.2 - 0.7
    const fencePrice = Math.floor(catalogPrice * percentage);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
    state.fenceShop.itemPrices[itemKey] = fencePrice;
    scheduleSave();
    
    return fencePrice;
}

// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
function initiateSaleWithPrice(itemId, itemType, fencePrice) {
    const item = findItemById(itemId, itemType);
    if (!item) {
        showAlertModal('–û—à–∏–±–∫–∞', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }
    
    // –î–ª—è –¥–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ü–µ–Ω—É —Å–∫—É–ø—â–∏–∫–∞
    if (itemType === 'deck' || itemType === 'main_deck') {
        // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–¥–∞–µ–º –∑–∞ 0 —É–µ
        const salePrice = itemType === 'main_deck' ? 0 : fencePrice;
        confirmSale(item, itemId, itemType, salePrice);
        return;
    }
    
    // –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ü–µ–Ω–æ–π 0 (–ø–æ–¥–æ–±—Ä–∞–Ω–æ —Å –ø–æ–ª–∞) - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
    if (!item.price || item.price === 0) {
        enterManualPrice(itemId, itemType);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤—ã–∫–∞ "–¢–æ—Ä–≥"
    const bargainSkill = state.skills.find(s => s.name === '–¢–æ—Ä–≥' || (s.customName && s.customName === '–¢–æ—Ä–≥'));
    
    if (bargainSkill && bargainSkill.level > 0) {
        // –ï—Å—Ç—å –Ω–∞–≤—ã–∫ –¢–æ—Ä–≥ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è —Å –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–æ–π
        showBargainChoiceWithPrice(item, itemId, itemType, fencePrice);
    } else {
        // –ù–µ—Ç –Ω–∞–≤—ã–∫–∞ –¢–æ—Ä–≥ - –ø—Ä–æ–¥–∞—ë–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ
        confirmSale(item, itemId, itemType, fencePrice);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä: —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Å—Ä–∞–∑—É (—Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π)
function showBargainChoiceWithPrice(item, itemId, itemType, baseFencePrice) {
    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ–º —Ç–æ—Ä–≥
    if (itemType === 'main_deck') {
        showAlertModal('–û—à–∏–±–∫–∞', '–û—Å–Ω–æ–≤–Ω—É—é –¥–µ–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ü–µ–Ω—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞—Ç—å" –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 0 —É–µ.');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–•–æ—Ç–∏—Ç–µ –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è?</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: var(--text); margin-bottom: 1rem;">
                    –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫ <strong>–¢–æ—Ä–≥</strong>. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ?
                </p>
                <div style="background: rgba(125, 244, 198, 0.1); border: 1px solid var(--success); border-radius: 8px; padding: 1rem; margin-bottom: 1.5rem;">
                    <div style="color: var(--success); font-weight: 600; margin-bottom: 0.5rem;">–¢–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</div>
                    <div style="font-size: 1.2rem; font-weight: 700; color: var(--text);">${baseFencePrice} —É–µ</div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button" onclick="confirmSaleDirect('${itemId}', '${itemType}', ${baseFencePrice}); closeModal(this)">–ü—Ä–æ–¥–∞—Ç—å –∑–∞ ${baseFencePrice} —É–µ</button>
                <button class="pill-button primary-button" onclick="startBargain('${itemId}', '${itemType}', ${baseFencePrice})">–ü–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥
function startBargaining(itemId, itemType) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>–¢–æ—Ä–≥ —Å–æ —Å–∫—É–ø—â–∏–∫–æ–º</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: var(--text); margin-bottom: 1rem;">
                    –ú–∞—Å—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∏—Ç—å <strong>2d10</strong> –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –°–ª–æ–∂–Ω–æ—Å—Ç–∏ (–°–õ) —Ç–æ—Ä–≥–∞.
                </p>
                
                <div style="margin-bottom: 1.5rem;">
                    <button class="pill-button primary-button" onclick="rollDifficultyForBargain()" style="width: 100%;">
                        üé≤ –ë—Ä–æ—Å–∏—Ç—å 2d10 –¥–ª—è –°–õ
                    </button>
                    <div id="difficultyResult" style="margin-top: 0.5rem; text-align: center; font-size: 1.2rem; font-weight: 600; color: var(--accent);"></div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <label class="input-label">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –°–õ –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä —É–∂–µ –±—Ä–æ—Å–∏–ª):</label>
                    <input type="number" class="input-field" id="manualDifficulty" placeholder="–°–õ" min="2" max="20">
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <button class="pill-button success-button" onclick="performBargainCheck('${itemId}', '${itemType}')" style="width: 100%;">
                        –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¢–æ—Ä–≥–∞
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –ë—Ä–æ—Å–∏—Ç—å 2d10 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –°–õ
function rollDifficultyForBargain() {
    const d1 = Math.floor(Math.random() * 10) + 1;
    const d2 = Math.floor(Math.random() * 10) + 1;
    const total = d1 + d2;
    
    const resultDiv = document.getElementById('difficultyResult');
    if (resultDiv) {
        resultDiv.textContent = `–°–õ = ${d1} + ${d2} = ${total}`;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
    const manualInput = document.getElementById('manualDifficulty');
    if (manualInput) {
        manualInput.value = total;
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¢–æ—Ä–≥–∞
function performBargainCheck(itemId, itemType) {
    const difficultyInput = document.getElementById('manualDifficulty');
    const difficulty = parseInt(difficultyInput?.value);
    
    if (!difficulty || difficulty < 2 || difficulty > 20) {
        showAlertModal('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –°–õ (–æ—Ç 2 –¥–æ 20).');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ –¢–æ—Ä–≥
    const bargainSkill = state.skills.find(s => s.name === '–¢–æ—Ä–≥' || (s.customName && s.customName === '–¢–æ—Ä–≥'));
    const bargainLevel = bargainSkill ? bargainSkill.level : 0;
    
    // –ë—Ä–æ—Å–∞–µ–º 2d6 –ë–ï–ó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
    const d1 = Math.floor(Math.random() * 6) + 1;
    const d2 = Math.floor(Math.random() * 6) + 1;
    const diceTotal = d1 + d2;
    
    const checkResult = bargainLevel + diceTotal;
    const success = checkResult > difficulty;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay:last-child .icon-button'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    showBargainResult(itemId, itemType, {
        bargainLevel,
        dice: [d1, d2],
        diceTotal,
        checkResult,
        difficulty,
        success
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–∞
function showBargainResult(itemId, itemType, checkData) {
    const item = findItemById(itemId, itemType);
    if (!item) return;
    
    const { bargainLevel, dice, diceTotal, checkResult, difficulty, success } = checkData;
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    const resultText = success 
        ? `<div style="color: var(--success); font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem;">‚úì –£–°–ü–ï–•!</div>`
        : `<div style="color: var(--danger); font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem;">‚úó –ü–†–û–í–ê–õ</div>`;
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–∞</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                ${resultText}
                <div style="background: rgba(0,0,0,0.3); padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; font-family: monospace;">
                    <div>–¢–æ—Ä–≥ (${bargainLevel}) + 2d6 (${dice[0]} + ${dice[1]} = ${diceTotal}) = <strong>${checkResult}</strong></div>
                    <div>–°–õ: <strong>${difficulty}</strong></div>
                    <div style="margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid var(--border);">
                        –†–µ–∑—É–ª—å—Ç–∞—Ç: ${checkResult} ${success ? '>' : '‚â§'} ${difficulty}
                    </div>
                </div>
                
                <p style="color: var(--text); margin-bottom: 1rem;">
                    –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ <strong>–†–µ—à–∞–ª–∞</strong>:
                </p>
                
                <div style="margin-bottom: 1.5rem;">
                    <label class="input-label">–£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã (1-10):</label>
                    <input type="number" class="input-field" id="fixerLevel" placeholder="–£—Ä–æ–≤–µ–Ω—å" min="1" max="10" value="1">
                </div>
                
                <div style="margin-bottom: 1rem; padding: 1rem; background: rgba(125, 244, 198, 0.1); border: 1px solid var(--success); border-radius: 8px; font-size: 0.85rem;">
                    <strong>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—é –†–µ—à–∞–ª—ã:</strong><br>
                    1-2: ¬±10% | 3-4: ¬±20% | 5-6: ¬±30% | 7: ¬±40% | 8-9: ¬±50% | 10: ¬±100% (–∏–ª–∏ 1—É–µ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ)
                </div>
                
                <button class="pill-button primary-button" onclick="calculateFinalPrice('${itemId}', '${itemType}', ${success}, ${JSON.stringify(checkData).replace(/"/g, '&quot;')})" style="width: 100%;">
                    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º —É—Ä–æ–≤–Ω—è –†–µ—à–∞–ª—ã
function calculateFinalPrice(itemId, itemType, success, checkData) {
    const item = findItemById(itemId, itemType);
    if (!item) return;
    
    const fixerLevelInput = document.getElementById('fixerLevel');
    const fixerLevel = parseInt(fixerLevelInput?.value) || 1;
    
    if (fixerLevel < 1 || fixerLevel > 10) {
        showAlertModal('–û—à–∏–±–∫–∞', '–£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.');
        return;
    }
    
    const baseFencePrice = getFencePrice(item);
    let finalPrice = baseFencePrice;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ —É—Ä–æ–≤–Ω—é –†–µ—à–∞–ª—ã
    let modifier = 0;
    if (fixerLevel >= 1 && fixerLevel <= 2) modifier = 0.10;
    else if (fixerLevel >= 3 && fixerLevel <= 4) modifier = 0.20;
    else if (fixerLevel >= 5 && fixerLevel <= 6) modifier = 0.30;
    else if (fixerLevel === 7) modifier = 0.40;
    else if (fixerLevel >= 8 && fixerLevel <= 9) modifier = 0.50;
    else if (fixerLevel === 10) modifier = 1.00;
    
    if (success) {
        // –£—Å–ø–µ—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ü–µ–Ω–µ
        finalPrice = Math.floor(baseFencePrice * (1 + modifier));
    } else {
        // –ü—Ä–æ–≤–∞–ª - –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ —Ü–µ–Ω—ã
        if (fixerLevel === 10) {
            // –ü—Ä–∏ 10 —É—Ä–æ–≤–Ω–µ –∏ –ø—Ä–æ–≤–∞–ª–µ - –æ—Ç–¥–∞—ë–º –∑–∞ 1—É–µ
            finalPrice = 1;
        } else {
            finalPrice = Math.floor(baseFencePrice * (1 - modifier));
            if (finalPrice < 1) finalPrice = 1; // –ú–∏–Ω–∏–º—É–º 1—É–µ
        }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay:last-child .icon-button'));
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
    confirmSale(item, itemId, itemType, finalPrice, {
        baseFencePrice,
        modifier: (modifier * 100).toFixed(0) + '%',
        fixerLevel,
        success,
        checkData
    });
}

// –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ü–µ–Ω—ã –º–∞—Å—Ç–µ—Ä–æ–º
function enterManualPrice(itemId, itemType) {
    const item = findItemById(itemId, itemType);
    if (!item) return;
    
    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ü–µ–Ω—ã
    if (itemType === 'main_deck') {
        showAlertModal('–û—à–∏–±–∫–∞', '–û—Å–Ω–æ–≤–Ω—É—é –¥–µ–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ü–µ–Ω—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞—Ç—å" –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 0 —É–µ.');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ü–µ–Ω—ã</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: var(--text); margin-bottom: 1rem;">
                    –ú–∞—Å—Ç–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ü–µ–Ω—É –¥–ª—è <strong>${item.name}</strong>.
                </p>
                
                <div style="margin-bottom: 1.5rem;">
                    <label class="input-label">–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (—É–µ):</label>
                    <input type="number" class="input-field" id="manualSalePrice" placeholder="–¶–µ–Ω–∞" min="0">
                </div>
                
                <button class="pill-button primary-button" onclick="confirmManualSale('${itemId}', '${itemType}')" style="width: 100%;">
                    –ü—Ä–æ–¥–∞—Ç—å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–Ω—É
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ä—É—á–Ω–æ–π —Ü–µ–Ω–µ
function confirmManualSale(itemId, itemType) {
    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ü–µ–Ω—ã
    if (itemType === 'main_deck') {
        showAlertModal('–û—à–∏–±–∫–∞', '–û—Å–Ω–æ–≤–Ω—É—é –¥–µ–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ü–µ–Ω—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞—Ç—å" –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 0 —É–µ.');
        return;
    }
    
    const priceInput = document.getElementById('manualSalePrice');
    const price = parseInt(priceInput?.value);
    
    if (price < 0 || isNaN(price)) {
        showAlertModal('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.');
        return;
    }
    
    const item = findItemById(itemId, itemType);
    if (!item) return;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay:last-child .icon-button'));
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
    confirmSale(item, itemId, itemType, price);
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
function confirmSale(item, itemId, itemType, price, bargainDetails = null) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    let detailsHTML = '';
    if (bargainDetails) {
        detailsHTML = `
            <div style="background: rgba(125, 244, 198, 0.1); border: 1px solid var(--success); border-radius: 8px; padding: 1rem; margin-bottom: 1rem; font-size: 0.85rem;">
                <strong>–î–µ—Ç–∞–ª–∏ —Ç–æ—Ä–≥–∞:</strong><br>
                –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–∫—É–ø—â–∏–∫–∞: ${bargainDetails.baseFencePrice} —É–µ<br>
                –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${bargainDetails.success ? '–£—Å–ø–µ—Ö ‚úì' : '–ü—Ä–æ–≤–∞–ª ‚úó'}<br>
                –£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã: ${bargainDetails.fixerLevel}<br>
                –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${bargainDetails.success ? '+' : '-'}${bargainDetails.modifier}
            </div>
        `;
    }
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                ${detailsHTML}
                <p style="color: var(--text); margin-bottom: 1.5rem;">
                    –ü—Ä–æ–¥–∞—Ç—å <strong>${item.name}</strong> –∑–∞ <strong style="color: var(--success); font-size: 1.2rem;">${price} —É–µ</strong>?
                </p>
                
                <div style="display: flex; gap: 1rem;">
                    <button class="pill-button danger-button" onclick="closeCurrentModal()" style="flex: 1;">–û—Ç–º–µ–Ω–∞</button>
                    <button class="pill-button success-button" onclick="executeSale('${itemId}', '${itemType}', ${price})" style="flex: 1;">–ü—Ä–æ–¥–∞—Ç—å</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    if (typeof addModalKeyboardHandlers === 'function') {
        addModalKeyboardHandlers(modal);
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É
function executeSale(itemId, itemType, price) {
    const item = findItemById(itemId, itemType);
    if (!item) {
        showAlertModal('–û—à–∏–±–∫–∞', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    removeItemFromInventory(itemId, itemType);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    state.money += price;
    updateMoneyDisplay();
    
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemKey = itemId + '_' + itemType;
    delete state.fenceShop.itemPrices[itemKey];
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
    addToRollLog('fence_sale', {
        item: item.name,
        price: price
    });
    
    scheduleSave();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É"
    closeCurrentModal();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–∫—É–ø—â–∏–∫–∞
    updateFenceShop();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showAlertModal('–ü—Ä–æ–¥–∞–Ω–æ!', `–í—ã –ø—Ä–æ–¥–∞–ª–∏ <strong>${item.name}</strong> –∑–∞ <strong>${price} —É–µ</strong>.`);
}

// –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID –∏ —Ç–∏–ø—É
function findItemById(itemId, itemType) {
    let foundItem = null;
    
    switch(itemType) {
        case 'weapon':
            foundItem = state.weapons.find(w => w.id === itemId);
            break;
        case 'weapon_module':
            const parts = itemId.split('_module_');
            const weaponId = parts[0];
            const moduleIdx = parseInt(parts[1]);
            const weapon = state.weapons.find(w => w.id === weaponId);
            if (weapon && weapon.modules && weapon.modules[moduleIdx]) {
                foundItem = {
                    ...weapon.modules[moduleIdx],
                    weaponId: weaponId,
                    moduleIndex: moduleIdx
                };
            }
            break;
        case 'ammo':
            foundItem = state.ammo.find(a => a.id === itemId);
            break;
        case 'gear':
            foundItem = state.gear.find(g => g.id === itemId);
            break;
        case 'program':
            foundItem = state.deckPrograms.find(p => p.id === itemId);
            break;
        case 'implant_module':
            foundItem = state.installedModules.find(m => m.id === itemId);
            break;
        case 'implant_part':
            const [implantType, partKey] = itemId.split('_').slice(0, 2);
            const implant = state.implants[implantType];
            if (implant && implant.parts && implant.parts[partKey]) {
                foundItem = {
                    ...implant.parts[partKey],
                    implantType: implantType,
                    partKey: partKey
                };
            }
            break;
        case 'vehicle_module':
            const vParts = itemId.split('_module_');
            const vehicleId = vParts[0];
            const vModuleIdx = parseInt(vParts[1]);
            const vehicle = state.property.vehicles.find(v => v.id === vehicleId);
            if (vehicle && vehicle.modules && vehicle.modules[vModuleIdx]) {
                foundItem = {
                    ...vehicle.modules[vModuleIdx],
                    vehicleId: vehicleId,
                    moduleIndex: vModuleIdx
                };
            }
            break;
        case 'deck':
            foundItem = state.decks.find(d => d.id == itemId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º == –≤–º–µ—Å—Ç–æ === –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞
            break;
        case 'main_deck':
            foundItem = state.deck; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–∞
            break;
        case 'vehicle':
            foundItem = state.property.vehicles.find(v => v.id === itemId);
            break;
    }
    
    return foundItem;
}

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function removeItemFromInventory(itemId, itemType) {
    switch(itemType) {
        case 'weapon':
            state.weapons = state.weapons.filter(w => w.id !== itemId);
            renderWeapons();
            break;
        case 'weapon_module':
            const parts = itemId.split('_module_');
            const weaponId = parts[0];
            const moduleIdx = parseInt(parts[1]);
            const weapon = state.weapons.find(w => w.id === weaponId);
            if (weapon && weapon.modules) {
                weapon.modules.splice(moduleIdx, 1);
                renderWeapons();
            }
            break;
        case 'ammo':
            state.ammo = state.ammo.filter(a => a.id !== itemId);
            renderAmmo();
            break;
        case 'gear':
            state.gear = state.gear.filter(g => g.id !== itemId);
            renderGear();
            break;
        case 'program':
            state.deckPrograms = state.deckPrograms.filter(p => p.id !== itemId);
            renderDeckPrograms();
            break;
        case 'implant_module':
            state.installedModules = state.installedModules.filter(m => m.id !== itemId);
            renderImplants();
            break;
        case 'implant_part':
            const [implantType, partKey] = itemId.split('_').slice(0, 2);
            const implant = state.implants[implantType];
            if (implant && implant.parts) {
                implant.parts[partKey] = null;
            }
            break;
        case 'vehicle_module':
            const vParts = itemId.split('_module_');
            const vehicleId = vParts[0];
            const vModuleIdx = parseInt(vParts[1]);
            const vehicle = state.property.vehicles.find(v => v.id === vehicleId);
            if (vehicle && vehicle.modules) {
                vehicle.modules.splice(vModuleIdx, 1);
                renderVehicles();
            }
            break;
        case 'deck':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –¥–µ–∫–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º
            const deckPrograms = state.deckPrograms.filter(p => p.installedDeckId == itemId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º == –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞
            if (deckPrograms.length > 0) {
                showAlertModal('–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å', '–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –¥–µ–∫—É —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.');
                return;
            }
            
            // –£–¥–∞–ª—è–µ–º –¥–µ–∫—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            state.decks = state.decks.filter(d => d.id != itemId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º != –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–µ–∫ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ)
            if (typeof renderDeckCollection === 'function') {
                renderDeckCollection();
            }
            break;
        case 'main_deck':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–∫–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º
            const mainDeckPrograms = state.deckPrograms.filter(p => p.installedDeckId === 'main');
            if (mainDeckPrograms.length > 0) {
                showAlertModal('–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å', '–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –¥–µ–∫—É —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.');
                return;
            }
            
            // –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ null)
            state.deck = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (typeof updateDeckDisplay === 'function') {
                updateDeckDisplay();
            }
            if (typeof renderDeckCollection === 'function') {
                renderDeckCollection();
            }
            break;
        case 'vehicle':
            // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            state.property.vehicles = state.property.vehicles.filter(v => v.id !== itemId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if (typeof renderVehicles === 'function') {
                renderVehicles();
            }
            break;
    }
}

// –ü—Ä—è–º–∞—è –ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function confirmSaleDirect(itemId, itemType, price) {
    const item = findItemById(itemId, itemType);
    if (!item) {
        showAlertModal('–û—à–∏–±–∫–∞', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    removeItemFromInventory(itemId, itemType);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
    state.money += price;
    updateMoneyDisplay();
    
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemKey = itemId + '_' + itemType;
    delete state.fenceShop.itemPrices[itemKey];
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
    addToRollLog('fence_sale', {
        item: item.name,
        price: price
    });
    
    scheduleSave();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–∫—É–ø—â–∏–∫–∞
    updateFenceShop();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showAlertModal('–ü—Ä–æ–¥–∞–Ω–æ!', `–í—ã –ø—Ä–æ–¥–∞–ª–∏ <strong>${item.name}</strong> –∑–∞ <strong>${price} —É–µ</strong>.`);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —Å–∫—É–ø—â–∏–∫–∞
function updateFenceShop() {
    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ–ø-–∞–ø —Å–∫—É–ø—â–∏–∫–∞
    const fenceModal = document.querySelector('.modal-overlay');
    if (!fenceModal) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ø-–∞–ø —Å–∫—É–ø—â–∏–∫–∞
    const modalTitle = fenceModal.querySelector('h3');
    if (!modalTitle || !modalTitle.textContent.includes('–°–∫—É–ø—â–∏–∫')) return;
    
    // –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const sellableItems = getSellableItems();
    
    if (sellableItems.length === 0) {
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
        closeModal(fenceModal.querySelector('.icon-button'));
        showAlertModal('–°–∫—É–ø—â–∏–∫', '–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    sellableItems.forEach(item => {
        getFencePrice(item);
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTML –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const itemsHTML = sellableItems.map(item => {
        const fencePrice = getFencePrice(item);
        const catalogPrice = item.price || 0;
        
        return `
            <div class="item-card" style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr; gap: 1rem; padding: 1rem; background: rgba(0,0,0,0.2); border: 1px solid var(--border); border-radius: 8px; align-items: center;">
                <div>
                    <div style="font-weight: 600; color: var(--text); margin-bottom: 0.25rem;">${item.name}</div>
                    <div style="font-size: 0.8rem; color: var(--muted);">${item.category}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 0.7rem; color: var(--muted); margin-bottom: 0.25rem;">–ü–æ –∫–∞—Ç–∞–ª–æ–≥—É</div>
                    <div style="font-weight: 600; color: var(--text);">${catalogPrice} —É–µ</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 0.7rem; color: var(--muted); margin-bottom: 0.25rem;">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</div>
                    <div style="font-weight: 600; color: var(--success);">${fencePrice} —É–µ</div>
                </div>
                <div style="display: flex; gap: 0.5rem; justify-content: flex-end;">
                    <button class="pill-button success-button" onclick="initiateSaleWithPrice('${item.id}', '${item.type}', ${fencePrice})" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">–ü—Ä–æ–¥–∞—Ç—å</button>
                    <button class="pill-button muted-button" onclick="enterManualPrice('${item.id}', '${item.type}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–≤–∞–ª —Ü–µ–Ω—É </button>
                </div>
            </div>
        `;
    }).join('');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ø-–∞–ø–∞
    const modalBody = fenceModal.querySelector('.modal-body');
    if (modalBody) {
        modalBody.innerHTML = `
            <div style="padding: 1rem; background: rgba(125, 244, 198, 0.1); border: 1px solid var(--success); border-radius: 8px; margin-bottom: 1.5rem;">
                <p style="color: var(--text); font-size: 0.9rem; margin: 0; line-height: 1.5;">
                    <strong style="color: var(--success);">–°–∫—É–ø—â–∏–∫</strong> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –æ—Ç 20% –¥–æ 70% –æ—Ç –∫–∞—Ç–∞–ª–æ–∂–Ω–æ–π.<br>
                    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫ <strong>–¢–æ—Ä–≥</strong>, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ.
                </p>
            </div>
            <div style="display: flex; flex-direction: column; gap: 1rem;">
                ${itemsHTML}
            </div>
        `;
    }
}

console.log('Fence.js loaded - –°–∫—É–ø—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

