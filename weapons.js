// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–†–£–ñ–ò–ï–ú
// –ü–æ–∫—É–ø–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –±—Ä–æ—Å–∫–∏ —É—Ä–æ–Ω–∞, –º–æ–¥—É–ª–∏ –æ—Ä—É–∂–∏—è
// ============================================================================

console.log('üî´ weapons.js loading...');

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –æ—Ä—É–∂–∏—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
function buyMeleeWeapon(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–∏—â–∏–º –Ω–µ –ø—Ä–æ–¥–∞—ë–º. –í–∞–ª–∏ –æ—Ç—Å—é–¥–∞!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
  
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ
    const newWeapon = {
        id: generateId('weapon'),
        name: type,
        customName: '', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        type: 'melee',
        damage: damage,
        concealable: concealable,
        stealthPenalty: stealthPenalty,
        examples: examples,
        price: price,
        load: load,
        modules: [],
        slots: 1, // –£ –û–ë–ë –≤—Å–µ–≥–¥–∞ 1 —Å–ª–æ—Ç
        catalogPrice: catalogPrice,
        purchasePrice: price,
        itemType: catalogPrice ? 'free_catalog' : 'purchased'
    };
    
    state.weapons.push(newWeapon);
    renderWeapons();
    updateLoadDisplay();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: type,
        price: price,
        category: '–û—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è'
    });
    
    showModal('–û—Ä—É–∂–∏–µ –∫—É–ø–ª–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫ –û—Ä—É–∂–∏–µ!`);
}

function buyMeleeWeaponToGear(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–∏—â–∏–º –Ω–µ –ø—Ä–æ–¥–∞—ë–º. –í–∞–ª–∏ –æ—Ç—Å—é–¥–∞!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
 
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–£—Ä–æ–Ω: ${damage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${stealthPenalty} | –ü—Ä–∏–º–µ—Ä—ã: ${examples}`,
        price: price,
        load: load,
        type: 'weapon',
        weaponData: {
            type: 'melee',
            damage: damage,
            concealable: concealable,
            stealthPenalty: stealthPenalty,
            examples: examples
        },
        catalogPrice: catalogPrice,
        purchasePrice: price,
        itemType: catalogPrice ? 'free_catalog' : 'purchased'
    };
    
    state.gear.push(newGear);
    renderGear();
    updateLoadDisplay();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: type,
        price: price,
        category: '–û—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è (–≤ —Å—É–º–∫—É)'
    });
    
    showModal('–û—Ä—É–∂–∏–µ –∫—É–ø–ª–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

function getMeleeWeaponFree(type, load, damage, concealable, stealthPenalty, examples) {

    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–£—Ä–æ–Ω: ${damage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${stealthPenalty} | –ü—Ä–∏–º–µ—Ä—ã: ${examples}`,
        price: 0,
        load: load,
        type: 'weapon',
        weaponData: {
            type: 'melee',
            damage: damage,
            concealable: concealable,
            stealthPenalty: stealthPenalty,
            examples: examples
        }
    };
    
    state.gear.push(newGear);
    renderGear();
    updateLoadDisplay();
    scheduleSave();
    
    showModal('–û—Ä—É–∂–∏–µ –ø–æ–ª—É—á–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`);
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –æ—Ä—É–∂–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è
function buyRangedWeapon(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–∏—â–∏–º –Ω–µ –ø—Ä–æ–¥–∞—ë–º. –í–∞–ª–∏ –æ—Ç—Å—é–¥–∞!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    

  
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π
    const slots = getRangedWeaponSlots(type);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ
    const newWeapon = {
        id: generateId('weapon'),
        name: type,
        customName: '', // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        type: 'ranged',
        primaryDamage: primaryDamage,
        altDamage: altDamage,
        concealable: concealable,
        hands: hands,
        stealth: stealth,
        magazine: magazine,
        price: catalogPrice || price,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–∞–ª–æ–∂–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
        catalogPrice: catalogPrice,     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–∂–Ω—É—é —Ü–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ
        purchasePrice: price,          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        itemType: price === 0 && catalogPrice > 0 ? 'free_catalog' : 'catalog',  // –ú–∞—Ä–∫–µ—Ä –¥–ª—è —Å–∫—É–ø—â–∏–∫–∞
        load: load,
        modules: [],
        slots: slots,
        // –°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        maxAmmo: parseInt(magazine),
        currentAmmo: 0,
        loadedAmmoType: null,
        // –¢–∏–ø –æ—Ä—É–∂–∏—è –¥–ª—è –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        weaponTypeForAmmo: getWeaponTypeForAmmo(type),
        // –û—Å–æ–±–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤
        isShotgun: type.includes('–î—Ä–æ–±–æ–≤–∏–∫'),
        shotgunAmmo1: { type: null, count: 0 }, // –ü–µ—Ä–≤—ã–π —Ç–∏–ø –ø–∞—Ç—Ä–æ–Ω–æ–≤ (–¥–æ 3 —à—Ç)
        shotgunAmmo2: { type: null, count: 0 }  // –í—Ç–æ—Ä–æ–π —Ç–∏–ø –ø–∞—Ç—Ä–æ–Ω–æ–≤ (–¥–æ 3 —à—Ç)
    };
    
    state.weapons.push(newWeapon);
    renderWeapons();
    updateLoadDisplay();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: type,
        price: price,
        category: '–û—Ä—É–∂–∏–µ –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è'
    });
    
    showModal('–û—Ä—É–∂–∏–µ –∫—É–ø–ª–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫ –û—Ä—É–∂–∏–µ!`);
}

function buyRangedWeaponToGear(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–∏—â–∏–º –Ω–µ –ø—Ä–æ–¥–∞—ë–º. –í–∞–ª–∏ –æ—Ç—Å—é–¥–∞!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
  
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π: ${primaryDamage} | –£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: ${altDamage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | # —Ä—É–∫: ${hands} | –°–ö–ê: ${stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${magazine}`,
        price: catalogPrice || price,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–∞–ª–æ–∂–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
        catalogPrice: catalogPrice,     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–∂–Ω—É—é —Ü–µ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ
        purchasePrice: price,          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        load: load,
        type: price === 0 && catalogPrice > 0 ? 'free_catalog' : 'weapon',
        weaponData: {
            type: 'ranged',
            primaryDamage: primaryDamage,
            altDamage: altDamage,
            concealable: concealable,
            hands: hands,
            stealth: stealth,
            magazine: magazine
        }
    };
    
    state.gear.push(newGear);
    renderGear();
    updateLoadDisplay();
    scheduleSave();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    addToRollLog('purchase', {
        item: type,
        price: price,
        category: '–û—Ä—É–∂–∏–µ –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è (–≤ —Å—É–º–∫—É)'
    });
    
    showModal('–û—Ä—É–∂–∏–µ –∫—É–ø–ª–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

function getRangedWeaponFree(type, load, primaryDamage, altDamage, concealable, hands, stealth, magazine) {
 
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    state.load.current -= load;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π: ${primaryDamage} | –£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: ${altDamage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | # —Ä—É–∫: ${hands} | –°–ö–ê: ${stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${magazine}`,
        price: 0,
        load: load,
        type: 'weapon',
        weaponData: {
            type: 'ranged',
            primaryDamage: primaryDamage,
            altDamage: altDamage,
            concealable: concealable,
            hands: hands,
            stealth: stealth,
            magazine: magazine
        }
    };
    
    state.gear.push(newGear);
    renderGear();
    updateLoadDisplay();
    scheduleSave();
    
    showModal('–û—Ä—É–∂–∏–µ –ø–æ–ª—É—á–µ–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`);
}

function toggleMeleeWeaponsFreeMode() {
    const buyButtons = document.querySelectorAll('.melee-weapon-buy-button');
    const gearButtons = document.querySelectorAll('.melee-weapon-gear-button');
    const toggleButton = document.getElementById('meleeWeaponsFreeModeButton');
    const modalOverlay = document.querySelector('.modal-overlay');
    
    const isFreeMode = toggleButton.textContent === '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    if (isFreeMode) {
        buyButtons.forEach(btn => {
            const price = btn.getAttribute('data-price');
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const damage = btn.getAttribute('data-damage');
            const concealable = btn.getAttribute('data-concealable');
            const stealthPenalty = btn.getAttribute('data-stealth-penalty');
            const examples = btn.getAttribute('data-examples');
            btn.setAttribute('onclick', `buyMeleeWeapon('${type}', ${price}, ${load}, '${damage}', ${concealable}, '${stealthPenalty}', '${examples}')`);
        });
        
        gearButtons.forEach(btn => {
            const price = btn.getAttribute('data-price');
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const damage = btn.getAttribute('data-damage');
            const concealable = btn.getAttribute('data-concealable');
            const stealthPenalty = btn.getAttribute('data-stealth-penalty');
            const examples = btn.getAttribute('data-examples');
            btn.setAttribute('onclick', `buyMeleeWeaponToGear('${type}', ${price}, ${load}, '${damage}', ${concealable}, '${stealthPenalty}', '${examples}')`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
        const priceElements = document.querySelectorAll('.melee-weapon-price');
        priceElements.forEach(el => {
            const originalPrice = el.getAttribute('data-original-price');
            el.textContent = `–¶–µ–Ω–∞: ${originalPrice} —É–µ | –ù–∞–≥—Ä—É–∑–∫–∞: ${el.getAttribute('data-load')}`;
        });
        
        toggleButton.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'transparent';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
        if (modalOverlay) {
            modalOverlay.style.background = document.body.classList.contains('light-theme') ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.85)';
        }
    } else {
        buyButtons.forEach(btn => {
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const damage = btn.getAttribute('data-damage');
            const concealable = btn.getAttribute('data-concealable');
            const stealthPenalty = btn.getAttribute('data-stealth-penalty');
            const examples = btn.getAttribute('data-examples');
            btn.setAttribute('onclick', `buyMeleeWeapon('${type}', 0, ${load}, '${damage}', ${concealable}, '${stealthPenalty}', '${examples}')`);
        });
        
        gearButtons.forEach(btn => {
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const damage = btn.getAttribute('data-damage');
            const concealable = btn.getAttribute('data-concealable');
            const stealthPenalty = btn.getAttribute('data-stealth-penalty');
            const examples = btn.getAttribute('data-examples');
            btn.setAttribute('onclick', `buyMeleeWeaponToGear('${type}', 0, ${load}, '${damage}', ${concealable}, '${stealthPenalty}', '${examples}')`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
        const priceElements = document.querySelectorAll('.melee-weapon-price');
        priceElements.forEach(el => {
            el.textContent = `–¶–µ–Ω–∞: 0 —É–µ | –ù–∞–≥—Ä—É–∑–∫–∞: ${el.getAttribute('data-load')}`;
        });
        
        toggleButton.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'linear-gradient(135deg, #7DF4C6, #5b9bff)';
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 100, 50, 0.85)';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –æ—Ä—É–∂–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
function initializeRangedWeaponButtons() {
    const buyButtons = document.querySelectorAll('.ranged-weapon-buy-button');
    const gearButtons = document.querySelectorAll('.ranged-weapon-gear-button');
    
    buyButtons.forEach(btn => {
        const originalPrice = btn.getAttribute('data-original-price');
        const type = btn.getAttribute('data-weapon-type');
        const load = btn.getAttribute('data-load');
        const primaryDamage = btn.getAttribute('data-primary-damage');
        const altDamage = btn.getAttribute('data-alt-damage');
        const concealable = btn.getAttribute('data-concealable');
        const hands = btn.getAttribute('data-hands');
        const stealth = btn.getAttribute('data-stealth');
        const magazine = btn.getAttribute('data-magazine');
        btn.setAttribute('onclick', `buyRangedWeapon(${JSON.stringify(type)}, ${originalPrice}, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, null)`);
    });
    
    gearButtons.forEach(btn => {
        const originalPrice = btn.getAttribute('data-original-price');
        const type = btn.getAttribute('data-weapon-type');
        const load = btn.getAttribute('data-load');
        const primaryDamage = btn.getAttribute('data-primary-damage');
        const altDamage = btn.getAttribute('data-alt-damage');
        const concealable = btn.getAttribute('data-concealable');
        const hands = btn.getAttribute('data-hands');
        const stealth = btn.getAttribute('data-stealth');
        const magazine = btn.getAttribute('data-magazine');
        btn.setAttribute('onclick', `buyRangedWeaponToGear(${JSON.stringify(type)}, ${originalPrice}, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, null)`);
    });
}

function toggleRangedWeaponsFreeMode() {
    const buyButtons = document.querySelectorAll('.ranged-weapon-buy-button');
    const gearButtons = document.querySelectorAll('.ranged-weapon-gear-button');
    const toggleButton = document.getElementById('rangedWeaponsFreeModeButton');
    const modalOverlay = document.querySelector('.modal-overlay');
    
    const isFreeMode = toggleButton.textContent === '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    if (isFreeMode) {
        buyButtons.forEach(btn => {
            const originalPrice = btn.getAttribute('data-original-price');
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const primaryDamage = btn.getAttribute('data-primary-damage');
            const altDamage = btn.getAttribute('data-alt-damage');
            const concealable = btn.getAttribute('data-concealable');
            const hands = btn.getAttribute('data-hands');
            const stealth = btn.getAttribute('data-stealth');
            const magazine = btn.getAttribute('data-magazine');
            btn.setAttribute('onclick', `buyRangedWeapon(${JSON.stringify(type)}, ${originalPrice}, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, null)`);
        });
        
        gearButtons.forEach(btn => {
            const originalPrice = btn.getAttribute('data-original-price');
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const primaryDamage = btn.getAttribute('data-primary-damage');
            const altDamage = btn.getAttribute('data-alt-damage');
            const concealable = btn.getAttribute('data-concealable');
            const hands = btn.getAttribute('data-hands');
            const stealth = btn.getAttribute('data-stealth');
            const magazine = btn.getAttribute('data-magazine');
            btn.setAttribute('onclick', `buyRangedWeaponToGear(${JSON.stringify(type)}, ${originalPrice}, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, null)`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
        const priceElements = document.querySelectorAll('.ranged-weapon-price');
        priceElements.forEach(el => {
            const originalPrice = el.getAttribute('data-original-price');
            el.textContent = `–¶–µ–Ω–∞: ${originalPrice} —É–µ | –ù–∞–≥—Ä—É–∑–∫–∞: ${el.getAttribute('data-load')}`;
        });
        
        toggleButton.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'transparent';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
        if (modalOverlay) {
            modalOverlay.style.background = document.body.classList.contains('light-theme') ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.85)';
        }
    } else {
        buyButtons.forEach(btn => {
            const catalogPrice = btn.getAttribute('data-price'); // –ö–∞—Ç–∞–ª–æ–∂–Ω–∞—è —Ü–µ–Ω–∞
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const primaryDamage = btn.getAttribute('data-primary-damage');
            const altDamage = btn.getAttribute('data-alt-damage');
            const concealable = btn.getAttribute('data-concealable');
            const hands = btn.getAttribute('data-hands');
            const stealth = btn.getAttribute('data-stealth');
            const magazine = btn.getAttribute('data-magazine');
            btn.setAttribute('onclick', `buyRangedWeapon(${JSON.stringify(type)}, 0, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, ${catalogPrice})`);
        });
        
        gearButtons.forEach(btn => {
            const catalogPrice = btn.getAttribute('data-price'); // –ö–∞—Ç–∞–ª–æ–∂–Ω–∞—è —Ü–µ–Ω–∞
            const type = btn.getAttribute('data-weapon-type');
            const load = btn.getAttribute('data-load');
            const primaryDamage = btn.getAttribute('data-primary-damage');
            const altDamage = btn.getAttribute('data-alt-damage');
            const concealable = btn.getAttribute('data-concealable');
            const hands = btn.getAttribute('data-hands');
            const stealth = btn.getAttribute('data-stealth');
            const magazine = btn.getAttribute('data-magazine');
            btn.setAttribute('onclick', `buyRangedWeaponToGear(${JSON.stringify(type)}, 0, ${load}, ${JSON.stringify(primaryDamage)}, ${JSON.stringify(altDamage)}, ${JSON.stringify(concealable)}, ${JSON.stringify(hands)}, ${stealth}, ${JSON.stringify(magazine)}, ${catalogPrice})`);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
        const priceElements = document.querySelectorAll('.ranged-weapon-price');
        priceElements.forEach(el => {
            el.textContent = `–¶–µ–Ω–∞: 0 —É–µ | –ù–∞–≥—Ä—É–∑–∫–∞: ${el.getAttribute('data-load')}`;
        });
        
        toggleButton.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'linear-gradient(135deg, #7DF4C6, #5b9bff)';
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 100, 50, 0.85)';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ä—É–∂–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è
function getRangedWeaponSlots(type) {
    const slotMap = {
        '–õ—ë–≥–∫–∏–π –ø–∏—Å—Ç–æ–ª–µ—Ç': 1,                '–õ—ë–≥–∫–∏–π –ø–∏—Å—Ç–æ–ª–µ—Ç': 1,
        '–û–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç': 2,
        '–ö—Ä—É–ø–Ω–æ–∫–∞–ª–∏–±–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç': 3,
        '–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç': 2,
        '–¢—è–∂—ë–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç': 3,
        '–®—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞': 4,
        '–°–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞': 1,
        '–ü—É–ª–µ–º—ë—Ç': 3,
        '–î—Ä–æ–±–æ–≤–∏–∫': 2,
        '–ì—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç': 1,
        '–†–∞–∫–µ—Ç–æ–º—ë—Ç': 1,
        '–û—Ä—É–∂–∏–µ —Å —Å–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ–º': 1
    };
    return slotMap[type] || 1;
}

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
function createCustomMeleeWeapon() {
    const type = document.getElementById('customMeleeType').value;
    const appearance = document.getElementById('customMeleeAppearance').value;
    const damage = document.getElementById('customMeleeDamage').value;
    const concealable = document.getElementById('customMeleeConcealable').value === 'true';
    const stealthPenalty = document.getElementById('customMeleeStealthPenalty').value;
    const price = parseInt(document.getElementById('customMeleePrice').value) || 0;
    const load = parseInt(document.getElementById('customMeleeLoad').value) || 0;
    const description = document.getElementById('customMeleeDescription').value;
    
    if (!type || !damage || !stealthPenalty || !load) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger};">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!</p>
            </div>
        `);
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–í–Ω–µ—à–Ω–∏–π –≤–∏–¥: ${appearance} | –£—Ä–æ–Ω: ${damage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${stealthPenalty} | ${description}`,
        price: price,
        load: load,
        type: 'weapon',
        weaponData: {
            type: 'melee',
            damage: damage,
            concealable: concealable,
            stealthPenalty: stealthPenalty,
            appearance: appearance,
            customDescription: description
        }
    };
    
    state.gear.push(newGear);
    renderGear();
    scheduleSave();
    
    closeModal(document.querySelector('.modal-overlay .icon-button'));
    showModal('–û—Ä—É–∂–∏–µ —Å–æ–∑–¥–∞–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

function createCustomRangedWeapon() {
    const type = document.getElementById('customRangedType').value;
    const primaryDamage = document.getElementById('customRangedPrimaryDamage').value;
    const altDamage = document.getElementById('customRangedAltDamage').value;
    const concealable = document.getElementById('customRangedConcealable').value === 'true';
    const hands = parseInt(document.getElementById('customRangedHands').value) || 1;
    const stealth = parseInt(document.getElementById('customRangedStealth').value) || 2;
    const magazine = document.getElementById('customRangedMagazine').value;
    const price = parseInt(document.getElementById('customRangedPrice').value) || 0;
    const load = parseInt(document.getElementById('customRangedLoad').value) || 0;
    const description = document.getElementById('customRangedDescription').value;
    
    if (!type || !primaryDamage || !hands || !stealth || !magazine || !load) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger};">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!</p>
            </div>
        `);
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newGear = {
        id: generateId('gear'),
        name: type,
        description: `–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π: ${primaryDamage} | –£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: ${altDamage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(concealable)} | # —Ä—É–∫: ${hands} | –°–ö–ê: ${stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${magazine} | ${description}`,
        price: price,
        load: load,
        type: 'weapon',
        weaponData: {
            type: 'ranged',
            primaryDamage: primaryDamage,
            altDamage: altDamage,
            concealable: concealable,
            hands: hands,
            stealth: stealth,
            magazine: magazine,
            customDescription: description
        }
    };
    
    state.gear.push(newGear);
    renderGear();
    scheduleSave();
    
    closeModal(document.querySelector('.modal-overlay .icon-button'));
    showModal('–û—Ä—É–∂–∏–µ —Å–æ–∑–¥–∞–Ω–æ', `&#x2705; ${type} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ä—É–∂–∏—è
function renderWeapons() {
    const container = document.getElementById('weaponsContainer');
    if (!container) return;
    
    if (state.weapons.length === 0) {
        container.innerHTML = '<p style="color: ${getThemeColors().muted}; text-align: center; padding: 1rem; font-size: 0.8rem;">–û—Ä—É–∂–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ</p>';
        return;
    }
    
    container.innerHTML = state.weapons.map((weapon, index) => `
        <div class="weapon-item" style="background: ${getThemeColors().bgLight}; border: 1px solid ${getThemeColors().accentLight}; border-radius: 8px; padding: 0.75rem; margin-bottom: 0.75rem; min-height: 120px;">
            <div class="weapon-header" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 0.5rem; gap: 0.5rem;">
                <div style="flex: 1;">
                    <h4 style="color: ${getThemeColors().accent}; font-size: 0.95rem; margin: 0 0 0.25rem 0;">
                        <span contenteditable="true" onblur="updateWeaponCustomName('${weapon.id}', this.textContent)" style="outline: none; border: none; background: transparent; color: inherit; font-size: inherit; font-weight: inherit;">${weapon.customName || weapon.name}</span>
                    </h4>
                </div>
                <button class="pill-button success-button" onclick="moveWeaponToGear(${index})" style="font-size: 0.7rem; padding: 0.25rem 0.5rem; white-space: nowrap;">–°–ª–æ–∂–∏—Ç—å –≤ —Å—É–º–∫—É</button>
            </div>
            
            <div class="weapon-damage" style="margin-bottom: 0.5rem;">
                ${weapon.type === 'melee' ? `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="color: ${getThemeColors().text}; font-weight: 600; font-size: 0.85rem;">–£—Ä–æ–Ω:</span>
                        <button class="pill-button primary-button" onclick="rollWeaponDamage('${weapon.damage}', '${weapon.name}', '${weapon.type}', '${weapon.id}')" style="font-size: 0.8rem; padding: 0.3rem 0.6rem;">${weapon.damage}</button>
                    </div>
                ` : `
                    <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                        <span style="color: ${getThemeColors().text}; font-weight: 600; font-size: 0.85rem;">–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π:</span>
                        <button class="pill-button primary-button" onclick="rollWeaponDamage('${weapon.primaryDamage}', '${weapon.name}', '${weapon.type}', '${weapon.id}', 'primary')" style="font-size: 0.8rem; padding: 0.3rem 0.6rem;">${weapon.primaryDamage}</button>
                    </div>
                    ${weapon.altDamage ? `
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="color: ${getThemeColors().text}; font-weight: 600; font-size: 0.85rem;">–£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π:</span>
                            <button class="pill-button primary-button" onclick="rollWeaponDamage('${weapon.altDamage}', '${weapon.name}', '${weapon.type}', '${weapon.id}', 'alt')" style="font-size: 0.8rem; padding: 0.3rem 0.6rem;">${weapon.altDamage}</button>
                        </div>
                    ` : ''}
                `}
            </div>
            
            <div class="weapon-stats" style="font-family: monospace; font-size: 0.7rem; color: ${getThemeColors().muted}; margin-bottom: 0.5rem;">
                ${weapon.type === 'melee' ? `
                    –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(weapon.concealable)} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${weapon.stealthPenalty}
                ` : `
                    –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(weapon.concealable)} | # —Ä—É–∫: ${weapon.hands} | –°–ö–ê: ${weapon.stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${weapon.magazine}
                `}
            </div>
            
            ${weapon.type === 'ranged' ? `
                ${weapon.isShotgun ? `
                    <!-- –û—Å–æ–±–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤ -->
                    <div class="weapon-magazine" style="margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.35rem;">
                            <span style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 0.85rem;">–ü–∞—Ç—Ä–æ–Ω—ã –≤ –¥—Ä–æ–±–æ–≤–∏–∫–µ:</span>
                            <button class="pill-button success-button" onclick="reloadShotgun('${weapon.id}')" style="font-size: 0.7rem; padding: 0.25rem 0.5rem;">&#x1F504; –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å</button>
                        </div>
                        <div style="display: grid; gap: 0.25rem;">
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 4px; padding: 0.2rem 0.4rem; font-size: 0.75rem; min-width: 50px; text-align: center;">
                                    <span style="color: ${getThemeColors().accent}; font-weight: 600;">${weapon.shotgunAmmo1.count}/3</span>
                                </div>
                                ${weapon.shotgunAmmo1.type ? `
                                    <div style="font-size: 0.7rem; color: ${getThemeColors().success}; font-family: monospace;">
                                        ${weapon.shotgunAmmo1.type}
                                    </div>
                                ` : `
                                    <div style="font-size: 0.7rem; color: ${getThemeColors().muted}; font-style: italic;">
                                        –ù–µ –∑–∞—Ä—è–∂–µ–Ω–æ
                                    </div>
                                `}
                            </div>
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 4px; padding: 0.2rem 0.4rem; font-size: 0.75rem; min-width: 50px; text-align: center;">
                                    <span style="color: ${getThemeColors().accent}; font-weight: 600;">${weapon.shotgunAmmo2.count}/3</span>
                                </div>
                                ${weapon.shotgunAmmo2.type ? `
                                    <div style="font-size: 0.7rem; color: ${getThemeColors().success}; font-family: monospace;">
                                        ${weapon.shotgunAmmo2.type}
                                    </div>
                                ` : `
                                    <div style="font-size: 0.7rem; color: ${getThemeColors().muted}; font-style: italic;">
                                        –ù–µ –∑–∞—Ä—è–∂–µ–Ω–æ
                                    </div>
                                `}
                            </div>
                        </div>
                    </div>
                ` : `
                    <!-- –û–±—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è -->
                    <div class="weapon-magazine" style="margin-bottom: 0.5rem;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.35rem;">
                            <span style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 0.85rem;">–ü–∞—Ç—Ä–æ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:</span>
                            <button class="pill-button success-button" onclick="reloadWeapon('${weapon.id}')" style="font-size: 0.7rem; padding: 0.25rem 0.5rem;">&#x1F504; –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å</button>
                        </div>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 4px; padding: 0.25rem 0.5rem; font-size: 0.8rem;">
                                <span style="color: ${getThemeColors().accent}; font-weight: 600;">${weapon.currentAmmo || 0}</span>
                                <span style="color: ${getThemeColors().muted};">/</span>
                                <span style="color: ${getThemeColors().text};">${weapon.maxAmmo || weapon.magazine}</span>
                            </div>
                            ${weapon.loadedAmmoType ? `
                                <div style="font-size: 0.75rem; color: ${getThemeColors().success}; font-family: monospace;">
                                    ${weapon.loadedAmmoType}
                                </div>
                            ` : `
                                <div style="font-size: 0.75rem; color: ${getThemeColors().muted}; font-style: italic;">
                                    –ù–µ –∑–∞—Ä—è–∂–µ–Ω–æ
                                </div>
                            `}
                        </div>
                    </div>
                `}
            ` : ''}
            
            ${weapon.examples ? `<div class="weapon-examples" style="font-size: 0.75rem; color: ${getThemeColors().muted}; margin-bottom: 0.5rem;"><strong>–ü—Ä–∏–º–µ—Ä—ã:</strong> ${weapon.examples}</div>` : ''}
            
            ${weapon.slots > 0 ? `
                <div class="weapon-modules">
                    <div style="color: ${getThemeColors().accent}; font-weight: 600; margin-bottom: 0.35rem; font-size: 0.85rem;">–°–ª–æ—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π:</div>
                    <div style="display: flex; gap: 0.35rem; margin-bottom: 0.35rem;">
                        ${Array.from({length: weapon.slots}, (_, i) => `
                            <div class="weapon-slot" data-weapon-id="${weapon.id}" data-slot-index="${i}" style="width: 26px; height: 26px; border: 2px solid ${weapon.modules[i] ? 'var(--success)' : 'var(--border)'}; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; background: ${weapon.modules[i] ? 'rgba(125, 244, 198, 0.3)' : 'transparent'}; font-size: 0.75rem;" onclick="manageWeaponModule('${weapon.id}', ${i})">
                                ${weapon.modules[i] ? '‚úì' : '‚óã'}
                            </div>
                        `).join('')}
                    </div>
                    ${weapon.modules.filter(m => m).map(module => `
                        <div style="font-size: 0.7rem; color: ${getThemeColors().muted}; margin-left: 0.75rem;">
                            ‚Ä¢ ${module.name}: ${module.description}
                        </div>
                    `).join('')}
                </div>
            ` : ''}
            
            <div style="font-size: 0.7rem; color: ${getThemeColors().muted}; font-style: italic; margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid rgba(182, 103, 255, 0.1);">
                –ï—Å–ª–∏ –∑–¥–µ—Å—å –µ—Å—Ç—å –æ—Ä—É–∂–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—ã –¥–µ—Ä–∂–∏—Ç–µ –µ–≥–æ –≤ —Ä—É–∫–∞—Ö –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –≤–∏–¥—è—Ç –µ–≥–æ
            </div>
        </div>
    `).join('');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
function updateWeaponCustomName(weaponId, newName) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (weapon) {
        weapon.customName = newName;
        scheduleSave();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ä—É–∂–∏—è –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
function moveWeaponToGear(weaponIndex) {
    const weapon = state.weapons[weaponIndex];
    if (!weapon) return;
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    let description = '';
    if (weapon.type === 'melee') {
        description = `–£—Ä–æ–Ω: ${weapon.damage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${weapon.concealable ? '–¥–∞' : '–Ω–µ—Ç'} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${weapon.stealthPenalty}`;
        if (weapon.examples) description += ` | –ü—Ä–∏–º–µ—Ä—ã: ${weapon.examples}`;
    } else {
        description = `–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π: ${weapon.primaryDamage} | –£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: ${weapon.altDamage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${weapon.concealable ? '–¥–∞' : '–Ω–µ—Ç'} | # —Ä—É–∫: ${weapon.hands} | –°–ö–ê: ${weapon.stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${weapon.magazine}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
    if (weapon.modules.filter(m => m).length > 0) {
        description += ` | –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${weapon.modules.filter(m => m).map(m => m.name).join(', ')}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newGear = {
        id: generateId('gear'),
        name: weapon.customName || weapon.name,
        description: description,
        price: weapon.price,
        load: weapon.load,
        type: 'weapon',
        weaponData: weapon
    };
    
    state.gear.push(newGear);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ä—É–∂–∏—è
    state.weapons.splice(weaponIndex, 1);
    
    renderWeapons();
    renderGear();
    scheduleSave();
    
    showModal('–û—Ä—É–∂–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ', `&#x2705; ${weapon.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è
function rollWeaponDamage(damageFormula, weaponName, weaponType, weaponId, damageType) {
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—Ä–æ—Å–æ–∫
    if (weaponType === 'melee') {
        showStandardDamageRoll(damageFormula, weaponName, weaponId);
        return;
    }
    
    // –î–ª—è –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    showAmmoSelectionModal(damageFormula, weaponName, weaponId, damageType);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.rollWeaponDamage = rollWeaponDamage;

function showStandardDamageRoll(damageFormula, weaponName, weaponId) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.id = 'weaponDamageModal';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>&#x2694;&#xFE0F; –ê—Ç–∞–∫–∞: ${weaponName}</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body" id="weaponDamageModalBody">
                <div id="weaponSetupSection">
                    <div style="margin-bottom: 1rem;">
                        <p style="margin-bottom: 0.75rem;"><strong>${weaponName}</strong></p>
                        <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                            –§–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞: <strong style="color: ${getThemeColors().accent};">${damageFormula}</strong>
                        </p>
                    </div>
                    
                    <div style="display: grid; gap: 0.75rem;">
                        <label class="field">
                            –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞
                            <input type="text" class="input-field" id="damageModifier" value="0" placeholder="0">
                        </label>
                    </div>
                </div>
                
                <!-- –°–µ–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
                <div id="weaponDamageAnimation" style="display: none;">
                    <div style="text-align: center; padding: 2rem 0;">
                        <div id="weaponDiceDisplay" style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 1rem;"></div>
                        <div id="weaponDamageTotal" style="font-size: 2rem; font-weight: 700; color: ${getThemeColors().accent}; margin-bottom: 0.5rem;"></div>
                        <div id="weaponDamageFormula" style="font-size: 0.9rem; color: ${getThemeColors().muted};"></div>
                        <div id="weaponCriticalMessage" style="display: none; margin-top: 1rem; padding: 1rem; background: ${getThemeColors().dangerLight}; border: 2px solid ${getThemeColors().danger}; border-radius: 8px;">
                            <p style="color: #ff0000; font-size: 1.2rem; font-weight: 700; margin-bottom: 0.5rem;">&#x1FA78; –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ê–í–ú–ê! &#x1FA78;</p>
                            <p style="color: ${getThemeColors().text}; font-size: 0.9rem;">–¢—ã –Ω–∞–Ω—ë—Å –ö—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–≤–º—É! –°–æ–æ–±—â–∏ –ú–∞—Å—Ç–µ—Ä—É!</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="weaponDamageFooter">
                <button class="pill-button primary-button" id="weaponShootButton" onclick="executeMeleeDamageRoll('${damageFormula}', '${weaponName}', '${weaponId}')">
                    &#x2694;&#xFE0F; –ê—Ç–∞–∫–æ–≤–∞—Ç—å!
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

function executeMeleeDamageRoll(damageFormula, weaponName, weaponId) {
    const modifier = parseInt(document.getElementById('damageModifier').value) || 0;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    document.getElementById('weaponSetupSection').style.display = 'none';
    document.getElementById('weaponDamageAnimation').style.display = 'block';
    document.getElementById('weaponShootButton').style.display = 'none';
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    performWeaponDamageRoll(damageFormula, weaponName, modifier, null, null, null, weaponId, null, false, 'single');
}

function showAmmoSelectionModal(damageFormula, weaponName, weaponId, damageType) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, –æ—Ä—É–∂–∏–µ –Ω–∞ –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω–µ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ
    let weapon = null;
    let isEmbeddedWeapon = false;
    let isMiniStandWeapon = false;
    let parts = null; // –û–±—ä—è–≤–ª—è–µ–º parts –≤ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    
    if (weaponId.startsWith('embedded_')) {
        // –≠—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        isEmbeddedWeapon = true;
        parts = weaponId.replace('embedded_', '').split('_');
        const implantType = parts[0];
        const partName = parts[1];
        const slotIndex = parseInt(parts[2]);
        
        weapon = getImplantModule(implantType, partName, slotIndex);
        if (!weapon) {
            showModal('–û—à–∏–±–∫–∞', '–ú–æ–¥—É–ª—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
    } else if (weaponId.startsWith('mini_stand_')) {
        // –≠—Ç–æ –æ—Ä—É–∂–∏–µ –Ω–∞ –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω–µ
        isMiniStandWeapon = true;
        parts = weaponId.replace('mini_stand_', '').split('_');
        const implantType = parts[0];
        const partName = parts[1];
        const slotIndex = parseInt(parts[2]);
        
        const module = getImplantModule(implantType, partName, slotIndex);
        if (!module || !module.weaponSlot) {
            showModal('–û—à–∏–±–∫–∞', '–û—Ä—É–∂–∏–µ –Ω–∞ –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }
        weapon = module.weaponSlot;
    } else {
        // –û–±—ã—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        weapon = state.weapons.find(w => w.id === weaponId);
        if (!weapon) {
            showModal('–û—à–∏–±–∫–∞', '–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }
    }
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤
    if (weapon.isShotgun) {
        showShotgunShootingModal(damageFormula, weaponName, weaponId);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ç—Ä–æ–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    if (!weapon.currentAmmo || weapon.currentAmmo <= 0 || !weapon.loadedAmmoType) {
        let reloadFunction;
        if (isEmbeddedWeapon) {
            reloadFunction = `reloadEmbeddedWeapon('${parts[0]}', '${parts[1]}', ${parts[2]})`;
        } else if (isMiniStandWeapon) {
            reloadFunction = `reloadMiniStandWeapon('${parts[0]}', '${parts[1]}', ${parts[2]})`;
        } else {
            reloadFunction = `reloadWeapon('${weaponId}')`;
        }
            
        showModal('–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç!</p>
                <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç–µ –æ—Ä—É–∂–∏–µ</p>
                <button class="pill-button primary-button" onclick="closeModal(this); setTimeout(() => ${reloadFunction}, 100)">–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å</button>
            </div>
        `);
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.id = 'weaponDamageModal';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–≥–Ω—è
    const weaponTypeForAmmo = getWeaponTypeForAmmo(weaponName);
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>&#x1F52B; –°—Ç—Ä–µ–ª—å–±–∞: ${weaponName}</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body" id="weaponDamageModalBody">
                <div id="weaponSetupSection">
                    <div style="margin-bottom: 1rem;">
                        <p style="margin-bottom: 0.75rem;"><strong>${weaponName}</strong></p>
                        <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                            –§–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞: <strong style="color: ${getThemeColors().accent};">${damageFormula}</strong>
                        </p>
                    </div>
                    
                    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä—è–∂–µ–Ω–Ω—ã—Ö –±–æ–µ–ø—Ä–∏–ø–∞—Å–∞—Ö -->
                    <div style="margin-bottom: 1rem; padding: 0.75rem; background: ${getThemeColors().successLight}; border: 1px solid ${getThemeColors().success}; border-radius: 8px;">
                        <p style="color: ${getThemeColors().success}; font-weight: 600; margin-bottom: 0.5rem;">–ó–∞—Ä—è–∂–µ–Ω–Ω—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã:</p>
                        <p style="color: ${getThemeColors().text}; font-size: 0.9rem;">
                            –¢–∏–ø: <strong>${weapon.loadedAmmoType}</strong> | 
                            –ü–∞—Ç—Ä–æ–Ω–æ–≤: <strong>${weapon.currentAmmo}/${weapon.maxAmmo}</strong>
                        </p>
                    </div>
                    
                    <!-- –†–µ–∂–∏–º –æ–≥–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ä—É–∂–∏—è -->
                    ${isAutomaticWeapon(weaponTypeForAmmo) ? `
                        <div style="margin-bottom: 1rem;">
                            <label class="input-label">–†–µ–∂–∏–º –æ–≥–Ω—è</label>
                            <div style="display: grid; gap: 0.5rem;">
                                <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                                    <input type="radio" name="fireMode" value="single" checked style="margin: 0;">
                                    <span>–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª (1 –ø–∞—Ç—Ä–æ–Ω)</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                                    <input type="radio" name="fireMode" value="auto" ${getMinAmmoForAuto(weaponTypeForAmmo) > weapon.currentAmmo ? 'disabled' : ''} style="margin: 0;">
                                    <span style="color: ${getMinAmmoForAuto(weaponTypeForAmmo) > weapon.currentAmmo ? 'var(--muted)' : 'var(--text)'};">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å (${getMinAmmoForAuto(weaponTypeForAmmo)} –ø–∞—Ç—Ä–æ–Ω–æ–≤)</span>
                                </label>
                                <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer;">
                                    <input type="radio" name="fireMode" value="suppression" ${getMinAmmoForAuto(weaponTypeForAmmo) > weapon.currentAmmo ? 'disabled' : ''} style="margin: 0;">
                                    <span style="color: ${getMinAmmoForAuto(weaponTypeForAmmo) > weapon.currentAmmo ? 'var(--muted)' : 'var(--text)'};">–û–≥–æ–Ω—å –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ (${getMinAmmoForAuto(weaponTypeForAmmo)} –ø–∞—Ç—Ä–æ–Ω–æ–≤)</span>
                                </label>
                            </div>
                        </div>
                    ` : ''}
                    
                    <div style="display: grid; gap: 0.75rem;">
                        <label class="field">
                            –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞
                            <input type="text" class="input-field" id="damageModifier" value="0" placeholder="0">
                        </label>
                    </div>
                </div>
                
                <!-- –°–µ–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
                <div id="weaponDamageAnimation" style="display: none;">
                    <div style="text-align: center; padding: 2rem 0;">
                        <div id="weaponDiceDisplay" style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 1rem;"></div>
                        <div id="weaponDamageTotal" style="font-size: 2rem; font-weight: 700; color: ${getThemeColors().accent}; margin-bottom: 0.5rem;"></div>
                        <div id="weaponDamageFormula" style="font-size: 0.9rem; color: ${getThemeColors().muted};"></div>
                        <div id="weaponCriticalMessage" style="display: none; margin-top: 1rem; padding: 1rem; background: ${getThemeColors().dangerLight}; border: 2px solid ${getThemeColors().danger}; border-radius: 8px;">
                            <p style="color: #ff0000; font-size: 1.2rem; font-weight: 700; margin-bottom: 0.5rem;">&#x1FA78; –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –¢–†–ê–í–ú–ê! &#x1FA78;</p>
                            <p style="color: ${getThemeColors().text}; font-size: 0.9rem;">–¢—ã –Ω–∞–Ω—ë—Å –ö—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–≤–º—É! –°–æ–æ–±—â–∏ –ú–∞—Å—Ç–µ—Ä—É!</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="weaponDamageFooter">
                <button class="pill-button primary-button" id="weaponShootButton" onclick="${isEmbeddedWeapon ? `executeEmbeddedWeaponDamageRoll('${damageFormula}', '${weaponName}', '${weaponId}', '${weaponTypeForAmmo}')` : isMiniStandWeapon ? `executeMiniStandWeaponDamageRoll('${damageFormula}', '${weaponName}', '${weaponId}', '${weaponTypeForAmmo}')` : `executeRangedWeaponDamageRoll('${damageFormula}', '${weaponName}', '${weaponId}', '${weaponTypeForAmmo}')`}">
                    &#x1F52B; –°—Ç—Ä–µ–ª—è—Ç—å!
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏ —Å—Ç—Ä–µ–ª—å–±—ã
function getWeaponTypeForAmmo(weaponName) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    const weaponTypeMappings = {
        // –ü–∏—Å—Ç–æ–ª–µ—Ç—ã
        '–õ—ë–≥–∫–∏–π –ø–∏—Å—Ç–æ–ª–µ—Ç': '–õ—ë–≥–∫–∏–π –ø–∏—Å—Ç–æ–ª–µ—Ç',
        '–û–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç': '–û–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç',
        '–ö—Ä—É–ø–Ω–æ–∫–∞–ª–∏–±–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç': '–ö—Ä—É–ø–Ω–æ–∫–∞–ª–∏–±–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç',
        
        // –ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã
        '–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç': '–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç',
        '–¢—è–∂—ë–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç': '–¢—è–∂—ë–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç',
        
        // –í–∏–Ω—Ç–æ–≤–∫–∏
        '–®—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞': '–®—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞',
        '–°–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞': '–°–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞',
        
        // –ü—É–ª–µ–º—ë—Ç—ã
        '–ü—É–ª–µ–º—ë—Ç': '–ü—É–ª–µ–º—ë—Ç',
        
        // –î—Ä–æ–±–æ–≤–∏–∫–∏
        '–î—Ä–æ–±–æ–≤–∏–∫': '–î—Ä–æ–±–æ–≤–∏–∫',
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        '–û—Ä—É–∂–∏–µ —Å —Å–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ–º': '–û—Ä—É–∂–∏–µ —Å —Å–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ–º',
        '–ì—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç': '–ì—Ä–∞–Ω–∞—Ç—ã',
        '–†–∞–∫–µ—Ç–æ–º—ë—Ç': '–†–∞–∫–µ—Ç—ã',
        '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã': '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞',
        
        // –ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è
        '–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞)': '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞',
        '–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã)': '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞',
        '–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (–î—Ä–æ–±–æ–≤–∞—è)': '–ü–∏—Ä–æ–ø–∞—Ç—Ä–æ–Ω',
        '–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (–õ–∞–∑–µ—Ä–Ω–∞—è)': '–í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è –º–∏–Ω–∏-–±–∞—Ç–∞—Ä–µ—è'
    };
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (weaponTypeMappings[weaponName]) {
        return weaponTypeMappings[weaponName];
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const [key, value] of Object.entries(weaponTypeMappings)) {
        if (weaponName.includes(key)) {
            return value;
        }
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç
    return '–û–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç';
}

function isAutomaticWeapon(weaponType) {
    const automaticTypes = [
        '–ü–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç',
        '–¢—è–∂—ë–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç', 
        '–ü—É–ª–µ–º—ë—Ç',
        '–®—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞'
    ];
    return automaticTypes.includes(weaponType);
}

function getMinAmmoForAuto(weaponType) {
    return weaponType === '–ü—É–ª–µ–º—ë—Ç' ? 50 : 10;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
window.executeEmbeddedWeaponDamageRoll = function(damageFormula, weaponName, weaponId, weaponType) {
    // –ü–∞—Ä—Å–∏–º ID –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
    const parts = weaponId.replace('embedded_', '').split('_');
    const implantType = parts[0];
    const partName = parts[1];
    const slotIndex = parseInt(parts[2]);
    
    const module = getImplantModule(implantType, partName, slotIndex);
    if (!module) return;
    
    const modifier = parseInt(document.getElementById('damageModifier').value) || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–≥–Ω—è
    const fireModeRadios = document.querySelectorAll('input[name="fireMode"]');
    let fireMode = 'single';
    for (const radio of fireModeRadios) {
        if (radio.checked) {
            fireMode = radio.value;
            break;
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    let ammoToConsume = 1;
    let fireModeText = '–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª';
    
    if (fireMode === 'auto') {
        ammoToConsume = weaponType === '–ü—É–ª–µ–º—ë—Ç' ? 50 : 10;
        fireModeText = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å';
    } else if (fireMode === 'suppression') {
        ammoToConsume = weaponType === '–ü—É–ª–µ–º—ë—Ç' ? 50 : 10;
        fireModeText = '–û–≥–æ–Ω—å –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ—Ä—É–∂–∏—è
    if (module.currentAmmo < ammoToConsume) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤!</p>
                <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">–¢—Ä–µ–±—É–µ—Ç—Å—è: ${ammoToConsume}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${module.currentAmmo}</p>
            </div>
        `);
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    document.getElementById('weaponSetupSection').style.display = 'none';
    document.getElementById('weaponDamageAnimation').style.display = 'block';
    document.getElementById('weaponShootButton').style.display = 'none';
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    performWeaponDamageRoll(damageFormula, weaponName, modifier, null, null, null, weaponId, null, false, fireMode);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ç—Ä–æ–Ω—ã
    module.currentAmmo -= ammoToConsume;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–ø–ª–∞–Ω—Ç–æ–≤
    if (typeof renderImplants === 'function') renderImplants();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    scheduleSave();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Å—Ç—Ä–µ–ª
    const logMessage = `üî´ ${weaponName} (${fireModeText}): ${damageFormula}${modifier > 0 ? `+${modifier}` : modifier < 0 ? modifier : ''} | –ü–∞—Ç—Ä–æ–Ω–æ–≤: ${module.currentAmmo}/${module.magazine}`;
    addToRollLog(logMessage);
}

function executeRangedWeaponDamageRoll(damageFormula, weaponName, weaponId, weaponType) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon) return;
    
    const modifier = parseInt(document.getElementById('damageModifier').value) || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–≥–Ω—è
    const fireModeRadios = document.querySelectorAll('input[name="fireMode"]');
    let fireMode = 'single';
    for (const radio of fireModeRadios) {
        if (radio.checked) {
            fireMode = radio.value;
            break;
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    let ammoToConsume = 1;
    let fireModeText = '–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª';
    
    if (fireMode === 'auto') {
        ammoToConsume = weaponType === '–ü—É–ª–µ–º—ë—Ç' ? 50 : 10;
        fireModeText = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å';
    } else if (fireMode === 'suppression') {
        ammoToConsume = weaponType === '–ü—É–ª–µ–º—ë—Ç' ? 50 : 10;
        fireModeText = '–û–≥–æ–Ω—å –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ—Ä—É–∂–∏—è
    if (weapon.currentAmmo < ammoToConsume) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger};">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!</p>
                <p style="color: ${getThemeColors().muted};">–¢—Ä–µ–±—É–µ—Ç—Å—è: ${ammoToConsume} | –í –º–∞–≥–∞–∑–∏–Ω–µ: ${weapon.currentAmmo}</p>
                <button class="pill-button primary-button" onclick="closeModal(this); setTimeout(() => reloadWeapon('${weaponId}'), 100)">–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å</button>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ç—Ä–æ–Ω—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ä—É–∂–∏—è
    weapon.currentAmmo -= ammoToConsume;
    renderWeapons();
    scheduleSave();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    document.getElementById('weaponSetupSection').style.display = 'none';
    document.getElementById('weaponDamageAnimation').style.display = 'block';
    document.getElementById('weaponShootButton').style.display = 'none';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É —É—Ä–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ–≥–Ω—è
    let actualDamageFormula = damageFormula;
    if (fireMode === 'auto' || fireMode === 'suppression') {
        actualDamageFormula = '2d6'; // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–≥–Ω—è –∏ –æ–≥–Ω—è –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ 2d6
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    performWeaponDamageRoll(actualDamageFormula, weaponName, modifier, weapon.loadedAmmoType, fireModeText, ammoToConsume, weaponId, weaponType, true, fireMode);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—Ä–æ—Å–∫–∞ —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è –Ω–∞ –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω–µ
function executeMiniStandWeaponDamageRoll(damageFormula, weaponName, weaponId, weaponType) {
    // –ü–∞—Ä—Å–∏–º ID –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω—ã
    const parts = weaponId.replace('mini_stand_', '').split('_');
    const implantType = parts[0];
    const partName = parts[1];
    const slotIndex = parseInt(parts[2]);
    
    const module = getImplantModule(implantType, partName, slotIndex);
    if (!module || !module.weaponSlot) return;
    
    const weapon = module.weaponSlot;
    const modifier = parseInt(document.getElementById('damageModifier').value) || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–≥–Ω—è
    const fireModeRadios = document.querySelectorAll('input[name="fireMode"]');
    let fireMode = 'single';
    for (const radio of fireModeRadios) {
        if (radio.checked) {
            fireMode = radio.value;
            break;
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    let ammoToConsume = 1;
    let fireModeText = '–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª';
    
    switch (fireMode) {
        case 'single':
            ammoToConsume = 1;
            fireModeText = '–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª';
            break;
        case 'burst':
            ammoToConsume = 3;
            fireModeText = '–û—á–µ—Ä–µ–¥—å';
            break;
        case 'auto':
            ammoToConsume = 10;
            fireModeText = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–≥–æ–Ω—å';
            break;
        case 'suppression':
            ammoToConsume = 20;
            fireModeText = '–û–≥–æ–Ω—å –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ';
            break;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞—Ç—Ä–æ–Ω–æ–≤
    if (weapon.currentAmmo < ammoToConsume) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤!</p>
                <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">–ù—É–∂–Ω–æ: ${ammoToConsume}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${weapon.currentAmmo}</p>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ç—Ä–æ–Ω—ã
    weapon.currentAmmo -= ammoToConsume;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–ø–ª–∞–Ω—Ç–æ–≤
    if (typeof renderImplants === 'function') renderImplants();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    scheduleSave();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    document.getElementById('weaponSetupSection').style.display = 'none';
    document.getElementById('weaponDamageAnimation').style.display = 'block';
    document.getElementById('weaponShootButton').style.display = 'none';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É —É—Ä–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ–≥–Ω—è
    let actualDamageFormula = damageFormula;
    if (fireMode === 'auto' || fireMode === 'suppression') {
        actualDamageFormula = '2d6'; // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–≥–Ω—è –∏ –æ–≥–Ω—è –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ 2d6
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    performWeaponDamageRoll(actualDamageFormula, weaponName, modifier, weapon.loadedAmmoType, fireModeText, ammoToConsume, weaponId, weaponType, true, fireMode);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Å—Ç—Ä–µ–ª
    const logMessage = `üî´ ${weaponName} (${fireModeText}): ${damageFormula}${modifier > 0 ? `+${modifier}` : modifier < 0 ? modifier : ''} | –ü–∞—Ç—Ä–æ–Ω–æ–≤: ${weapon.currentAmmo}/${weapon.maxAmmo || weapon.magazine}`;
    addToRollLog(logMessage);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–∞ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function performWeaponDamageRoll(damageFormula, weaponName, modifier, ammoType, fireModeText, ammoConsumed, weaponId, weaponType, isRanged, fireMode) {
    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É–ª—É —É—Ä–æ–Ω–∞
    const match = damageFormula.match(/(\d+)d(\d+)/);
    if (!match) {
        showModal('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞!');
        return;
    }
    
    const diceCount = parseInt(match[1]);
    const diceSides = parseInt(match[2]);
    
    const diceDisplay = document.getElementById('weaponDiceDisplay');
    const totalDiv = document.getElementById('weaponDamageTotal');
    const formulaDiv = document.getElementById('weaponDamageFormula');
    const criticalMessage = document.getElementById('weaponCriticalMessage');
    const footer = document.getElementById('weaponDamageFooter');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    diceDisplay.innerHTML = '';
    totalDiv.textContent = '';
    formulaDiv.textContent = '';
    criticalMessage.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∫—É–±–∏–∫–∏
    const diceElements = [];
    for (let i = 0; i < diceCount; i++) {
        const wrapper = document.createElement('div');
        wrapper.style.display = 'flex';
        wrapper.style.flexDirection = 'column';
        wrapper.style.alignItems = 'center';
        
        const die = document.createElement('div');
        die.className = 'die';
        die.style.cssText = `
            width: 60px;
            height: 60px;
            background: ${getThemeColors().accent};
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 700;
            color: white;
            animation: spin 1.2s ease-in-out;
        `;
        die.textContent = '?';
        
        wrapper.appendChild(die);
        diceDisplay.appendChild(wrapper);
        diceElements.push(die);
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
    let animationStep = 0;
    const animationInterval = 100;
    const animationDuration = 1200;
    const steps = animationDuration / animationInterval;
    
    const interval = setInterval(() => {
        animationStep++;
        
        diceElements.forEach(die => {
            die.textContent = Math.floor(Math.random() * diceSides) + 1;
        });
        
        if (animationStep >= steps) {
            clearInterval(interval);
            
            // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const finalResults = [];
            for (let i = 0; i < diceCount; i++) {
                finalResults.push(Math.floor(Math.random() * diceSides) + 1);
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            diceElements.forEach((die, index) => {
                die.textContent = finalResults[index];
                die.style.animation = 'none';
            });
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–≤–º—ã (2+ –∫—É–±–∏–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º >= 6)
            const criticalDice = finalResults.filter(result => result >= 6);
            const isCritical = criticalDice.length >= 2;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
            const sum = finalResults.reduce((a, b) => a + b, 0);
            const total = sum + modifier;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            totalDiv.textContent = `Œ£ ${total}`;
            
            let formulaText = `–ö–æ—Å—Ç–∏: ${finalResults.join(' + ')}`;
            if (modifier !== 0) {
                formulaText += ` ${modifier >= 0 ? '+' : ''} ${modifier}`;
            }
            formulaText += ` = ${total}`;
            
            if (isRanged) {
                formulaText += `\n–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã: ${ammoType} | –†–µ–∂–∏–º: ${fireModeText} | –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${ammoConsumed}`;
            }
            
            formulaDiv.textContent = formulaText;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–≤–º—É
            if (isCritical) {
                criticalMessage.style.display = 'block';
                // –ö—Ä–∞—Å–Ω–æ–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                createBloodConfetti();
            }
            
            // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–≥–Ω—è –∏ –æ–≥–Ω—è –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"
            const canRepeatAttack = !isRanged || (fireMode !== 'auto' && fireMode !== 'suppression');
            
            footer.innerHTML = `
                ${canRepeatAttack ? `
                    <button class="pill-button primary-button" onclick="${isRanged ? `repeatRangedAttack('${damageFormula}', '${weaponName}', '${weaponId}', '${weaponType}')` : `repeatMeleeAttack('${damageFormula}', '${weaponName}', '${weaponId}')`}">
                        &#x1F504; –ê—Ç–∞–∫–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    </button>
                ` : ''}
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
            addToRollLog('weapon_damage', {
                weaponName: weaponName,
                formula: `${diceCount}d${diceSides}(${finalResults.join(', ')})${modifier !== 0 ? ` + ${modifier}` : ''}`,
                dice: finalResults,
                modifier: modifier,
                total: total,
                isCritical: isCritical,
                ammoType: isRanged ? ammoType : null,
                fireMode: isRanged ? fireModeText : null
            });
        }
    }, animationInterval);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function createBloodConfetti() {
    const colors = ['#ff0000', '#cc0000', '#990000', '#ff3333', '#cc3333'];
    const confettiCount = 50;
    
    for (let i = 0; i < confettiCount; i++) {
        const confetti = document.createElement('div');
        confetti.style.cssText = `
            position: fixed;
            width: 10px;
            height: 10px;
            background: ${colors[Math.floor(Math.random() * colors.length)]};
            left: 50%;
            top: 50%;
            opacity: 1;
            pointer-events: none;
            z-index: 10000;
            border-radius: 50%;
        `;
        
        document.body.appendChild(confetti);
        
        const angle = Math.random() * Math.PI * 2;
        const velocity = 200 + Math.random() * 200;
        const vx = Math.cos(angle) * velocity;
        const vy = Math.sin(angle) * velocity;
        
        const duration = 1000 + Math.random() * 500;
        const startTime = Date.now();
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = elapsed / duration;
            
            if (progress < 1) {
                const x = vx * progress;
                const y = vy * progress + (progress * progress * 500);
                confetti.style.transform = `translate(${x}px, ${y}px) rotate(${progress * 720}deg)`;
                confetti.style.opacity = 1 - progress;
                requestAnimationFrame(animate);
            } else {
                confetti.remove();
            }
        };
        
        animate();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—Ç–∞–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è
function repeatRangedAttack(damageFormula, weaponName, weaponId, weaponType) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay .icon-button'));
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π
    setTimeout(() => {
        rollWeaponDamage(damageFormula, weaponName, 'ranged', weaponId);
    }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞—Ç–∞–∫–∏ –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
function repeatMeleeAttack(damageFormula, weaponName, weaponId) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay .icon-button'));
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π
    setTimeout(() => {
        rollWeaponDamage(damageFormula, weaponName, 'melee', weaponId);
    }, 100);
}

function showRangedDamageRoll(damageFormula, weaponName, ammoType, fireModeText, ammoConsumed) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>&#x1F52B; –°—Ç—Ä–µ–ª—å–±–∞: ${weaponName}</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1rem;">
                    <p style="margin-bottom: 0.5rem;"><strong>${weaponName}</strong></p>
                    <p style="color: ${getThemeColors().success}; font-size: 0.9rem; margin-bottom: 0.5rem;">
                        –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã: <strong>${ammoType}</strong>
                    </p>
                    <p style="color: ${getThemeColors().accent}; font-size: 0.9rem; margin-bottom: 0.5rem;">
                        –†–µ–∂–∏–º: <strong>${fireModeText}</strong>
                    </p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                        –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤: <strong>${ammoConsumed}</strong>
                    </p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                        –§–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞: <strong style="color: ${getThemeColors().accent};">${damageFormula}</strong>
                    </p>
                </div>
                
                <div style="display: grid; gap: 0.75rem;">
                    <label class="field">
                        –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–Ω–∞
                        <input type="text" class="input-field" id="damageModifier" value="0" placeholder="0">
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button primary-button" onclick="executeWeaponDamageRoll('${damageFormula}', '${weaponName}')">
                    üé≤ –ë—Ä–æ—Å–∏—Ç—å —É—Ä–æ–Ω
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

function executeWeaponDamageRoll(damageFormula, weaponName) {
    const modifier = parseInt(document.getElementById('damageModifier').value) || 0;
    
    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É–ª—É —É—Ä–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2d6" –∏–ª–∏ "3d10")
    const match = damageFormula.match(/(\d+)d(\d+)/);
    if (!match) {
        showModal('–û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω–∞!');
        return;
    }
    
    const diceCount = parseInt(match[1]);
    const diceSides = parseInt(match[2]);
    
    // –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
    const dice = [];
    for (let i = 0; i < diceCount; i++) {
        dice.push(Math.floor(Math.random() * diceSides) + 1);
    }
    
    const total = dice.reduce((sum, d) => sum + d, 0) + modifier;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showModal('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞', `
        <div style="text-align: center; padding: 1rem;">
            <p style="color: ${getThemeColors().accent}; font-size: 1.2rem; margin-bottom: 1rem;">${weaponName}</p>
            <p style="color: ${getThemeColors().text}; font-size: 1.1rem; margin-bottom: 0.5rem;">–£—Ä–æ–Ω: ${damageFormula}${modifier !== 0 ? (modifier > 0 ? '+' : '') + modifier : ''}</p>
            <p style="color: ${getThemeColors().success}; font-size: 1.5rem; font-weight: bold; margin-bottom: 0.5rem;">${total}</p>
            <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">–ö–æ—Å—Ç–∏: [${dice.join(', ')}]${modifier !== 0 ? ` + ${modifier}` : ''}</p>
        </div>
    `);
    
    closeModal(document.querySelector('.modal-overlay .icon-button'));
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ –æ—Ä—É–∂–∏—è
function manageWeaponModule(weaponId, slotIndex) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    const currentModule = weapon.modules[slotIndex];
    
    let slotHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º –æ—Ä—É–∂–∏—è</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">
                    ${weapon.name} ‚Üí –°–ª–æ—Ç ${slotIndex + 1}
                </p>
    `;
    
    if (currentModule) {
        slotHTML += `
            <div style="background: ${getThemeColors().successLight}; border: 1px solid ${getThemeColors().success}; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                <h5 style="color: ${getThemeColors().success}; margin-bottom: 0.5rem;">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å:</h5>
                <p style="color: ${getThemeColors().text}; font-weight: 600;">${currentModule.name}</p>
                <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">${currentModule.description}</p>
                <button class="pill-button danger-button" onclick="removeWeaponModule('${weaponId}', ${slotIndex}); closeModal(this);" style="margin-top: 0.5rem;">–°–Ω—è—Ç—å –º–æ–¥—É–ª—å</button>
            </div>
        `;
    } else {
        slotHTML += `
            <div style="background: rgba(182, 103, 255, 0.1); border: 1px solid var(--border); border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                <h5 style="color: ${getThemeColors().accent}; margin-bottom: 0.5rem;">–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç</h5>
                <p style="color: ${getThemeColors().muted};">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</p>
                <div id="availableWeaponModules" style="max-height: 300px; overflow-y: auto;">
                    <!-- –ú–æ–¥—É–ª–∏ –∏–∑ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å -->
                </div>
            </div>
        `;
    }
    
    slotHTML += `
            </div>
            <div class="modal-footer">
            </div>
        </div>
    `;
    
    modal.innerHTML = slotHTML;
    document.body.appendChild(modal);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    loadAvailableWeaponModules(weaponId, slotIndex);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

function loadAvailableWeaponModules(weaponId, slotIndex) {
    const container = document.getElementById('availableWeaponModules');
    if (!container) return;
    
    // –ò—â–µ–º –º–æ–¥—É–ª–∏ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–∏
    const availableModules = state.gear.filter(item => item.type === 'weaponModule');
    
    if (availableModules.length === 0) {
        container.innerHTML = '<p style="color: ${getThemeColors().muted}; text-align: center; padding: 1rem;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–∏</p>';
        return;
    }
    
    container.innerHTML = availableModules.map((module, index) => `
        <div style="background: ${getThemeColors().bgLight}; border: 1px solid ${getThemeColors().border}; border-radius: 8px; padding: 0.75rem; margin-bottom: 0.5rem;">
            <div style="color: ${getThemeColors().text}; font-weight: 600;">${module.name}</div>
            <div style="color: ${getThemeColors().muted}; font-size: 0.8rem;">${module.description}</div>
            <div style="margin-top: 0.5rem;">
                <button class="pill-button success-button" onclick="installWeaponModule('${weaponId}', ${slotIndex}, ${state.gear.findIndex(item => item === module)}); closeModal(this);" style="font-size: 0.8rem; padding: 0.3rem 0.6rem;">
                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

function installWeaponModule(weaponId, slotIndex, gearIndex) {
    const module = state.gear[gearIndex];
    if (!module) return;
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon) return;

    const data = module.weaponModuleData || {};
    const slotsRequired = parseInt(data.slotsRequired || 1);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫ —Ç–∏–ø–∞–º –æ—Ä—É–∂–∏—è
    function getWeaponAbbrevFromName(name) {
        const n = (name || '').toLowerCase();
        if (n.includes('–ª—ë–≥–∫–∏–π –ø–∏—Å—Ç–æ–ª–µ—Ç') || n.includes('–ª–µ–≥–∫–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç')) return '–õ–ü';
        if (n.includes('–æ–±—ã—á–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç')) return '–û–ü';
        if (n.includes('–∫—Ä—É–ø–Ω–æ–∫–∞–ª–∏–±–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç')) return '–ö–ü';
        if (n.includes('–ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç') || n.includes('–ø–∏—Å—Ç–æ–ª–µ-–ø—É–ª–µ–º—ë—Ç')) return '–ü–ü';
        if (n.includes('—Ç—è–∂—ë–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç') || n.includes('—Ç—è–∂–µ–ª—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç-–ø—É–ª–µ–º—ë—Ç')) return '–¢–ü–ü';
        if (n.includes('—à—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞')) return '–®–í';
        if (n.includes('—Å–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞')) return '–°–í';
        if (n.includes('–ø—É–ª–µ–º—ë—Ç') || n.includes('–ø—É–ª–µ–º–µ—Ç')) return '–ü–£–õ';
        if (n.includes('–¥—Ä–æ–±–æ–≤–∏–∫') || n.includes('–¥—Ä–æ–±–æ–≤–∏–∫')) return '–î–†';
        if (n.includes('–æ—Ä—É–∂–∏–µ —Å —Å–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ–º')) return '–û–°–ú';
        return '';
    }

    function isModuleCompatible(weapon, moduleData) {
        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–∏–∂–Ω–µ–µ/–¥–∞–ª—å–Ω–µ–µ
        if (moduleData.category && moduleData.category !== weapon.type) {
            return false;
        }
        // –°–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (–õ–ü, –û–ü, –ü–ü, ...)
        if (!moduleData.compatible || moduleData.compatible.toLowerCase().includes('–ª—é–±–æ–µ')) return true;
        const set = new Set(moduleData.compatible.split(',').map(s => s.trim().toUpperCase()).filter(Boolean));
        const weaponAbbrev = getWeaponAbbrevFromName(weapon.name);
        if (!weaponAbbrev) return true; // –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        return set.has(weaponAbbrev);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (melee/ranged)
    if (!isModuleCompatible(weapon, data)) {
        showModal('–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ', '–ú–æ–¥—É–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä—É–∂–∏—è.');
        return;
    }

    if (slotsRequired === 2) {
        if (slotIndex + 1 >= weapon.slots) {
            showModal('–ù–µ—Ç –º–µ—Å—Ç–∞', '–î–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω—É–∂–Ω–æ 2 —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–ª–æ—Ç–∞.');
            return;
        }
        if (weapon.modules[slotIndex] || weapon.modules[slotIndex + 1]) {
            showModal('–ó–∞–Ω—è—Ç–æ', '–û–¥–∏–Ω –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ª–æ—Ç–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç.');
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –æ –¥–≤—É—Ö—Å–ª–æ—Ç–Ω–æ–º –º–æ–¥—É–ª–µ: —è–∫–æ—Ä—å + —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        const anchor = Object.assign({}, data, { anchor: true, slotsRequired: 2 });
        const linked = { linked: true, anchorIndex: slotIndex };
        weapon.modules[slotIndex] = anchor;
        weapon.modules[slotIndex + 1] = linked;
    } else {
        if (weapon.modules[slotIndex]) {
            showModal('–ó–∞–Ω—è—Ç–æ', '–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç.');
            return;
        }
        weapon.modules[slotIndex] = data;
    }

    // –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    state.gear.splice(gearIndex, 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π –º–∞–≥–∞–∑–∏–Ω–∞
    updateWeaponMagazineCapacity(weapon);

    renderGear();
    renderWeapons();
    scheduleSave();
    showModal('–ú–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', `
        <div style="text-align: center; padding: 1.5rem;">
            <div style="background: ${getThemeColors().bgLight}; padding: 1.5rem; border-radius: 8px; margin-bottom: 1.5rem; border: 1px solid ${getThemeColors().border};">
                <div style="font-size: 2rem; margin-bottom: 0.75rem; color: ${getThemeColors().accent};">‚úì</div>
                <h4 style="color: ${getThemeColors().text}; margin: 0 0 0.5rem 0; font-size: 1.1rem; font-weight: 500;">${module.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ—Ä—É–∂–∏–µ</h4>
            </div>
            <button class="pill-button" onclick="closeModal(this)" style="padding: 0.75rem 2rem; font-size: 1rem; background: ${getThemeColors().accent}; color: ${getThemeColors().bg}; border: none;">
                –û—Ç–ª–∏—á–Ω–æ
            </button>
        </div>
    `);
}

function removeWeaponModule(weaponId, slotIndex) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon) return;
    let module = weapon.modules[slotIndex];
    if (!module) return;

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É –¥–≤—É—Ö—Å–ª–æ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —è–∫–æ—Ä—å
    if (module.linked) {
        slotIndex = module.anchorIndex;
        module = weapon.modules[slotIndex];
    }

    const payload = module.anchor ? Object.assign({}, module) : module;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥—É–ª—å –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç)
    state.gear.push({
        id: generateId('gear'),
        name: payload.name,
        description: payload.description,
        price: payload.price,
        load: payload.load,
        type: 'weaponModule',
        weaponModuleData: Object.assign({}, payload, { anchor: undefined })
    });

    // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç—ã
    if (payload.anchor && payload.slotsRequired === 2) {
        weapon.modules[slotIndex] = null;
        if (weapon.modules[slotIndex + 1] && weapon.modules[slotIndex + 1].linked) {
            weapon.modules[slotIndex + 1] = null;
        }
    } else {
        weapon.modules[slotIndex] = null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π –º–∞–≥–∞–∑–∏–Ω–∞
    updateWeaponMagazineCapacity(weapon);

    renderGear();
    renderWeapons();
    scheduleSave();
    showModal('–ú–æ–¥—É–ª—å —Å–Ω—è—Ç', `&#x2705; ${payload.name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ä—É–∂–∏—è
function updateWeaponMagazineCapacity(weapon) {
    if (weapon.type !== 'ranged') return;
    
    // –ë–∞–∑–æ–≤–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞
    const baseMagazine = parseInt(weapon.magazine);
    let multiplier = 1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    const installedModules = weapon.modules.filter(m => m && !m.linked);
    
    for (const module of installedModules) {
        if (module.name === '–ë–∞—Ä–∞–±–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω' || module.name === '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω') {
            multiplier *= 4; // –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ 4
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –ø–∞—Ç—Ä–æ–Ω–æ–≤
    weapon.maxAmmo = baseMagazine * multiplier;
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º, –æ–±—Ä–µ–∑–∞–µ–º
    if (weapon.currentAmmo > weapon.maxAmmo) {
        const excessAmmo = weapon.currentAmmo - weapon.maxAmmo;
        weapon.currentAmmo = weapon.maxAmmo;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–∞—Ç—Ä–æ–Ω—ã –≤ –±–ª–æ–∫ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
        if (weapon.loadedAmmoType && excessAmmo > 0) {
            const weaponTypeForAmmo = getWeaponTypeForAmmo(weapon.name);
            const existingAmmoIndex = state.ammo.findIndex(a => 
                a.type === weapon.loadedAmmoType && a.weaponType === weaponTypeForAmmo
            );
            
            if (existingAmmoIndex !== -1) {
                state.ammo[existingAmmoIndex].quantity += excessAmmo;
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
                const newAmmo = {
                    id: generateId('ammo'),
                    type: weapon.loadedAmmoType,
                    weaponType: weaponTypeForAmmo,
                    quantity: excessAmmo,
                    price: 0
                };
                state.ammo.push(newAmmo);
            }
            renderAmmo();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è
function showWeaponModulesShop() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    modal.innerHTML = `
        <div class="modal" style="max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3><img src="https://static.tildacdn.com/tild6535-3132-4233-b731-356365363437/wrench.png" alt="üîß" style="width: 24px; height: 24px; margin-right: 0.5rem; vertical-align: middle;"> –ú–∞–≥–∞–∑–∏–Ω –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è</h3>
                <div style="display: flex; gap: 0.5rem; align-items: center;">
                    <button onclick="toggleWeaponModulesFreeMode()" id="weaponModulesFreeModeButton" style="background: transparent; border: 1px solid ${getThemeColors().border}; color: ${getThemeColors().text}; padding: 0.3rem 0.6rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</button>
                    <button class="icon-button" onclick="closeModal(this)">√ó</button>
                </div>
            </div>
            
            <!-- –§–∏–ª—å—Ç—Ä—ã -->
            <div style="padding: 1rem; border-bottom: 1px solid var(--border); display: flex; gap: 0.5rem; flex-wrap: wrap;">
                <button class="pill-button weapon-module-category-filter active" onclick="filterWeaponModules('melee')" data-category="melee" style="font-size: 0.85rem; padding: 0.4rem 0.8rem;">
                    –î–ª—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
                </button>
                <button class="pill-button weapon-module-category-filter" onclick="filterWeaponModules('ranged')" data-category="ranged" style="font-size: 0.85rem; padding: 0.4rem 0.8rem;">
                    –î–ª—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è
                </button>
            </div>
            
            <div class="modal-body" style="overflow-y: auto; flex: 1;">
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 1rem; padding: 1rem;" id="weaponModulesShopContent">
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ filterWeaponModules -->
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è
function filterWeaponModules(category) {
    const container = document.getElementById('weaponModulesShopContent');
    if (!container) return;
    
    document.querySelectorAll('.weapon-module-category-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-category') === category) {
            btn.classList.add('active');
        }
    });
    
    const modules = WEAPON_MODULES[category] || [];
    
    container.innerHTML = modules.map(module => `
        <div class="shop-item">
            <div class="shop-item-header">
                <h4 class="shop-item-title">${module.name}${module.slotsRequired ? ` (–¢–†–ï–ë–£–ï–¢ ${module.slotsRequired} –°–õ–û–¢–ê)` : ''}</h4>
            </div>
            
            <p class="shop-item-description">
                ${module.description}
            </p>
            
            <div class="shop-item-stats">
                <div class="shop-stat">–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${module.compatible}</div>
                <div class="shop-stat">–ù–∞–≥—Ä—É–∑–∫–∞: ${module.load}</div>
            </div>
            
            <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                <span class="weapon-module-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${module.price}">
                    ${module.price} —É–µ
                </span>
                <button class="pill-button primary-button weapon-module-buy-button" onclick="buyWeaponModule('${category}', '${module.name}', ${module.price}, ${module.load}, '${module.compatible}', '${module.description.replace(/'/g, "\\'")}', ${module.slotsRequired || 1})" data-module-type="${category}" data-module-name="${module.name}" data-price="${module.price}" data-load="${module.load}" data-compatible="${module.compatible}" data-description="${module.description.replace(/'/g, "\\'")}" data-slots-required="${module.slotsRequired || 1}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                    –ö—É–ø–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è
function buyWeaponModule(category, name, price, load, compatible, description, slotsRequired = 1, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–∏—â–∏–º –Ω–µ –ø—Ä–æ–¥–∞—ë–º. –í–∞–ª–∏ –æ—Ç—Å—é–¥–∞!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const newModule = {
        id: generateId('gear'),
        name: name,
        description: description,
        price: price,
        load: load,
        type: 'weaponModule',
        weaponModuleData: {
            name: name,
            description: description,
            price: price,
            load: load,
            compatible: compatible,
            category: category,
            slotsRequired: slotsRequired
        },
        catalogPrice: catalogPrice,
        purchasePrice: price,
        itemType: catalogPrice ? 'free_catalog' : 'purchased'
    };
    
    state.gear.push(newModule);
    renderGear();
    scheduleSave();
    
    showModal('–ú–æ–¥—É–ª—å –∫—É–ø–ª–µ–Ω', `&#x2705; ${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

function getWeaponModuleFree(category, name, load, compatible, description, slotsRequired = 1) {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const newModule = {
        id: generateId('gear'),
        name: name,
        description: description,
        price: 0,
        load: load,
        type: 'weaponModule',
        weaponModuleData: {
            name: name,
            description: description,
            price: 0,
            load: load,
            compatible: compatible,
            category: category,
            slotsRequired: slotsRequired
        }
    };
    
    state.gear.push(newModule);
    renderGear();
    scheduleSave();
    
    showModal('–ú–æ–¥—É–ª—å –ø–æ–ª—É—á–µ–Ω', `&#x2705; ${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`);
}

function toggleWeaponModulesFreeMode() {
    const buyButtons = document.querySelectorAll('.weapon-module-buy-button');
    const toggleButton = document.getElementById('weaponModulesFreeModeButton');
    const modalOverlay = document.querySelector('.modal-overlay');
    
    const isFreeMode = toggleButton.textContent === '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    if (isFreeMode) {
        buyButtons.forEach(btn => {
            const moduleType = btn.getAttribute('data-module-type');
            const name = btn.getAttribute('data-module-name');
            const price = btn.getAttribute('data-price');
            const load = btn.getAttribute('data-load');
            const compatible = btn.getAttribute('data-compatible');
            const description = btn.getAttribute('data-description');
            const slotsRequired = btn.getAttribute('data-slots-required');
            btn.setAttribute('onclick', `buyWeaponModule('${moduleType}', '${name}', ${price}, ${load}, '${compatible}', '${description}', ${slotsRequired})`);
        });
        
        toggleButton.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'transparent';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
        if (modalOverlay) {
            modalOverlay.style.background = document.body.classList.contains('light-theme') ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.85)';
        }
    } else {
        buyButtons.forEach(btn => {
            const moduleType = btn.getAttribute('data-module-type');
            const name = btn.getAttribute('data-module-name');
            const load = btn.getAttribute('data-load');
            const compatible = btn.getAttribute('data-compatible');
            const description = btn.getAttribute('data-description');
            const slotsRequired = btn.getAttribute('data-slots-required');
            btn.setAttribute('onclick', `getWeaponModuleFree('${moduleType}', '${name}', ${load}, '${compatible}', '${description}', ${slotsRequired})`);
        });
        
        toggleButton.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'linear-gradient(135deg, #7DF4C6, #5b9bff)';
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 100, 50, 0.85)';
        }
    }
}


// –§—É–Ω–∫—Ü–∏–∏ renderGear, toggleGearDescription, decreaseShieldHP, installImplantFromGear, removeGear
// –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ gear.js

function takeWeaponFromGear(gearIndex) {
    const gearItem = state.gear[gearIndex];
    if (!gearItem || gearItem.type !== 'weapon') {
        console.error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä—É–∂–∏–µ–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ä—É–∂–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    const weaponData = gearItem.weaponData || {};
    
    const newWeapon = {
        id: generateId('weapon'),
        name: gearItem.name,
        type: weaponData.type || 'melee', // melee –∏–ª–∏ ranged
        load: gearItem.load || 1,
        slots: 3, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        modules: [null, null, null], // –ü—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π
        
        // –î–ª—è –æ—Ä—É–∂–∏—è –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è
        damage: weaponData.damage || '1d6',
        concealable: weaponData.concealable !== undefined ? (weaponData.concealable ? '–¥–∞' : '–Ω–µ—Ç') : '–Ω–µ—Ç',
        stealthPenalty: weaponData.stealthPenalty || '0',
        examples: weaponData.examples || '',
        
        // –î–ª—è –æ—Ä—É–∂–∏—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è
        primaryDamage: weaponData.primaryDamage || weaponData.damage || '1d6',
        altDamage: weaponData.altDamage || weaponData.damage || '1d6',
        hands: weaponData.hands || 1,
        stealth: weaponData.stealth || 0,
        magazine: weaponData.magazine || 10,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        appearance: weaponData.appearance || '',
        customDescription: weaponData.customDescription || gearItem.description || '',
        
        // –°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è)
        maxAmmo: weaponData.type === 'ranged' ? parseInt(weaponData.magazine || 10) : 0,
        currentAmmo: 0,
        loadedAmmoType: null,
        // –û—Å–æ–±–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤
        isShotgun: gearItem.name.includes('–î—Ä–æ–±–æ–≤–∏–∫'),
        shotgunAmmo1: { type: null, count: 0 }, // –ü–µ—Ä–≤—ã–π —Ç–∏–ø –ø–∞—Ç—Ä–æ–Ω–æ–≤ (–¥–æ 3 —à—Ç)
        shotgunAmmo2: { type: null, count: 0 }  // –í—Ç–æ—Ä–æ–π —Ç–∏–ø –ø–∞—Ç—Ä–æ–Ω–æ–≤ (–¥–æ 3 —à—Ç)
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ –≤ –±–ª–æ–∫ "–û—Ä—É–∂–∏–µ"
    state.weapons.push(newWeapon);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    state.gear.splice(gearIndex, 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    renderWeapons();
    renderGear();
    scheduleSave();
    
    showModal('–û—Ä—É–∂–∏–µ –≤–∑—è—Ç–æ –≤ —Ä—É–∫–∏', `&#x2705; ${newWeapon.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –±–ª–æ–∫ "–û—Ä—É–∂–∏–µ"!`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ä—É–∂–∏—è –∏–∑ –±–ª–æ–∫–∞ "–û—Ä—É–∂–∏–µ" –≤ "–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
function moveWeaponToGear(weaponIndex) {
    const weapon = state.weapons[weaponIndex];
    if (!weapon) {
        console.error('–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –≤ –±–ª–æ–∫ "–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã", –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—Ä—è–∂–µ–Ω—ã
    if (weapon.type === 'ranged' && weapon.currentAmmo > 0 && weapon.loadedAmmoType) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const weaponTypeForAmmo = weapon.isShotgun ? '–î—Ä–æ–±–æ–≤–∏–∫' : getWeaponTypeForAmmo(weapon.name);
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞–∫ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        const existingAmmo = state.ammo.find(a => 
            a.type === weapon.loadedAmmoType && 
            a.weaponType === weaponTypeForAmmo
        );
        
        if (existingAmmo) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–∞–∫—É
            existingAmmo.quantity += weapon.currentAmmo;
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞–∫
            const newAmmo = {
                id: generateId('ammo'),
                type: weapon.loadedAmmoType,
                weaponType: weaponTypeForAmmo,
                quantity: weapon.currentAmmo,
                price: 0
            };
            state.ammo.push(newAmmo);
        }
        renderAmmo();
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä—É–∂–∏—è
    let description = '';
    if (weapon.type === 'melee') {
        description = `–£—Ä–æ–Ω: ${weapon.damage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(weapon.concealable)} | –®—Ç—Ä–∞—Ñ –∫ –°–ö–ê: ${weapon.stealthPenalty}`;
    } else {
        description = `–£—Ä–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π: ${weapon.primaryDamage} | –£—Ä–æ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: ${weapon.altDamage} | –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: ${formatYesNo(weapon.concealable)} | # —Ä—É–∫: ${weapon.hands} | –°–ö–ê: ${weapon.stealth} | –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: ${weapon.magazine}`;
    }
    
    const gearItem = {
        id: generateId('gear'),
        name: weapon.customName || weapon.name,
        description: description,
        price: weapon.price || 0,
        load: weapon.load || 3,
        type: 'weapon',
        weaponData: {
            type: weapon.type,
            damage: weapon.damage,
            primaryDamage: weapon.primaryDamage,
            altDamage: weapon.altDamage,
            concealable: weapon.concealable,
            stealthPenalty: weapon.stealthPenalty,
            hands: weapon.hands,
            stealth: weapon.stealth,
            magazine: weapon.magazine,
            examples: weapon.examples || '',
            appearance: weapon.appearance || '',
            customDescription: weapon.customDescription || ''
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    state.gear.push(gearItem);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –±–ª–æ–∫–∞ –æ—Ä—É–∂–∏—è
    state.weapons.splice(weaponIndex, 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    renderWeapons();
    renderGear();
    scheduleSave();
    
    showModal('–û—Ä—É–∂–∏–µ —Å–ª–æ–∂–µ–Ω–æ', `&#x2705; ${gearItem.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–µ–ø—Ä–∏–ø–∞—Å–∞–º–∏
function renderAmmo() {
    const container = document.getElementById('ammoContainer');
    if (!container) return;
    
    if (state.ammo.length === 0) {
        container.innerHTML = '<p style="color: ${getThemeColors().muted}; text-align: center; padding: 1rem; font-size: 0.8rem;">–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }
    
    container.innerHTML = state.ammo.map((ammo, index) => `
        <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 6px; padding: 0.5rem 0.75rem; margin-bottom: 0.5rem; display: flex; justify-content: space-between; align-items: center;">
            <div style="flex: 1;">
                <div style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 0.85rem;">${ammo.type}</div>
                <div style="color: ${getThemeColors().muted}; font-size: 0.7rem; font-family: monospace; margin-top: 0.1rem;">${ammo.weaponType}</div>
            </div>
            <div style="display: flex; gap: 0.5rem; align-items: center;">
                <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <button onclick="changeAmmoQuantity(${index}, -1)" style="font-size: 0.75rem; padding: 0.2rem 0.4rem; min-width: 24px; background: transparent; border: none; color: ${getThemeColors().text}; cursor: pointer;">‚àí</button>
                    <span style="color: ${getThemeColors().accent}; font-weight: 600; min-width: 35px; text-align: center; font-size: 0.85rem;">${ammo.quantity}</span>
                </div>
                <button class="pill-button danger-button" onclick="removeAmmo(${index})" style="font-size: 0.7rem; padding: 0.25rem 0.5rem;">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

function showAmmoShop() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3><img src="https://static.tildacdn.com/tild3334-6338-4439-a262-316631336461/bullets.png" alt="üî´" style="width: 24px; height: 24px; margin-right: 0.5rem; vertical-align: middle;"> –ú–∞–≥–∞–∑–∏–Ω –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤</h3>
                <div style="display: flex; gap: 0.5rem; align-items: center;">
                    <button onclick="toggleAmmoFreeMode()" id="ammoFreeModeButton" style="background: transparent; border: 1px solid ${getThemeColors().border}; color: ${getThemeColors().text}; padding: 0.3rem 0.6rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</button>
                    <button class="icon-button" onclick="closeModal(this)">√ó</button>
                </div>
            </div>
            
            <!-- –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤ -->
            <div style="padding: 1rem; border-bottom: 1px solid var(--border); display: flex; gap: 0.5rem; flex-wrap: wrap;">
                ${AMMO_DATA.types.map((type, idx) => `
                    <button class="pill-button ammo-category-filter ${idx === 0 ? 'active' : ''}" onclick="filterAmmo('${type}')" data-ammo-category="${type}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        ${type}
                    </button>
                `).join('')}
                <button class="pill-button ammo-category-filter" onclick="filterAmmo('–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞')" data-ammo-category="–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                    –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞
                </button>
            </div>
            
            <div class="modal-body" style="overflow-y: auto; flex: 1;">
                <div style="margin-bottom: 1rem; padding: 1rem; background: ${getThemeColors().successLight}; border: 1px solid ${getThemeColors().success}; border-radius: 8px;">
                    <p style="color: ${getThemeColors().success}; font-weight: 600; margin-bottom: 0.5rem;">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–µ–ø—Ä–∏–ø–∞—Å–∞—Ö:</p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 0.25rem;">‚Ä¢ 1 –ø–∞—á–∫–∞ –ø–∞—Ç—Ä–æ–Ω–æ–≤ = 10 –ø–∞—Ç—Ä–æ–Ω–æ–≤</p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 0.25rem;">‚Ä¢ –ì—Ä–∞–Ω–∞—Ç—ã –∏ —Ä–∞–∫–µ—Ç—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –ø–æ 1 —à—Ç—É–∫–µ</p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">‚Ä¢ –í—Å–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∏–º–µ—é—Ç –Ω–∞–≥—Ä—É–∑–∫—É = 1</p>
                </div>
                       <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 1rem; padding: 1rem;" id="ammoShopContent">
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ filterAmmo -->
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const style = document.createElement('style');
    style.textContent = `
        .ammo-category-filter.active {
            background: var(--accent) !important;
            color: white !important;
        }
    `;
    if (!document.getElementById('ammo-filter-styles')) {
        style.id = 'ammo-filter-styles';
        document.head.appendChild(style);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filterAmmo(AMMO_DATA.types[0]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
function filterAmmo(category) {
    const container = document.getElementById('ammoShopContent');
    if (!container) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    document.querySelectorAll('.ammo-category-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-ammo-category') === category) {
            btn.classList.add('active');
        }
    });
    
    let contentHTML = '';
    
    if (category === '–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞') {
        // –†–µ–Ω–¥–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—â–∏—Ç—É
        const activeDefenseItems = [
            { name: '–ü–∏—Ä–æ–ø–∞—Ç—Ä–æ–Ω', description: '–î–ª—è –¥—Ä–æ–±–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (—É—Ä–æ–Ω 4d4)', price: 50 },
            { name: '–í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è –º–∏–Ω–∏-–±–∞—Ç–∞—Ä–µ—è', description: '–î–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (–±–µ–∑ —É—Ä–æ–Ω–∞)', price: 250 },
            { name: '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞', description: '–î–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (—É—Ä–æ–Ω 6d6)', price: 500 }
        ];
        
        contentHTML = activeDefenseItems.map(item => `
            <div class="shop-item">
                <div class="shop-item-header">
                    <h4 class="shop-item-title">${item.name}</h4>
                </div>
                
                <p class="shop-item-description">
                    ${item.description}
                </p>
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                    <span class="ammo-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${item.price}">
                        ${item.price} —É–µ
                    </span>
                    <button class="pill-button primary-button" onclick="showAmmoQuantityModal('–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞', '${item.name}', ${item.price})" data-ammo-type="–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞" data-weapon-type="${item.name}" data-price="${item.price}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    } else {
        // –†–µ–Ω–¥–µ—Ä–∏–º –æ–±—ã—á–Ω—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã
        const ammoItems = [];
        for (const [weaponTypeFull, weaponTypeShort] of Object.entries(AMMO_DATA.weaponTypes)) {
            const price = AMMO_DATA.prices[category][weaponTypeShort];
            
            if (price !== null) {
                ammoItems.push({
                    weaponType: weaponTypeFull,
                    weaponTypeShort: weaponTypeShort,
                    price: price
                });
            }
        }
        
        contentHTML = ammoItems.map(item => `
            <div class="shop-item">
                <div class="shop-item-header">
                    <h4 class="shop-item-title">${item.weaponType}</h4>
                </div>
                
                <div class="shop-item-stats">
                    <div class="shop-stat">–¢–∏–ø: ${category}</div>
                    <div class="shop-stat">–ö–ª–∞—Å—Å: ${item.weaponTypeShort}</div>
                    <div class="shop-stat">–ù–∞–≥—Ä—É–∑–∫–∞: 1</div>
                </div>
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                    <span class="ammo-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${item.price}">
                        ${item.price} —É–µ
                    </span>
                    <button class="pill-button primary-button" onclick="showAmmoQuantityModal('${category}', '${item.weaponType}', ${item.price})" data-ammo-type="${category}" data-weapon-type="${item.weaponType}" data-price="${item.price}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    container.innerHTML = contentHTML;
}

function toggleAmmoFreeMode() {
    const priceElements = document.querySelectorAll('.ammo-price');
    const buyButtons = document.querySelectorAll('[data-ammo-type]');
    const toggleButton = document.getElementById('ammoFreeModeButton');
    const modalOverlay = document.querySelector('.modal-overlay');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    const isFreeMode = toggleButton.textContent === '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    if (isFreeMode) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
        priceElements.forEach(el => {
            const originalPrice = el.getAttribute('data-original-price');
            el.textContent = `${originalPrice} —É–µ`;
        });
        
        buyButtons.forEach(btn => {
            const originalPrice = btn.getAttribute('data-price');
            const ammoType = btn.getAttribute('data-ammo-type');
            const weaponType = btn.getAttribute('data-weapon-type');
            btn.setAttribute('onclick', `showAmmoQuantityModal('${ammoType}', '${weaponType}', ${originalPrice})`);
        });
        
        toggleButton.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'transparent';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ–Ω
        if (modalOverlay) {
            modalOverlay.style.background = document.body.classList.contains('light-theme') ? 'rgba(255, 255, 255, 0.95)' : 'rgba(0, 0, 0, 0.85)';
        }
    } else {
        // –í–∫–ª—é—á–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        priceElements.forEach(el => {
            el.textContent = '0 —É–µ';
        });
        
        buyButtons.forEach(btn => {
            const ammoType = btn.getAttribute('data-ammo-type');
            const weaponType = btn.getAttribute('data-weapon-type');
            btn.setAttribute('onclick', `showAmmoQuantityModal('${ammoType}', '${weaponType}', 0)`);
        });
        
        toggleButton.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        toggleButton.style.background = 'linear-gradient(135deg, #7DF4C6, #5b9bff)';
        
        // –ú–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–π
        if (modalOverlay) {
            modalOverlay.style.background = 'rgba(0, 100, 50, 0.85)';
        }
    }
}

function showAmmoQuantityModal(ammoType, weaponType, price) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    const isGrenadeOrRocket = weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || weaponType === '–†–∞–∫–µ—Ç—ã';
    const isActiveDefense = ammoType === '–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞';
    const isSingleUnit = isGrenadeOrRocket || isActiveDefense;
    const unitText = isSingleUnit ? '—à—Ç.' : '–ø–∞—á–µ–∫';
    const contentText = isSingleUnit ? '—à—Ç—É–∫' : '–ø–∞—á–µ–∫ (–ø–æ 10 –ø–∞—Ç—Ä–æ–Ω–æ–≤)';
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>üõí –ü–æ–∫—É–ø–∫–∞ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1rem;">
                    <p style="margin-bottom: 0.5rem;"><strong>${ammoType}</strong></p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                        –î–ª—è: <strong style="color: ${getThemeColors().accent};">${weaponType}</strong>
                    </p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem; margin-bottom: 1rem;">
                        –¶–µ–Ω–∞ –∑–∞ ${isSingleUnit ? '1 —à—Ç—É–∫—É' : '1 –ø–∞—á–∫—É'}: <strong style="color: ${getThemeColors().success};">${price} —É–µ</strong>
                    </p>
                </div>
                
                <div class="input-group">
                    <label class="input-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ${contentText}</label>
                    <input type="number" class="input-field" id="ammoQuantity" value="1" min="1" max="99" onchange="updateAmmoTotal(${price})">
                </div>
                
                <div style="margin-top: 1rem; padding: 0.75rem; background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 8px; text-align: center;">
                    <div style="color: ${getThemeColors().accent}; font-weight: 600;">–ò—Ç–æ–≥–æ: <span id="ammoTotalPrice">${price}</span> —É–µ</div>
                    ${!isSingleUnit ? '<div style="color: ${getThemeColors().muted}; font-size: 0.8rem; margin-top: 0.25rem;">–ü–∞—Ç—Ä–æ–Ω–æ–≤: <span id="ammoTotalBullets">10</span> —à—Ç.</div>' : ''}
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button primary-button" onclick="buyAmmoWithQuantity('${ammoType}', '${weaponType}', ${price})">–ö—É–ø–∏—Ç—å</button>
                <button class="pill-button" onclick="closeModal(this)">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    addModalKeyboardHandlers(modal);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    setTimeout(() => {
        const input = document.getElementById('ammoQuantity');
        if (input) input.focus();
    }, 100);
}

function updateAmmoTotal(pricePerUnit) {
    const quantity = parseInt(document.getElementById('ammoQuantity').value) || 1;
    const totalPrice = quantity * pricePerUnit;
    
    const totalPriceEl = document.getElementById('ammoTotalPrice');
    const totalBulletsEl = document.getElementById('ammoTotalBullets');
    
    if (totalPriceEl) {
        totalPriceEl.textContent = totalPrice;
    }
    
    if (totalBulletsEl) {
        totalBulletsEl.textContent = quantity * 10;
    }
}

function buyAmmoWithQuantity(ammoType, weaponType, pricePerUnit, catalogPrice = null) {
    const quantity = parseInt(document.getElementById('ammoQuantity').value) || 1;
    const totalPrice = quantity * pricePerUnit;
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < totalPrice) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!</p>
                <p style="margin-bottom: 1rem;">–¢—Ä–µ–±—É–µ—Ç—Å—è: ${totalPrice} —É–µ | –î–æ—Å—Ç—É–ø–Ω–æ: ${currentMoney} —É–µ</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - totalPrice;
    updateMoneyDisplay();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü
    const isGrenadeOrRocket = weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || weaponType === '–†–∞–∫–µ—Ç—ã';
    const isActiveDefense = ammoType === '–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞';
    const isSingleUnit = isGrenadeOrRocket || isActiveDefense;
    const addQuantity = isSingleUnit ? quantity : quantity * 10;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É (–∫–∞–∂–¥—ã–µ 10 –ø–∞—Ç—Ä–æ–Ω–æ–≤/–≥—Ä–∞–Ω–∞—Ç/—Ä–∞–∫–µ—Ç/–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ = 1 –Ω–∞–≥—Ä—É–∑–∫–∞)
    const loadToDeduct = isSingleUnit ? quantity : quantity;
    
    // –í—ã—á–∏—Ç–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫)
    state.load.current -= loadToDeduct;
    updateLoadDisplay();
    
    // –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞" –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const ammoName = isActiveDefense ? '–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞' : ammoType;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    // –ò—â–µ–º –ø–æ —Ç–∏–ø—É –ò weaponType –¥–ª—è –≤—Å–µ—Ö –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    const existingAmmoIndex = state.ammo.findIndex(a => {
        return a.type === ammoName && a.weaponType === weaponType;
    });
    
    if (existingAmmoIndex !== -1) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        state.ammo[existingAmmoIndex].quantity += addQuantity;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        const newAmmo = {
            id: generateId('ammo'),
            type: ammoName,
            weaponType: weaponType,
            quantity: addQuantity,
            price: pricePerUnit,
            catalogPrice: catalogPrice,
            purchasePrice: pricePerUnit,
            itemType: catalogPrice ? 'free_catalog' : 'purchased'
        };
        state.ammo.push(newAmmo);
    }
    
    renderAmmo();
    scheduleSave();
    
    const quantityText = isSingleUnit 
        ? `${quantity} —à—Ç.` 
        : `${addQuantity} –ø–∞—Ç—Ä–æ–Ω–æ–≤ (${quantity} –ø–∞—á–µ–∫)`;
    
    // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –ø–æ–∫—É–ø–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
    
    showModal('–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∫—É–ø–ª–µ–Ω—ã', `
        <div style="text-align: center; padding: 1rem;">
            <p style="color: ${getThemeColors().success}; font-size: 1.1rem; margin-bottom: 1rem;">&#x2705; –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∫—É–ø–ª–µ–Ω—ã!</p>
            <p style="color: ${getThemeColors().text}; margin-bottom: 0.5rem;"><strong>${ammoName}</strong></p>
            <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">–î–ª—è: ${weaponType}</p>
            <p style="color: ${getThemeColors().accent}; margin-bottom: 1rem;">–ü–æ–ª—É—á–µ–Ω–æ: ${quantityText}</p>
            <p style="color: ${getThemeColors().muted};">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalPrice} —É–µ</p>
        </div>
    `);
}

function buyAmmo(ammoType, weaponType, price, catalogPrice = null) {
    const currentMoney = parseInt(state.money) || 0;
    
    if (currentMoney < price) {
        showModal('–û—à–∏–±–∫–∞', `
            <div style="text-align: center; padding: 1rem; background: ${getThemeColors().danger}; color: white; border-radius: 8px;">
                <p style="font-size: 1.1rem; margin-bottom: 1rem;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!</p>
                <button class="pill-button" onclick="closeModal(this)">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money = currentMoney - price;
    updateMoneyDisplay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    const existingAmmoIndex = state.ammo.findIndex(a => a.type === ammoType && a.weaponType === weaponType);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü
    const addQuantity = (weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || weaponType === '–†–∞–∫–µ—Ç—ã') ? 1 : 10;
    
    if (existingAmmoIndex !== -1) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        state.ammo[existingAmmoIndex].quantity += addQuantity;
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        const newAmmo = {
            id: generateId('ammo'),
            type: ammoType,
            weaponType: weaponType,
            quantity: addQuantity,
            price: price,
            catalogPrice: catalogPrice,
            purchasePrice: price,
            itemType: catalogPrice ? 'free_catalog' : 'purchased'
        };
        state.ammo.push(newAmmo);
    }
    
    renderAmmo();
    scheduleSave();
    
    const quantityText = (weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || weaponType === '–†–∞–∫–µ—Ç—ã') 
        ? '1 —à—Ç.' 
        : '10 –ø–∞—Ç—Ä–æ–Ω–æ–≤';
    
    showModal('–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∫—É–ø–ª–µ–Ω—ã', `
        <div style="text-align: center; padding: 1rem;">
            <p style="color: ${getThemeColors().success}; font-size: 1.1rem; margin-bottom: 1rem;">&#x2705; ${ammoType} (${weaponType}) –∫—É–ø–ª–µ–Ω—ã!</p>
            <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">–ö—É–ø–ª–µ–Ω–æ: ${quantityText}</p>
        </div>
    `);
}

function changeAmmoQuantity(index, delta) {
    if (!state.ammo[index]) return;
    
    const ammo = state.ammo[index];
    const oldQuantity = ammo.quantity;
    const newQuantity = oldQuantity + delta;
    
    if (newQuantity < 0) {
        showModal('–û—à–∏–±–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!');
        return;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    const isGrenadeOrRocket = (ammo.weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || ammo.weaponType === '–†–∞–∫–µ—Ç—ã');
    
    if (delta < 0) { // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const quantityReduced = Math.abs(delta);
        let loadToReturn = 0;
        
        if (isGrenadeOrRocket) {
            // –î–ª—è –≥—Ä–∞–Ω–∞—Ç –∏ —Ä–∞–∫–µ—Ç: –∫–∞–∂–¥–∞—è —à—Ç—É–∫–∞ = 1 –Ω–∞–≥—Ä—É–∑–∫–∞
            loadToReturn = quantityReduced;
        } else {
            // –î–ª—è –ø–∞—Ç—Ä–æ–Ω–æ–≤: –∫–∞–∂–¥—ã–µ 10 –ø–∞—Ç—Ä–æ–Ω–æ–≤ = 1 –Ω–∞–≥—Ä—É–∑–∫–∞
            const oldLoadUnits = Math.ceil(oldQuantity / 10);
            const newLoadUnits = Math.ceil(newQuantity / 10);
            loadToReturn = oldLoadUnits - newLoadUnits;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        state.load.current += loadToReturn;
        updateLoadDisplay();
    }
    
    ammo.quantity = newQuantity;
    renderAmmo();
    scheduleSave();
}

function removeAmmo(index) {
        const ammo = state.ammo[index];
        if (ammo) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            const isGrenadeOrRocket = (ammo.weaponType === '–ì—Ä–∞–Ω–∞—Ç—ã' || ammo.weaponType === '–†–∞–∫–µ—Ç—ã');
            const loadToReturn = isGrenadeOrRocket ? ammo.quantity : Math.ceil(ammo.quantity / 10);
            
            state.load.current += loadToReturn;
            updateLoadDisplay();
        }
        
        state.ammo.splice(index, 1);
        renderAmmo();
        scheduleSave();
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –æ—Ä—É–∂–∏—è
function reloadWeapon(weaponId) {
    console.log('üî´ reloadWeapon –≤—ã–∑–≤–∞–Ω–∞ —Å weaponId:', weaponId);
    
    const weapon = state.weapons.find(w => w.id === weaponId);
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ:', weapon);
    
    if (!weapon || weapon.type !== 'ranged') {
        console.error('‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞–ª—å–Ω–∏–º!');
        showModal('–û—à–∏–±–∫–∞', '–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞–ª—å–Ω–∏–º!');
        return;
    }
    
    console.log('‚úÖ –û—Ä—É–∂–∏–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–∏–ø:', weapon.type);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    let weaponTypeForAmmo;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –æ—Ä—É–∂–∏–µ–º (–ø–æ ID –∏–ª–∏ —Ñ–ª–∞–≥—É)
    const isEmbeddedWeapon = weapon.isEmbedded || weapon.id.startsWith('embedded_');
    
    if (isEmbeddedWeapon) {
        // –î–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –Ω–∞–ø—Ä—è–º—É—é
        // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        console.log('üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, weapon.name:', weapon.name);
        console.log('üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, weapon.id:', weapon.id);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –¥–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç
        if (weapon.id.includes('embedded_') && weapon.id.includes('–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã')) {
            weaponTypeForAmmo = '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞';
            console.log('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã –ø–æ ID, weaponTypeForAmmo:', weaponTypeForAmmo);
        } else if (weapon.name === '–ì—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç') {
            weaponTypeForAmmo = '–ì—Ä–∞–Ω–∞—Ç—ã'; // –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∏–º–µ—é—Ç weaponType: "–ì—Ä–∞–Ω–∞—Ç—ã"
        } else if (weapon.name === '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã') {
            weaponTypeForAmmo = '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞'; // –î–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç
        } else {
            weaponTypeForAmmo = weapon.name;
        }
        console.log('üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, weaponTypeForAmmo:', weaponTypeForAmmo);
    } else {
        weaponTypeForAmmo = getWeaponTypeForAmmo(weapon.name);
        console.log('üîß –û–±—ã—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ, weaponTypeForAmmo:', weaponTypeForAmmo);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã
    const compatibleAmmo = state.ammo.filter(ammo => 
        ammo.weaponType === weaponTypeForAmmo && ammo.quantity > 0
    );
    
    console.log('üì¶ –í—Å–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –≤ state.ammo:', state.ammo);
    console.log('üì¶ –ò—â–µ–º –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã —Å weaponType:', weaponTypeForAmmo);
    console.log('üì¶ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã:', compatibleAmmo);
    
    if (compatibleAmmo.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤!');
        showModal('–ù–µ—Ç –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤!</p>
                <p style="color: ${getThemeColors().muted}; margin-bottom: 1rem;">–ö—É–ø–∏—Ç–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –¥–ª—è ${weaponTypeForAmmo}</p>
            </div>
        `);
        return;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã, —Å–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>üîÑ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ${weapon.name}</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1rem;">
                    <p style="color: ${getThemeColors().text}; margin-bottom: 0.5rem;"><strong>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong></p>
                    <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">
                        –ü–∞—Ç—Ä–æ–Ω–æ–≤: ${weapon.currentAmmo}/${weapon.maxAmmo}
                        ${weapon.loadedAmmoType ? ` | –¢–∏–ø: ${weapon.loadedAmmoType}` : ' | –ù–µ –∑–∞—Ä—è–∂–µ–Ω–æ'}
                    </p>
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label class="input-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤</label>
                    <select class="input-field" id="reloadAmmoType">
                        ${compatibleAmmo.map((ammo, index) => `
                            <option value="${index}">${ammo.type} (${ammo.quantity} —à—Ç.)</option>
                        `).join('')}
                    </select>
                </div>
                
                <div id="reloadWarning" style="margin-bottom: 1rem; padding: 0.75rem; background: rgba(255, 165, 0, 0.1); border: 1px solid orange; border-radius: 8px; display: none;">
                    <p style="color: orange; font-size: 0.9rem; margin-bottom: 0.5rem;">&#x26A0;&#xFE0F; –í–Ω–∏–º–∞–Ω–∏–µ!</p>
                    <p style="color: ${getThemeColors().text}; font-size: 0.8rem;" id="reloadWarningText">
                        –í –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞. –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ –æ–Ω–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–æ–∫ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã.
                    </p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button primary-button" onclick="executeReload('${weaponId}')">
                    üîÑ –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    setTimeout(() => {
        const ammoSelect = document.getElementById('reloadAmmoType');
        const warningDiv = document.getElementById('reloadWarning');
        const warningText = document.getElementById('reloadWarningText');
        
        function checkAmmoTypeChange() {
            const selectedIndex = parseInt(ammoSelect.value);
            const selectedAmmo = compatibleAmmo[selectedIndex];
            
            if (weapon.currentAmmo > 0 && weapon.loadedAmmoType && weapon.loadedAmmoType !== selectedAmmo.type) {
                warningDiv.style.display = 'block';
                warningText.textContent = `–í –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã —Ç–∏–ø–∞ "${weapon.loadedAmmoType}" (${weapon.currentAmmo} —à—Ç.). –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ –æ–Ω–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –±–ª–æ–∫ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã.`;
            } else {
                warningDiv.style.display = 'none';
            }
        }
        
        ammoSelect.addEventListener('change', checkAmmoTypeChange);
        checkAmmoTypeChange(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    }, 100);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            if (weapon.isEmbedded && weapon.id.startsWith('embedded_')) {
                const index = state.weapons.findIndex(w => w.id === weapon.id);
                if (index !== -1) {
                    state.weapons.splice(index, 1);
                    console.log('‚ûñ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
                }
            }
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
window.executeReload = function(weaponId) {
    console.log('‚ö° executeReload –≤—ã–∑–≤–∞–Ω–∞ —Å weaponId:', weaponId);
    
    const weapon = state.weapons.find(w => w.id === weaponId);
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –≤ executeReload:', weapon);
    
    if (!weapon) {
        console.error('‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ executeReload!');
        return;
    }
    
    const selectedAmmoIndex = parseInt(document.getElementById('reloadAmmoType').value);
    console.log('üìã –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤:', selectedAmmoIndex);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä—É–∂–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    let weaponTypeForAmmo;
    if (weapon.isEmbedded) {
        // –î–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –Ω–∞–ø—Ä—è–º—É—é
        // –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
        if (weapon.name === '–ì—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç') {
            weaponTypeForAmmo = '–ì—Ä–∞–Ω–∞—Ç—ã'; // –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã –∏–º–µ—é—Ç weaponType: "–ì—Ä–∞–Ω–∞—Ç—ã"
        } else if (weapon.name === '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã') {
            weaponTypeForAmmo = '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞'; // –î–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç
        } else {
            weaponTypeForAmmo = weapon.name;
        }
    } else {
        weaponTypeForAmmo = getWeaponTypeForAmmo(weapon.name);
    }
    
    const compatibleAmmo = state.ammo.filter(ammo => 
        ammo.weaponType === weaponTypeForAmmo && ammo.quantity > 0
    );
    const selectedAmmo = compatibleAmmo[selectedAmmoIndex];
    
    if (!selectedAmmo) {
        showModal('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    // –ï—Å–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –±–ª–æ–∫ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
    if (weapon.currentAmmo > 0 && weapon.loadedAmmoType && weapon.loadedAmmoType !== selectedAmmo.type) {
        const existingAmmoIndex = state.ammo.findIndex(a => 
            a.type === weapon.loadedAmmoType && a.weaponType === weaponTypeForAmmo
        );
        
        if (existingAmmoIndex !== -1) {
            state.ammo[existingAmmoIndex].quantity += weapon.currentAmmo;
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
            const newAmmo = {
                id: generateId('ammo'),
                type: weapon.loadedAmmoType,
                weaponType: weaponTypeForAmmo,
                quantity: weapon.currentAmmo,
                price: 0
            };
            state.ammo.push(newAmmo);
        }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
    const ammoNeeded = weapon.maxAmmo - (weapon.loadedAmmoType === selectedAmmo.type ? weapon.currentAmmo : 0);
    const ammoToTake = Math.min(ammoNeeded, selectedAmmo.quantity);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    const realAmmoIndex = state.ammo.findIndex(ammo => ammo.id === selectedAmmo.id);
    
    if (realAmmoIndex !== -1) {
        // –í—ã—á–∏—Ç–∞–µ–º –ø–∞—Ç—Ä–æ–Ω—ã –∏–∑ –±–ª–æ–∫–∞ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
        state.ammo[realAmmoIndex].quantity -= ammoToTake;
        
        // –ó–∞—Ä—è–∂–∞–µ–º –æ—Ä—É–∂–∏–µ
        weapon.currentAmmo = (weapon.loadedAmmoType === selectedAmmo.type ? weapon.currentAmmo : 0) + ammoToTake;
        weapon.loadedAmmoType = selectedAmmo.type;
        
        renderAmmo();
        if (weapon.isEmbedded) {
            // –î–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–ø–ª–∞–Ω—Ç–æ–≤
            const parts = weapon.id.replace('embedded_', '').split('_');
            const implantType = parts[0];
            const partName = parts[1];
            const slotIndex = parseInt(parts[2]);
            
            const module = getImplantModule(implantType, partName, slotIndex);
            if (module) {
                module.currentAmmo = weapon.currentAmmo;
                module.loadedAmmoType = weapon.loadedAmmoType;
            }
            
            if (typeof renderImplants === 'function') renderImplants();
        } else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è
            renderWeapons();
        }
        scheduleSave();
        
        closeModal(document.querySelector('.modal-overlay .icon-button'));
        
        const reloadMessage = ammoToTake === ammoNeeded ? 
            '–ú–∞–≥–∞–∑–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω!' : 
            `–ó–∞—Ä—è–∂–µ–Ω–æ ${ammoToTake} –∏–∑ ${ammoNeeded} –ø–∞—Ç—Ä–æ–Ω–æ–≤ (–Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤)`;
        
        showModal('–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().success}; font-size: 1.1rem; margin-bottom: 1rem;">&#x2705; ${weapon.name}</p>
                <p style="color: ${getThemeColors().text}; margin-bottom: 0.5rem;">${reloadMessage}</p>
                <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">–¢–∏–ø: ${selectedAmmo.type} | –ü–∞—Ç—Ä–æ–Ω–æ–≤: ${weapon.currentAmmo}/${weapon.maxAmmo}</p>
            </div>
        `);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        if (weapon.isEmbedded && weapon.id.startsWith('embedded_')) {
            const index = state.weapons.findIndex(w => w.id === weapon.id);
            if (index !== -1) {
                state.weapons.splice(index, 1);
                console.log('‚ûñ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ state.weapons');
            }
        }
    }
}

function reloadShotgun(weaponId) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon || !weapon.isShotgun) {
        showModal('–û—à–∏–±–∫–∞', '–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥—Ä–æ–±–æ–≤–∏–∫–æ–º!');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–∞
    const compatibleAmmo = state.ammo.filter(ammo => 
        ammo.weaponType === '–î—Ä–æ–±–æ–≤–∏–∫' && ammo.quantity > 0
    );
    
    if (compatibleAmmo.length === 0) {
        showModal('–ù–µ—Ç –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().danger}; font-size: 1.1rem; margin-bottom: 1rem;">–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤ –¥–ª—è –¥—Ä–æ–±–æ–≤–∏–∫–∞!</p>
            </div>
        `);
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>&#x1F504; –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –¥—Ä–æ–±–æ–≤–∏–∫–∞: ${weapon.name}</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1rem;">
                    <p style="color: ${getThemeColors().text}; margin-bottom: 0.5rem;"><strong>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong></p>
                    <div style="display: grid; gap: 0.5rem; margin-bottom: 1rem;">
                        <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">
                            –°–ª–æ—Ç 1: ${weapon.shotgunAmmo1.count}/3 ${weapon.shotgunAmmo1.type ? `(${weapon.shotgunAmmo1.type})` : '(–ø—É—Å—Ç–æ)'}
                        </p>
                        <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">
                            –°–ª–æ—Ç 2: ${weapon.shotgunAmmo2.count}/3 ${weapon.shotgunAmmo2.type ? `(${weapon.shotgunAmmo2.type})` : '(–ø—É—Å—Ç–æ)'}
                        </p>
                    </div>
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label class="input-label">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏</label>
                    <select class="input-field" id="shotgunSlot">
                        <option value="1">–°–ª–æ—Ç 1 (${weapon.shotgunAmmo1.count}/3)</option>
                        <option value="2">–°–ª–æ—Ç 2 (${weapon.shotgunAmmo2.count}/3)</option>
                    </select>
                </div>
                
                <div style="margin-bottom: 1rem;">
                    <label class="input-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤</label>
                    <select class="input-field" id="shotgunAmmoType">
                        ${compatibleAmmo.map((ammo, index) => `
                            <option value="${index}">${ammo.type} (${ammo.quantity} —à—Ç.)</option>
                        `).join('')}
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button primary-button" onclick="executeShotgunReload('${weaponId}')">
                    &#x1F504; –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const style = document.createElement('style');
    style.textContent = `
        .ammo-category-filter.active {
            background: var(--accent) !important;
            color: white !important;
        }
    `;
    if (!document.getElementById('ammo-filter-styles')) {
        style.id = 'ammo-filter-styles';
        document.head.appendChild(style);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filterAmmo(AMMO_DATA.types[0]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
function filterAmmo(category) {
    const container = document.getElementById('ammoShopContent');
    if (!container) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    document.querySelectorAll('.ammo-category-filter').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-ammo-category') === category) {
            btn.classList.add('active');
        }
    });
    
    let contentHTML = '';
    
    if (category === '–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞') {
        // –†–µ–Ω–¥–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—â–∏—Ç—É
        const activeDefenseItems = [
            { name: '–ü–∏—Ä–æ–ø–∞—Ç—Ä–æ–Ω', description: '–î–ª—è –¥—Ä–æ–±–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (—É—Ä–æ–Ω 4d4)', price: 50 },
            { name: '–í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–∞—è –º–∏–Ω–∏-–±–∞—Ç–∞—Ä–µ—è', description: '–î–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (–±–µ–∑ —É—Ä–æ–Ω–∞)', price: 250 },
            { name: '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–∞', description: '–î–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã (—É—Ä–æ–Ω 6d6)', price: 500 }
        ];
        
        contentHTML = activeDefenseItems.map(item => `
            <div class="shop-item">
                <div class="shop-item-header">
                    <h4 class="shop-item-title">${item.name}</h4>
                </div>
                
                <p class="shop-item-description">
                    ${item.description}
                </p>
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                    <span class="ammo-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${item.price}">
                        ${item.price} —É–µ
                    </span>
                    <button class="pill-button primary-button" onclick="showAmmoQuantityModal('–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞', '${item.name}', ${item.price})" data-ammo-type="–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞" data-weapon-type="${item.name}" data-price="${item.price}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    } else {
        // –†–µ–Ω–¥–µ—Ä–∏–º –æ–±—ã—á–Ω—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã
        const ammoItems = [];
        for (const [weaponTypeFull, weaponTypeShort] of Object.entries(AMMO_DATA.weaponTypes)) {
            const price = AMMO_DATA.prices[category][weaponTypeShort];
            
            if (price !== null) {
                ammoItems.push({
                    weaponType: weaponTypeFull,
                    weaponTypeShort: weaponTypeShort,
                    price: price
                });
            }
        }
        
        contentHTML = ammoItems.map(item => `
            <div class="shop-item">
                <div class="shop-item-header">
                    <h4 class="shop-item-title">${item.weaponType}</h4>
                </div>
                
                <div class="shop-item-stats">
                    <div class="shop-stat">–¢–∏–ø: ${category}</div>
                    <div class="shop-stat">–ö–ª–∞—Å—Å: ${item.weaponTypeShort}</div>
                    <div class="shop-stat">–ù–∞–≥—Ä—É–∑–∫–∞: 1</div>
                </div>
                
                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                    <span class="ammo-price" style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;" data-original-price="${item.price}">
                        ${item.price} —É–µ
                    </span>
                    <button class="pill-button primary-button" onclick="showAmmoQuantityModal('${category}', '${item.weaponType}', ${item.price})" data-ammo-type="${category}" data-weapon-type="${item.weaponType}" data-price="${item.price}" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    container.innerHTML = contentHTML;
}

function executeShotgunReload(weaponId) {
    const weapon = state.weapons.find(w => w.id === weaponId);
    if (!weapon) return;
    
    const selectedSlot = parseInt(document.getElementById('shotgunSlot').value);
    const selectedAmmoIndex = parseInt(document.getElementById('shotgunAmmoType').value);
    
    const compatibleAmmo = state.ammo.filter(ammo => 
        ammo.weaponType === '–î—Ä–æ–±–æ–≤–∏–∫' && ammo.quantity > 0
    );
    const selectedAmmo = compatibleAmmo[selectedAmmoIndex];
    
    if (!selectedAmmo) {
        showModal('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    const slotData = selectedSlot === 1 ? weapon.shotgunAmmo1 : weapon.shotgunAmmo2;
    
    // –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –µ—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –±–ª–æ–∫ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
    if (slotData.count > 0 && slotData.type && slotData.type !== selectedAmmo.type) {
        const existingAmmoIndex = state.ammo.findIndex(a => 
            a.type === slotData.type && a.weaponType === '–î—Ä–æ–±–æ–≤–∏–∫'
        );
        
        if (existingAmmoIndex !== -1) {
            state.ammo[existingAmmoIndex].quantity += slotData.count;
        } else {
            const newAmmo = {
                id: generateId('ammo'),
                type: slotData.type,
                weaponType: '–î—Ä–æ–±–æ–≤–∏–∫',
                quantity: slotData.count,
                price: 0
            };
            state.ammo.push(newAmmo);
        }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —Å–ª–æ—Ç–∞
    const ammoNeeded = 3 - (slotData.type === selectedAmmo.type ? slotData.count : 0);
    const ammoToTake = Math.min(ammoNeeded, selectedAmmo.quantity);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤
    const realAmmoIndex = state.ammo.findIndex(ammo => ammo.id === selectedAmmo.id);
    
    if (realAmmoIndex !== -1) {
        // –í—ã—á–∏—Ç–∞–µ–º –ø–∞—Ç—Ä–æ–Ω—ã –∏–∑ –±–ª–æ–∫–∞ –ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã
        state.ammo[realAmmoIndex].quantity -= ammoToTake;
        
        // –ó–∞—Ä—è–∂–∞–µ–º —Å–ª–æ—Ç –¥—Ä–æ–±–æ–≤–∏–∫–∞
        slotData.count = (slotData.type === selectedAmmo.type ? slotData.count : 0) + ammoToTake;
        slotData.type = selectedAmmo.type;
        
        renderAmmo();
        renderWeapons();
        scheduleSave();
        
        closeModal(document.querySelector('.modal-overlay .icon-button'));
        
        const reloadMessage = ammoToTake === ammoNeeded ? 
            `–°–ª–æ—Ç ${selectedSlot} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω!` : 
            `–í —Å–ª–æ—Ç ${selectedSlot} –∑–∞—Ä—è–∂–µ–Ω–æ ${ammoToTake} –∏–∑ ${ammoNeeded} –ø–∞—Ç—Ä–æ–Ω–æ–≤`;
        
        showModal('–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `
            <div style="text-align: center; padding: 1rem;">
                <p style="color: ${getThemeColors().success}; font-size: 1.1rem; margin-bottom: 1rem;">&#x2705; ${weapon.name}</p>
                <p style="color: ${getThemeColors().text}; margin-bottom: 0.5rem;">${reloadMessage}</p>
                <p style="color: ${getThemeColors().muted}; font-size: 0.9rem;">–¢–∏–ø: ${selectedAmmo.type} | –ü–∞—Ç—Ä–æ–Ω–æ–≤: ${slotData.count}/3</p>
            </div>
        `);
    }
}


// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–æ–¥—É–ª–µ–π –æ—Ä—É–∂–∏—è
const weaponModuleStyle = document.createElement('style');
weaponModuleStyle.textContent = `
    .weapon-module-category-filter.active {
        background: var(--accent) !important;
        color: white !important;
    }
`;
if (!document.getElementById('weapon-module-filter-styles')) {
    weaponModuleStyle.id = 'weapon-module-filter-styles';
    document.head.appendChild(weaponModuleStyle);
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showWeaponModulesShop —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const originalShowWeaponModulesShop = showWeaponModulesShop;
showWeaponModulesShop = function() {
    originalShowWeaponModulesShop();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setTimeout(() => filterWeaponModules('melee'), 100);
};

console.log('weapons.js loaded - weapon system ready');

// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è rollWeaponDamage –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
if (typeof window.rollWeaponDamage !== 'function') {
    window.rollWeaponDamage = rollWeaponDamage;
    console.log('rollWeaponDamage —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–∏–Ω–∏-—Å—Ç–∞–Ω–∏–Ω—ã
window.executeMiniStandWeaponDamageRoll = executeMiniStandWeaponDamageRoll;
