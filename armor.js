// ============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–†–û–ù–ï–ô
// –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—Ä–æ–Ω–∏, –º–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏, —à—Ç—Ä–∞—Ñ—ã –∏ —Ä–∞—Å—á–µ—Ç—ã
// ============================================================================

console.log('üõ°Ô∏è armor.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–µ–π
function increaseArmorOS(part) {
    const input = document.getElementById(`armor${part.charAt(0).toUpperCase() + part.slice(1)}OS`);
    if (input) {
        const currentValue = parseInt(input.value) || 0;
        const newValue = Math.min(99, currentValue + 1);
        input.value = newValue;
        state.armor[part].os = newValue;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –û–°
        if (newValue > 0) {
            if (newValue <= 2) {
                state.armor[part].type = '–õ—ë–≥–∫–∞—è';
            } else if (newValue <= 4) {
                state.armor[part].type = '–°—Ä–µ–¥–Ω—è—è';
            } else if (newValue <= 6) {
                state.armor[part].type = '–¢—è–∂—ë–ª–∞—è';
            } else {
                state.armor[part].type = '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è';
            }
        } else {
            state.armor[part].type = '–õ—ë–≥–∫–∞—è';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏
        const typeField = document.getElementById(`armor${part.charAt(0).toUpperCase() + part.slice(1)}Type`);
        if (typeField) typeField.textContent = state.armor[part].type;
        
        updateArmorPenalty();
        scheduleSave();
    }
}

function decreaseArmorOS(part) {
    const input = document.getElementById(`armor${part.charAt(0).toUpperCase() + part.slice(1)}OS`);
    if (input) {
        const currentValue = parseInt(input.value) || 0;
        const newValue = Math.max(0, currentValue - 1);
        input.value = newValue;
        state.armor[part].os = newValue;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –û–°
        if (newValue > 0) {
            if (newValue <= 2) {
                state.armor[part].type = '–õ—ë–≥–∫–∞—è';
            } else if (newValue <= 4) {
                state.armor[part].type = '–°—Ä–µ–¥–Ω—è—è';
            } else if (newValue <= 6) {
                state.armor[part].type = '–¢—è–∂—ë–ª–∞—è';
            } else {
                state.armor[part].type = '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è';
            }
        } else {
            state.armor[part].type = '–õ—ë–≥–∫–∞—è';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏
        const typeField = document.getElementById(`armor${part.charAt(0).toUpperCase() + part.slice(1)}Type`);
        if (typeField) typeField.textContent = state.armor[part].type;
        
        updateArmorPenalty();
        scheduleSave();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏
function getMaxArmorType() {
    const armorLevels = {
        '–õ—ë–≥–∫–∞—è': 0,
        '–°—Ä–µ–¥–Ω—è—è': 1,
        '–¢—è–∂—ë–ª–∞—è': 2,
        '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è': 3
    };

    let maxLevel = 0;
    let maxType = '–õ—ë–≥–∫–∞—è';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    for (const part of ['head', 'body', 'arms', 'legs']) {
        const type = state.armor[part].type || '–õ—ë–≥–∫–∞—è';
        if (type !== '–õ—ë–≥–∫–∞—è') {
            const level = armorLevels[type] || 0;
            if (level > maxLevel) {
                maxLevel = level;
                maxType = type;
            }
        }
    }

    return maxType;
}

// –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –æ—Ç –±—Ä–æ–Ω–∏
function calculateArmorPenalties() {
    const armorLevels = {
        '–õ—ë–≥–∫–∞—è': 0,
        '–°—Ä–µ–¥–Ω—è—è': 1,
        '–¢—è–∂—ë–ª–∞—è': 2,
        '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è': 3
    };

    let maxLevel = 0;
    let maxType = '–õ—ë–≥–∫–∞—è';
    let hasAnyArmor = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    for (const part of ['head', 'body', 'arms', 'legs']) {
        const type = state.armor[part].type || '–õ—ë–≥–∫–∞—è';
        if (type !== '–õ—ë–≥–∫–∞—è') {
            hasAnyArmor = true;
            const level = armorLevels[type] || 0;
            if (level > maxLevel) {
                maxLevel = level;
                maxType = type;
            }
        }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–æ–Ω–∏ —Ç—è–∂–µ–ª–µ–µ –ª—ë–≥–∫–æ–π, —Ç–æ –Ω–µ—Ç –∏ —à—Ç—Ä–∞—Ñ–∞
    if (!hasAnyArmor) {
        return {
            speed: 0,
            reaction: 0,
            dexterity: 0,
            healthPenalty: 0,
            isTitanicConnected: false
        };
    }

    const body = parseInt(state.stats.BODY) || 0;
    const isTitanicConnected = state.titanicArmorConnected || false;
    
    let penalties = {
        speed: 0,
        reaction: 0,
        dexterity: 0,
        healthPenalty: 0,
        isTitanicConnected: isTitanicConnected
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–¥–µ—Ç–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è
    const isFullTitanicArmor = maxType === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' && 
        state.armor.head.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.body.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.arms.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.legs.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è';

    switch (maxType) {
        case '–õ—ë–≥–∫–∞—è':
            // –ë–µ–∑ —à—Ç—Ä–∞—Ñ–æ–≤
            break;
            
        case '–°—Ä–µ–¥–Ω—è—è':
            penalties.reaction = -1;
            penalties.dexterity = -1;
            penalties.speed = -1;
            // –°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è –¥–∞–µ—Ç —à—Ç—Ä–∞—Ñ—ã –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            break;
            
        case '–¢—è–∂—ë–ª–∞—è':
            penalties.reaction = -3;
            penalties.dexterity = -3;
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –∫ –°–ö–û –µ—Å–ª–∏ –¢–ï–õ–û 7 –∏ –º–µ–Ω—å—à–µ
            if (body <= 7) {
                penalties.speed = -3;
            } else {
                // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
                penalties.speed = -3;
            }
            break;
            
        case '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è':
            if (isFullTitanicArmor && isTitanicConnected) {
                // –ï—Å–ª–∏ —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —à—Ç—Ä–∞—Ñ–æ–≤ –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –Ω–µ—Ç
                penalties.healthPenalty = -5;
            } else {
                // –û–±—ã—á–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω–∏
                penalties.speed = -6;
                penalties.reaction = -6;
                penalties.dexterity = -6;
            }
            break;
    }

    return penalties;
}

function updateArmorPenalty() {
    const penalties = calculateArmorPenalties();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤
    updateArmorPenaltyDisplay(penalties);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
    updateDerivedStats();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω–∏
    updateTitanicArmorCheckbox(penalties);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —á–µ–∫–±–æ–∫—Å–∞ —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω–∏
function updateTitanicArmorCheckbox(penalties) {
    const checkboxContainer = document.getElementById('titanicArmorCheckbox');
    if (!checkboxContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–¥–µ—Ç–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è
    const isFullTitanicArmor = state.armor.head.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.body.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.arms.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
        state.armor.legs.type === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è';
    
    if (isFullTitanicArmor) {
        checkboxContainer.style.display = 'block';
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        const checkbox = document.getElementById('titanicArmorConnected');
        if (checkbox) {
            checkbox.checked = state.titanicArmorConnected || false;
        }
    } else {
        checkboxContainer.style.display = 'none';
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –±—Ä–æ–Ω—è –Ω–µ –ø–æ–ª–Ω–∞—è
        state.titanicArmorConnected = false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∏—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω–∏
function toggleTitanicArmorConnection() {
    const checkbox = document.getElementById('titanicArmorConnected');
    if (!checkbox) return;
    
    state.titanicArmorConnected = checkbox.checked;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ—ã
    updateArmorPenalty();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –µ—Å–ª–∏ –µ—Å—Ç—å —à—Ç—Ä–∞—Ñ
    calculateAndUpdateHealth();
    
    scheduleSave();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
function updateArmorPenaltyDisplay(penalties) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∫ –ª–æ–≤–∫–æ—Å—Ç–∏ (–õ–í–ö) - —Ç–æ–ª—å–∫–æ —à—Ç—Ä–∞—Ñ –∫ –õ–í–ö, –Ω–µ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
    updateStatPenaltyDisplay('DEX', penalties.dexterity);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∫ —Ä–µ–∞–∫—Ü–∏–∏ (–†–ï–ê)
    updateStatPenaltyDisplay('REA', penalties.reaction);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–°–ö–û)
    updateSpeedPenaltyDisplay(penalties.speed);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∫ –∑–¥–æ—Ä–æ–≤—å—é (–ü–ó)
    updateHealthPenaltyDisplay(penalties.healthPenalty);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π
function updateStatPenaltyDisplay(statType, penalty) {
    const statElement = document.getElementById(`stat${statType.toUpperCase()}`);
    if (!statElement) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (stat-box-compact)
    const statContainer = statElement.closest('.stat-box-compact');
    if (!statContainer) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPenalty = statContainer.querySelector('.armor-penalty');
    if (existingPenalty) {
        existingPenalty.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å - –ü–û–î –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (penalty !== 0) {
        const penaltyElement = document.createElement('div');
        penaltyElement.className = 'armor-penalty';
        penaltyElement.textContent = `–ë—Ä–æ–Ω—è: ${penalty > 0 ? '+' : ''}${penalty}`;
        penaltyElement.style.cssText = `
            color: #ff4444;
            font-size: 0.75rem;
            text-align: center;
            margin-top: 0.25rem;
            font-weight: 500;
        `;
        statContainer.appendChild(penaltyElement);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
function updateSpeedPenaltyDisplay(penalty) {
    const speedElement = document.getElementById('derivedSpeed');
    if (!speedElement) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (derived-stat-compact)
    const speedContainer = speedElement.closest('.derived-stat-compact');
    if (!speedContainer) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPenalty = speedContainer.querySelector('.armor-speed-penalty');
    if (existingPenalty) {
        existingPenalty.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å - –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (penalty !== 0) {
        const penaltyElement = document.createElement('div');
        penaltyElement.className = 'armor-speed-penalty';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—Ä–æ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞
        const maxType = getMaxArmorType();
        let penaltyText;
        
        if (maxType === '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è') {
            penaltyText = `–ë—Ä–æ–Ω—è: ${penalty > 0 ? '+' : ''}${penalty} (–º–∏–Ω. 0)`;
        } else {
            penaltyText = `–ë—Ä–æ–Ω—è: ${penalty > 0 ? '+' : ''}${penalty} (–º–∏–Ω. 1)`;
        }
        
        penaltyElement.textContent = penaltyText;
        penaltyElement.style.cssText = `
            color: #ff4444;
            font-size: 0.75rem;
            text-align: center;
            margin-top: 0.25rem;
            font-weight: 500;
        `;
        speedContainer.appendChild(penaltyElement);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –∫ –∑–¥–æ—Ä–æ–≤—å—é
function updateHealthPenaltyDisplay(penalty) {
    const healthElement = document.getElementById('healthMax');
    if (!healthElement) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingPenalty = healthElement.parentNode.querySelector('.armor-health-penalty');
    if (existingPenalty) {
        existingPenalty.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å - –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    if (penalty !== 0) {
        const penaltyElement = document.createElement('div');
        penaltyElement.className = 'armor-health-penalty';
        penaltyElement.textContent = `–ë—Ä–æ–Ω—è: ${penalty > 0 ? '+' : ''}${penalty}`;
        penaltyElement.style.cssText = `
            color: #ff4444;
            font-size: 0.75rem;
            text-align: center;
            margin-top: 0.25rem;
            font-weight: 500;
        `;
        healthElement.parentNode.appendChild(penaltyElement);
    }
}

// –ú–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏
function showArmorShop() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    const isFreeMode = window.armorShopFreeMode || false;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (isFreeMode) {
        modal.style.background = 'rgba(0, 100, 50, 0.85)';
    }
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column;">
            <div class="modal-header">
                <h3><img src="https://static.tildacdn.com/tild3264-6164-4130-a633-383838366132/armor_1.png" alt="üõ°Ô∏è" style="width: 24px; height: 24px; margin-right: 0.5rem; vertical-align: middle;"> –ú–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏</h3>
                <div style="display: flex; gap: 0.5rem; align-items: center;">
                    <button class="pill-button ${isFreeMode ? 'success-button' : 'muted-button'}" onclick="toggleArmorShopFreeMode()" style="font-size: 0.8rem; padding: 0.3rem 0.6rem;">${isFreeMode ? '–û—Ç–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ' : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</button>
                    <button class="icon-button" onclick="closeModal(this)">√ó</button>
                </div>
            </div>
            <div class="modal-body" style="overflow-y: auto; flex: 1;">
                <div style="background: ${getThemeColors().warningLight}; border: 1px solid ${getThemeColors().warning}; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                    <div style="color: #ffc107; font-weight: 600; margin-bottom: 0.5rem;">üìù –ü–∞–º—è—Ç–∫–∞:</div>
                    <div style="color: ${getThemeColors().text}; font-size: 0.9rem; line-height: 1.4;">
                        –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±—Ä–æ–Ω–∏ –≤—ã–±–µ—Ä–∏—Ç–µ <strong>–ì–æ–ª–æ–≤—É</strong> –∏–ª–∏ <strong>–¢–µ–ª–æ</strong>. 
                        –ë—Ä–æ–Ω—è –¥–ª—è –¢–µ–ª–∞ –≤–∫–ª—é—á–∞–µ—Ç 3 –ø—Ä–µ–¥–º–µ—Ç–∞: –¢–µ–ª–æ, –†—É–∫–∏ –∏ –ù–æ–≥–∏.<br>
                        <strong>–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è</strong> –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ (–ì–æ–ª–æ–≤–∞+–¢–µ–ª–æ+–†—É–∫–∏+–ù–æ–≥–∏).
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1rem; padding: 1rem;">
                    <!-- –ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏ -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyArmor('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏', 10, 0, '–õ—ë–≥–∫–∞—è')">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏</h4>
                        </div>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–û–°: 0</div>
                            <div class="shop-stat">–¢–∏–ø: –û–±—ã—á–Ω–∞—è –æ–¥–µ–∂–¥–∞</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '10 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyArmor('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏', 10, 0, '–õ—ë–≥–∫–∞—è')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –õ—ë–≥–∫–∞—è –±—Ä–æ–Ω—è -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyArmor('–õ—ë–≥–∫–∞—è', 100, 10, '–õ—ë–≥–∫–∞—è')">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–õ—ë–≥–∫–∞—è –±—Ä–æ–Ω—è</h4>
                        </div>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–û–°: 10</div>
                            <div class="shop-stat">–®—Ç—Ä–∞—Ñ: –ù–µ—Ç</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '100 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyArmor('–õ—ë–≥–∫–∞—è', 100, 10, '–õ—ë–≥–∫–∞—è')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyArmor('–°—Ä–µ–¥–Ω—è—è', 500, 15, '–°—Ä–µ–¥–Ω—è—è')">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è</h4>
                        </div>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–û–°: 15</div>
                            <div class="shop-stat">–®—Ç—Ä–∞—Ñ: -1 –°–ö–û, –†–ï–ê, –õ–í–ö</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '500 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyArmor('–°—Ä–µ–¥–Ω—è—è', 500, 15, '–°—Ä–µ–¥–Ω—è—è')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –¢—è–∂—ë–ª–∞—è –±—Ä–æ–Ω—è -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyArmor('–¢—è–∂—ë–ª–∞—è', 2500, 18, '–¢—è–∂—ë–ª–∞—è')">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–¢—è–∂—ë–ª–∞—è –±—Ä–æ–Ω—è</h4>
                        </div>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–û–°: 18</div>
                            <div class="shop-stat">–®—Ç—Ä–∞—Ñ: -3 –†–ï–ê, –õ–í–ö, –°–ö–û</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '2 500 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyArmor('–¢—è–∂—ë–ª–∞—è', 2500, 18, '–¢—è–∂—ë–ª–∞—è')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyTitanicArmor()">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è</h4>
                        </div>
                        
                        <p class="shop-item-description">
                            –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ (–ì–æ–ª–æ–≤–∞+–¢–µ–ª–æ+–†—É–∫–∏+–ù–æ–≥–∏)
                        </p>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–û–°: 25</div>
                            <div class="shop-stat">–®—Ç—Ä–∞—Ñ: -6 –°–ö–û, –†–ï–ê, –õ–í–ö</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '20 000 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyTitanicArmor()" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyActiveArmor()">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è</h4>
                        </div>
                        
                        <p class="shop-item-description">
                            –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑
                        </p>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '500 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyActiveArmor()" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    
                    <!-- –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç -->
                    <div class="shop-item" style="cursor: pointer;" onclick="buyBallisticShield()">
                        <div class="shop-item-header">
                            <h4 class="shop-item-title">–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç</h4>
                        </div>
                        
                        <p class="shop-item-description">
                            –¢—Ä–µ–±—É–µ—Ç 1 —Ä—É–∫—É. –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ.
                        </p>
                        
                        <div class="shop-item-stats">
                            <div class="shop-stat">–ü–ó: 20</div>
                            <div class="shop-stat">–¢–∏–ø: –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border);">
                            <span style="color: ${getThemeColors().muted}; font-size: 0.9rem; font-weight: 600;">
                                ${isFreeMode ? '–ë–ï–°–ü–õ–ê–¢–ù–û' : '100 —É–µ'}
                            </span>
                            <button class="pill-button primary-button" onclick="event.stopPropagation(); buyBallisticShield()" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">
                                –ö—É–ø–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –±—Ä–æ–Ω–∏
function toggleArmorShopFreeMode() {
    window.armorShopFreeMode = !window.armorShopFreeMode;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const currentModal = document.querySelector('.modal-overlay');
    if (currentModal) {
        currentModal.remove();
        showArmorShop();
    }
}

function buyArmor(name, price, os, type, catalogPrice = null) {
    const isFreeMode = window.armorShopFreeMode || false;
    const actualPrice = isFreeMode ? 0 : price;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
    if (state.money < actualPrice) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', `–£ –≤–∞—Å ${state.money} —É–µ, –∞ –Ω—É–∂–Ω–æ ${actualPrice} —É–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${name}.`);
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    showArmorBodyPartSelection(name, price, os, type, catalogPrice, actualPrice);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –¥–ª—è –±—Ä–æ–Ω–∏
function showArmorBodyPartSelection(name, price, os, type, catalogPrice, actualPrice) {
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: ${getThemeColors().overlay};
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px; width: 90%;">
            <div class="modal-header">
                <h3>–ö—É–¥–∞ –Ω–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é?</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                    <div style="color: ${getThemeColors().accent}; font-weight: 600; margin-bottom: 0.5rem;">${name}</div>
                    <div style="color: ${getThemeColors().text}; font-size: 0.9rem;">–û–°: ${os} | ${type} –±—Ä–æ–Ω—è</div>
                    <div style="color: ${getThemeColors().success}; font-weight: 600; margin-top: 0.5rem;">${actualPrice === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : actualPrice + ' —É–µ'}</div>
                </div>
                
                <div style="display: grid; gap: 1rem;">
                    <button class="armor-choice-button" onclick="confirmArmorPurchase('${name}', ${price}, ${os}, '${type}', ${catalogPrice}, ${actualPrice}, 'head')" style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 8px; padding: 1rem; cursor: pointer; transition: all 0.2s ease; text-align: left;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <img src="https://static.tildacdn.com/tild6636-3834-4834-b966-313837623333/military-hat.png" alt="ü™ñ" style="width: 24px; height: 24px;">
                                <div>
                                    <div style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 1.1rem; margin-bottom: 0.25rem;">–ì–æ–ª–æ–≤–∞</div>
                                    <div style="color: ${getThemeColors().text}; font-size: 0.9rem;">–ë—Ä–æ–Ω—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ–ª–æ–≤—ã</div>
                                </div>
                            </div>
                            <div style="color: ${getThemeColors().success}; font-weight: 600; font-size: 1.1rem;">${actualPrice === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : actualPrice + ' —É–µ'}</div>
                        </div>
                    </button>
                    
                    <button class="armor-choice-button" onclick="confirmArmorPurchase('${name}', ${price}, ${os}, '${type}', ${catalogPrice}, ${actualPrice}, 'body')" style="background: ${getThemeColors().accentLight}; border: 1px solid ${getThemeColors().accent}; border-radius: 8px; padding: 1rem; cursor: pointer; transition: all 0.2s ease; text-align: left;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div style="display: flex; align-items: center; gap: 0.5rem;">
                                <img src="https://static.tildacdn.com/tild6438-3462-4437-b563-623536343337/armor.png" alt="üõ°Ô∏è" style="width: 24px; height: 24px;">
                                <div>
                                    <div style="color: ${getThemeColors().accent}; font-weight: 600; font-size: 1.1rem; margin-bottom: 0.25rem;">–¢–µ–ª–æ (–≤–∫–ª—é—á–∞–µ—Ç –†—É–∫–∏ –∏ –ù–æ–≥–∏)</div>
                                    <div style="color: ${getThemeColors().text}; font-size: 0.9rem;">3 –ø—Ä–µ–¥–º–µ—Ç–∞: –¢–µ–ª–æ, –†—É–∫–∏, –ù–æ–≥–∏</div>
                                </div>
                            </div>
                            <div style="color: ${getThemeColors().success}; font-weight: 600; font-size: 1.1rem;">${actualPrice === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : actualPrice + ' —É–µ'}</div>
                        </div>
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
    const buttons = modal.querySelectorAll('.armor-choice-button');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', () => {
            button.style.background = 'rgba(182, 103, 255, 0.2)';
            button.style.transform = 'translateY(-2px)';
        });
        button.addEventListener('mouseleave', () => {
            button.style.background = 'rgba(182, 103, 255, 0.1)';
            button.style.transform = 'translateY(0)';
        });
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –±—Ä–æ–Ω–∏
function confirmArmorPurchase(name, price, os, type, catalogPrice, actualPrice, bodyPart) {
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money -= actualPrice;
    updateMoneyDisplay();
    
    if (bodyPart === 'body') {
        // –ë—Ä–æ–Ω—è –¥–ª—è —Ç–µ–ª–∞ = 3 –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ç–µ–ª–æ, —Ä—É–∫–∏, –Ω–æ–≥–∏) –ø–æ 1/3 —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–π
        const piecePrice = Math.floor(actualPrice / 3);
        
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç "–¥–ª—è —Ç–µ–ª–∞/–∫–æ—Ä–ø—É—Å–∞/—Ç—É–ª–æ–≤–∏—â–∞"
        const cleanName = name.replace(/\s*(–¥–ª—è\s+)?(—Ç–µ–ª–∞|–∫–æ—Ä–ø—É—Å–∞|—Ç—É–ª–æ–≤–∏—â–∞)/gi, '').trim();
        
        ['body', 'arms', 'legs'].forEach(part => {
            const armorPiece = {
                id: generateId('armor'),
                name: `${cleanName} (${part === 'body' ? '–¢–µ–ª–æ' : part === 'arms' ? '–†—É–∫–∏' : '–ù–æ–≥–∏'})`,
                os: os,
                maxOS: os,
                type: type,
                bodyPart: part,
                price: piecePrice,
                catalogPrice: catalogPrice ? Math.floor(catalogPrice / 3) : piecePrice,
                purchasePrice: piecePrice,
                itemType: catalogPrice ? 'free_catalog' : 'purchased'
            };
            state.armorInventory.push(armorPiece);
        });
    } else {
        // –ë—Ä–æ–Ω—è –¥–ª—è –≥–æ–ª–æ–≤—ã
        const armorPiece = {
            id: generateId('armor'),
            name: `${name} (–ì–æ–ª–æ–≤–∞)`,
            os: os,
            maxOS: os,
            type: type,
            bodyPart: 'head',
            price: actualPrice,
            catalogPrice: catalogPrice,
            purchasePrice: actualPrice,
            itemType: catalogPrice ? 'free_catalog' : 'purchased'
        };
        state.armorInventory.push(armorPiece);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    if (actualPrice > 0) {
        addToRollLog('purchase', {
            item: name,
            price: actualPrice,
            category: '–ë—Ä–æ–Ω—è'
        });
    } else {
        addToRollLog('purchase', {
            item: name,
            price: 0,
            category: '–ë—Ä–æ–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—Ä–æ–Ω–∏
    renderArmorInventory();
    scheduleSave();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞
    const modal = document.querySelector('.modal-overlay');
    if (modal) modal.remove();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
    const message = bodyPart === 'body' ? 
        `${name} –∫—É–ø–ª–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—Ä–æ–Ω–∏.` : 
        `${name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—Ä–æ–Ω–∏!`;
    showToast(message, 3000);
}


function buyTitanicArmor(catalogPrice = null) {
    const isFreeMode = window.armorShopFreeMode || false;
    const actualPrice = isFreeMode ? 0 : 20000;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
    if (state.money < actualPrice) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', `–£ –≤–∞—Å ${state.money} —É–µ, –∞ –Ω—É–∂–Ω–æ ${actualPrice} —É–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω–∏.`);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money -= actualPrice;
    updateMoneyDisplay();
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—é –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ (–≥–æ–ª–æ–≤–∞ + —Ç–µ–ª–æ + —Ä—É–∫–∏ + –Ω–æ–≥–∏)
    const piecePrice = Math.floor(actualPrice / 4); // –î–µ–ª–∏–º —Ü–µ–Ω—É –Ω–∞ 4 —á–∞—Å—Ç–∏ (–ø–æ 5000 —É–µ –∑–∞ –∫–∞–∂–¥—É—é)
    const cleanName = '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è';
    
    ['head', 'body', 'arms', 'legs'].forEach(part => {
        const armorPiece = {
            id: generateId('armor'),
            name: `${cleanName} (${part === 'head' ? '–ì–æ–ª–æ–≤–∞' : part === 'body' ? '–¢–µ–ª–æ' : part === 'arms' ? '–†—É–∫–∏' : '–ù–æ–≥–∏'})`,
            os: 25,
            maxOS: 25,
            type: '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è',
            bodyPart: part,
            price: piecePrice,
            catalogPrice: catalogPrice ? Math.floor(catalogPrice / 4) : piecePrice,
            purchasePrice: piecePrice,
            itemType: catalogPrice ? 'free_catalog' : 'purchased'
        };
        state.armorInventory.push(armorPiece);
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    if (actualPrice > 0) {
        addToRollLog('purchase', {
            item: '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è (–ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç)',
            price: actualPrice,
            category: '–ë—Ä–æ–Ω—è'
        });
    } else {
        addToRollLog('purchase', {
            item: '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è (–ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç)',
            price: 0,
            category: '–ë—Ä–æ–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'
        });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const currentModal = document.querySelector('.modal-overlay');
    if (currentModal) {
        currentModal.remove();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showToast('–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è –∫—É–ø–ª–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ 4 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—Ä–æ–Ω–∏.', 3000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderArmorInventory();
    scheduleSave();
}

function buyActiveArmor(catalogPrice = null) {
    const isFreeMode = window.armorShopFreeMode || false;
    const actualPrice = isFreeMode ? 0 : 500;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
    if (state.money < actualPrice) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', `–£ –≤–∞—Å ${state.money} —É–µ, –∞ –Ω—É–∂–Ω–æ ${actualPrice} —É–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ê–∫—Ç–∏–≤–Ω–æ–π –±—Ä–æ–Ω–∏.`);
        return;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const currentModal = document.querySelector('.modal-overlay');
    if (currentModal) {
        currentModal.remove();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–∫–µ—Ç (–ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞)
    showActiveArmorTypeSelection(actualPrice, catalogPrice);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –±—Ä–æ–Ω–∏
function renderArmorInventory() {
    const container = document.getElementById('armorInventoryContainer');
    const countElement = document.getElementById('armorInventoryCount');
    
    if (!state.armorInventory || state.armorInventory.length === 0) {
        container.innerHTML = '<p style="color: ${getThemeColors().muted}; text-align: center; padding: 1rem; font-size: 0.85rem;">–ö—É–ø–ª–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—è –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>';
        if (countElement) countElement.textContent = '(0)';
        return;
    }
    
    if (countElement) countElement.textContent = `(${state.armorInventory.length})`;
    
    container.innerHTML = state.armorInventory.map(armor => {
        return `
        <div style="background: ${getThemeColors().bgLight}; border: 1px solid ${getThemeColors().border}; border-radius: 8px; padding: 0.75rem; position: relative;">
            <div style="padding-right: 4rem;">
                <div style="color: ${getThemeColors().text}; font-weight: 600; font-size: 0.9rem; margin-bottom: 0.25rem;">${armor.name}</div>
                <div style="color: ${getThemeColors().muted}; font-size: 0.75rem; margin-bottom: 0.5rem;">
                    ${armor.type} | –û–°: ${armor.os}/${armor.maxOS}
                </div>
            </div>
            <div style="position: absolute; top: 0.5rem; right: 0.5rem; display: flex; gap: 0.25rem; align-items: center;">
                <button onclick="equipArmorPiece('${armor.id}')" style="background: transparent; border: none; cursor: pointer; padding: 0.25rem;" title="–ù–∞–¥–µ—Ç—å${armor.originalBodyPart ? ' (—Ç–æ–ª—å–∫–æ –Ω–∞ ' + (armor.originalBodyPart === 'head' ? '–≥–æ–ª–æ–≤—É' : armor.originalBodyPart === 'body' ? '—Ç–µ–ª–æ' : armor.originalBodyPart === 'arms' ? '—Ä—É–∫–∏' : '–Ω–æ–≥–∏') + ')' : ''}">
                    <img src="https://static.tildacdn.com/tild6336-3965-4832-a231-623638336361/arrow.png" alt="‚Üë" style="width: 20px; height: 20px; opacity: 0.7; transition: opacity 0.2s;" onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'">
                </button>
                <button onclick="repairArmorPiece('${armor.id}')" style="background: transparent; border: none; cursor: pointer; padding: 0.25rem;" title="–ü–æ—á–∏–Ω–∏—Ç—å">
                    <img src="https://static.tildacdn.com/tild6535-3132-4233-b731-356365363437/wrench.png" alt="üîß" style="width: 20px; height: 20px; opacity: 0.7; transition: opacity 0.2s;" onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'">
                </button>
                <button onclick="removeArmorFromInventory('${armor.id}')" style="background: transparent; border: none; cursor: pointer; padding: 0.25rem;" title="–£–¥–∞–ª–∏—Ç—å">
                    <img src="https://static.tildacdn.com/tild6166-3331-4338-b038-623539346365/x-button.png" alt="√ó" style="width: 20px; height: 20px; opacity: 0.7; transition: opacity 0.2s;" onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'">
                </button>
            </div>
        </div>
    `;}).join('');
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function equipArmorPiece(armorId) {
    const armorPiece = state.armorInventory.find(a => a.id === armorId);
    if (!armorPiece) return;
    
    // –ï—Å–ª–∏ –±—Ä–æ–Ω—è –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞, –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ—ë
    if (armorPiece.originalBodyPart) {
        confirmEquipArmor(armorId, armorPiece.originalBodyPart);
        return;
    }
    
    // –ï—Å–ª–∏ —É –±—Ä–æ–Ω–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Ç–µ–ª–∞ (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ), –Ω–∞–¥–µ–≤–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞ –Ω–µ—ë
    if (armorPiece.bodyPart) {
        confirmEquipArmor(armorId, armorPiece.bodyPart);
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–æ–Ω–∏ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    const bodyPartNames = {
        'head': '–ì–æ–ª–æ–≤–∞',
        'body': '–¢–µ–ª–æ',
        'arms': '–†—É–∫–∏',
        'legs': '–ù–æ–≥–∏'
    };
    
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.zIndex = 2000;
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 400px;">
            <div class="modal-header">
                <h3>–ö—É–¥–∞ –Ω–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é?</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="margin-bottom: 1rem;">${armorPiece.name}</p>
                <p style="margin-bottom: 1rem; color: ${getThemeColors().muted}; font-size: 0.9rem;">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–ª–∞:</p>
                <div style="display: grid; gap: 0.5rem;">
                    ${Object.entries(bodyPartNames).map(([part, label]) => `
                        <button class="pill-button primary-button" onclick="confirmEquipArmor('${armorId}', '${part}')" style="width: 100%;">
                            ${label}
                        </button>
                    `).join('')}
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button muted-button" onclick="closeModal(this)">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–¥–µ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏
function confirmEquipArmor(armorId, bodyPart) {
    const armorPiece = state.armorInventory.find(a => a.id === armorId);
    if (!armorPiece) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–¥–µ—Ç–∞—è –±—Ä–æ–Ω—è –Ω–∞ —ç—Ç–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    const currentArmor = state.armor[bodyPart];
    if (currentArmor && (currentArmor.os > 0 || (currentArmor.armorName && currentArmor.armorName.includes('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏')))) {
        // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        let armorBaseName = currentArmor.armorName || `${currentArmor.type} –±—Ä–æ–Ω—è`;
        // –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
        armorBaseName = armorBaseName.replace(/\s*\((–ì–æ–ª–æ–≤–∞|–¢–µ–ª–æ|–†—É–∫–∏|–ù–æ–≥–∏)\)\s*$/, '');
        
        const bodyPartLabel = bodyPart === 'head' ? '–ì–æ–ª–æ–≤–∞' : 
                              bodyPart === 'body' ? '–¢–µ–ª–æ' : 
                              bodyPart === 'arms' ? '–†—É–∫–∏' : '–ù–æ–≥–∏';
        
        const returnedArmor = {
            id: generateId('armor'),
            name: `${armorBaseName} (${bodyPartLabel})`,
            os: currentArmor.os,
            maxOS: getMaxOSForType(currentArmor.type),
            type: currentArmor.type,
            bodyPart: bodyPart,
            originalBodyPart: bodyPart, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫—É–¥–∞ —Å–Ω—è—Ç–∞
            price: currentArmor.price || 0,
            catalogPrice: currentArmor.catalogPrice || null,
            purchasePrice: currentArmor.purchasePrice || 0,
            itemType: currentArmor.itemType || 'returned'
        };
        state.armorInventory.push(returnedArmor);
    }
    
    // –ù–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—É—é –±—Ä–æ–Ω—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    state.armor[bodyPart] = {
        os: armorPiece.os,
        type: armorPiece.type,
        armorName: armorPiece.name, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        price: armorPiece.price,
        catalogPrice: armorPiece.catalogPrice,
        purchasePrice: armorPiece.purchasePrice,
        itemType: armorPiece.itemType,
        activeDefense: false,
        activeDefenseType: '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã'
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ–ª—è –û–° –∏ —Ç–∏–ø–∞ –±—Ä–æ–Ω–∏
    const bodyPartCapitalized = bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1);
    const osField = document.getElementById(`armor${bodyPartCapitalized}OS`);
    const typeField = document.getElementById(`armor${bodyPartCapitalized}Type`);
    
    if (osField) osField.value = armorPiece.os;
    if (typeField) {
        if (armorPiece.name.includes('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏')) {
            typeField.textContent = '–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏';
        } else {
            typeField.textContent = armorPiece.type;
        }
    }
    
    // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—é –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    state.armorInventory = state.armorInventory.filter(a => a.id !== armorId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderArmorInventory();
    updateArmorRemoveButtons();
    updateArmorPenalty();
    scheduleSave();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    const modal = document.querySelector('.modal-overlay');
    if (modal) modal.remove();
    
    showToast(`${armorPiece.name} –Ω–∞–¥–µ—Ç–æ!`, 2000);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –û–° –ø–æ —Ç–∏–ø—É –±—Ä–æ–Ω–∏
function getMaxOSForType(type) {
    switch(type) {
        case '–õ—ë–≥–∫–∞—è': return 10;
        case '–°—Ä–µ–¥–Ω—è—è': return 15;
        case '–¢—è–∂—ë–ª–∞—è': return 18;
        case '–¢–∏—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è': return 25;
        default: return 10;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ—á–∏–Ω–∫–∏ –±—Ä–æ–Ω–∏
function repairArmorPiece(armorId) {
    const armorPiece = state.armorInventory.find(a => a.id === armorId);
    if (!armorPiece) return;
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª —Å –∏–Ω–ø—É—Ç–æ–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –û–°
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.zIndex = 2000;
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 400px;">
            <div class="modal-header">
                <h3>–ü–æ—á–∏–Ω–∏—Ç—å –±—Ä–æ–Ω—é</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="margin-bottom: 1rem;">${armorPiece.name}</p>
                <div style="margin-bottom: 1rem;">
                    <label style="display: block; margin-bottom: 0.5rem; color: ${getThemeColors().text};">–¢–µ–∫—É—â–∞—è –û–°: ${armorPiece.os}/${armorPiece.maxOS}</label>
                    <label style="display: block; margin-bottom: 0.5rem; color: ${getThemeColors().text};">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –û–°:</label>
                    <input type="number" id="newOS" value="${armorPiece.os}" min="0" max="${armorPiece.maxOS}" class="input-field" style="width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button class="pill-button muted-button" onclick="closeModal(this)">–û—Ç–º–µ–Ω–∞</button>
                <button class="pill-button primary-button" onclick="confirmRepairArmor('${armorId}')">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á–∏–Ω–∫–∏
function confirmRepairArmor(armorId) {
    const newOS = parseInt(document.getElementById('newOS').value);
    const armorPiece = state.armorInventory.find(a => a.id === armorId);
    
    if (!armorPiece) return;
    
    armorPiece.os = Math.max(0, Math.min(newOS, armorPiece.maxOS));
    renderArmorInventory();
    scheduleSave();
    
    closeModal(document.querySelector('.modal-overlay .icon-button'));
    console.log(`‚úÖ ${armorPiece.name} –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞! –û–°: ${armorPiece.os}`);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function removeArmorFromInventory(armorId) {
    state.armorInventory = state.armorInventory.filter(a => a.id !== armorId);
    renderArmorInventory();
    scheduleSave();
}

// –§—É–Ω–∫—Ü–∏—è —Å–Ω—è—Ç–∏—è –Ω–∞–¥–µ—Ç–æ–π –±—Ä–æ–Ω–∏
function removeEquippedArmor(bodyPart) {
    const currentArmor = state.armor[bodyPart];
    if (!currentArmor || currentArmor.os <= 0) return;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—Ä–æ–Ω—é –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç—å —Ç–µ–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
    let armorBaseName = currentArmor.armorName || `${currentArmor.type} –±—Ä–æ–Ω—è`;
    armorBaseName = armorBaseName.replace(/\s*\((–ì–æ–ª–æ–≤–∞|–¢–µ–ª–æ|–†—É–∫–∏|–ù–æ–≥–∏)\)\s*$/, '');
    
    const bodyPartLabel = bodyPart === 'head' ? '–ì–æ–ª–æ–≤–∞' : 
                          bodyPart === 'body' ? '–¢–µ–ª–æ' : 
                          bodyPart === 'arms' ? '–†—É–∫–∏' : '–ù–æ–≥–∏';
    
    const returnedArmor = {
        id: generateId('armor'),
        name: `${armorBaseName} (${bodyPartLabel})`,
        os: currentArmor.os,
        maxOS: getMaxOSForType(currentArmor.type),
        type: currentArmor.type,
        bodyPart: bodyPart,
        originalBodyPart: bodyPart, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫—É–¥–∞ —Å–Ω—è—Ç–∞
        price: currentArmor.price || 0,
        catalogPrice: currentArmor.catalogPrice || null,
        purchasePrice: currentArmor.purchasePrice || 0,
        itemType: currentArmor.itemType || 'returned'
    };
    state.armorInventory.push(returnedArmor);
    
    // –û–±–Ω—É–ª—è–µ–º –±—Ä–æ–Ω—é –Ω–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞
    state.armor[bodyPart] = {
        os: 0,
        type: '–õ—ë–≥–∫–∞—è',
        activeDefense: false,
        activeDefenseType: '–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã'
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    const bodyPartCapitalized = bodyPart.charAt(0).toUpperCase() + bodyPart.slice(1);
    const osField = document.getElementById(`armor${bodyPartCapitalized}OS`);
    const typeField = document.getElementById(`armor${bodyPartCapitalized}Type`);
    if (osField) osField.value = 0;
    if (typeField) typeField.textContent = '';
    
    renderArmorInventory();
    updateArmorRemoveButtons();
    updateArmorPenalty();
    scheduleSave();
    
    showToast(`–ë—Ä–æ–Ω—è —Å–Ω—è—Ç–∞ —Å ${bodyPart === 'head' ? '–≥–æ–ª–æ–≤—ã' : bodyPart === 'body' ? '—Ç–µ–ª–∞' : bodyPart === 'arms' ? '—Ä—É–∫' : '–Ω–æ–≥'}`, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ "–°–Ω—è—Ç—å" –¥–ª—è –±—Ä–æ–Ω–∏
function updateArmorRemoveButtons() {
    const bodyParts = ['head', 'body', 'arms', 'legs'];
    
    bodyParts.forEach(part => {
        const button = document.getElementById(`removeArmor${part.charAt(0).toUpperCase() + part.slice(1)}`);
        const typeField = document.getElementById(`armor${part.charAt(0).toUpperCase() + part.slice(1)}Type`);
        const armor = state.armor[part];
        
        console.log(`Updating ${part}:`, armor);
        
        if (button) {
            const shouldShow = armor && (armor.os > 0 || (armor.armorName && armor.armorName.includes('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏')));
            button.style.display = shouldShow ? 'block' : 'none';
            console.log(`Button for ${part}:`, shouldShow ? 'SHOW' : 'HIDE');
        }
        
        if (typeField) {
            if (armor && armor.armorName && armor.armorName.includes('–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏')) {
                typeField.textContent = '–ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏';
                console.log(`Type field for ${part}: –ü—Ä–æ—Å—Ç—ã–µ —à–º–æ—Ç–∫–∏`);
            } else if (armor && armor.os > 0) {
                typeField.textContent = armor.type;
                console.log(`Type field for ${part}:`, armor.type);
            } else {
                typeField.textContent = '';
                console.log(`Type field for ${part}: EMPTY`);
            }
        }
    });
}

function showActiveArmorTypeSelection(actualPrice, catalogPrice = null) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="display: grid; gap: 1rem;">
                    <button class="pill-button primary-button" onclick="createActiveArmor('–ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã', ${actualPrice}, ${catalogPrice})" style="font-size: 1rem; padding: 1rem;">
                        –ú–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç—ã
                    </button>
                    <button class="pill-button primary-button" onclick="createActiveArmor('–î—Ä–æ–±–æ–≤–∞—è', ${actualPrice}, ${catalogPrice})" style="font-size: 1rem; padding: 1rem;">
                        –î—Ä–æ–±–æ–≤–∞—è
                    </button>
                    <button class="pill-button primary-button" onclick="createActiveArmor('–õ–∞–∑–µ—Ä–Ω–∞—è', ${actualPrice}, ${catalogPrice})" style="font-size: 1rem; padding: 1rem;">
                        –õ–∞–∑–µ—Ä–Ω–∞—è
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Enter
    addModalKeyboardHandlers(modal);
}

function createActiveArmor(rocketType, actualPrice, catalogPrice = null) {
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money -= actualPrice;
    updateMoneyDisplay();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    if (actualPrice > 0) {
        addToRollLog('purchase', {
            item: `–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (${rocketType})`,
            price: actualPrice,
            category: '–ë—Ä–æ–Ω—è'
        });
    } else {
        addToRollLog('purchase', {
            item: `–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (${rocketType})`,
            price: 0,
            category: '–ë—Ä–æ–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'
        });
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞
    const currentModal = document.querySelector('.modal-overlay');
    if (currentModal) {
        currentModal.remove();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∫–µ—Ç
    let damage = '6d6'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∏–∫—Ä–æ—Ä–∞–∫–µ—Ç
    if (rocketType === '–î—Ä–æ–±–æ–≤–∞—è') {
        damage = '4d4'; // –ü–∏—Ä–æ–ø–∞—Ç—Ä–æ–Ω –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω 4d4
    } else if (rocketType === '–õ–∞–∑–µ—Ä–Ω–∞—è') {
        damage = '0'; // –õ–∞–∑–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –±–µ–∑ —É—Ä–æ–Ω–∞
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ä—É–∂–∏–µ "–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const activeArmorWeapon = {
        id: generateId('weapon'),
        name: `–ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (${rocketType})`,
        customName: '',
        type: 'ranged',
        primaryDamage: damage,
        altDamage: null, // –ù–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        concealable: false, // –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å: –Ω–µ—Ç
        hands: 0, // # —Ä—É–∫: 0
        stealth: 1, // –°–ö–ê: 1
        magazine: 1, // –ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: 1
        price: actualPrice,
        load: 2,
        modules: [],
        slots: 0, // –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π
        // –°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        maxAmmo: 1,
        currentAmmo: 0, // –°–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏
        loadedAmmoType: null,
        // –ù–µ –¥—Ä–æ–±–æ–≤–∏–∫
        isShotgun: false,
        shotgunAmmo1: { type: null, count: 0 },
        shotgunAmmo2: { type: null, count: 0 },
        canRemove: true // –ú–æ–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å
    };
    
    state.weapons.push(activeArmorWeapon);
    renderWeapons();
    
    showModal('–û—Ä—É–∂–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', `‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –±—Ä–æ–Ω—è (${rocketType}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫ –û—Ä—É–∂–∏–µ!`);
    scheduleSave();
}

function buyBallisticShield(catalogPrice = null) {
    const isFreeMode = window.armorShopFreeMode || false;
    const actualPrice = isFreeMode ? 0 : 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
    if (state.money < actualPrice) {
        showModal('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', `–£ –≤–∞—Å ${state.money} —É–µ, –∞ –Ω—É–∂–Ω–æ ${actualPrice} —É–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–æ–≥–æ —â–∏—Ç–∞.`);
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    state.money -= actualPrice;
    updateMoneyDisplay();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
    if (actualPrice > 0) {
        addToRollLog('purchase', {
            item: '–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç',
            price: actualPrice,
            category: '–ë—Ä–æ–Ω—è'
        });
    } else {
        addToRollLog('purchase', {
            item: '–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç',
            price: 0,
            category: '–ë—Ä–æ–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —â–∏—Ç –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    const shield = {
        id: generateId('gear'),
        name: '–ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç',
        description: '–©–∏—Ç, —Å–ª—É–∂–∞—â–∏–π —É–∫—Ä—ã—Ç–∏–µ–º, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å. –¢—Ä–µ–±—É–µ—Ç 1 —Ä—É–∫—É. –ò–º–µ–µ—Ç 20 –ü–ó.',
        load: 5,
        type: 'gear',
        hp: 20,
        currentHp: 20,
        isShield: true,
        catalogPrice: catalogPrice,
        purchasePrice: actualPrice,
        itemType: catalogPrice ? 'free_catalog' : 'purchased'
    };
    
    state.gear.push(shield);
    renderGear();
    updateLoadDisplay();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
    const currentModal = document.querySelector('.modal-overlay');
    if (currentModal) {
        currentModal.remove();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showModal('–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `‚úÖ –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π —â–∏—Ç –∫—É–ø–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!`);
    
    scheduleSave();
}

console.log('‚úÖ armor.js –∑–∞–≥—Ä—É–∂–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏ –≥–æ—Ç–æ–≤–∞');


