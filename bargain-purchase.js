console.log('üöÄ bargain-purchase.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –¢–û–†–ì–ê –ü–†–ò –ü–û–ö–£–ü–ö–ï
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
// ============================================================================

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä: –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É
function showPurchaseBargainChoice(itemName, originalPrice, onBargain, onBuyNow) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–•–æ—Ç–∏—Ç–µ –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è?</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: ${getThemeColors().text}; margin-bottom: 1rem;">
                    –¶–µ–Ω–∞ <strong>${itemName}</strong>: <strong style="color: ${getThemeColors().accent};">${originalPrice} —É–µ</strong>
                </p>
                <p style="color: ${getThemeColors().text}; margin-bottom: 1.5rem;">
                    –£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞–≤—ã–∫ <strong>–¢–æ—Ä–≥</strong>. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ?
                </p>
                <div style="display: flex; gap: 1rem;">
                    <button class="pill-button primary-button" onclick="window.tempBargainCallback()" style="flex: 1;">–ü–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è</button>
                    <button class="pill-button muted-button" onclick="window.tempBuyNowCallback()" style="flex: 1;">–ö—É–ø–∏—Ç—å —Å—Ä–∞–∑—É</button>
                </div>
            </div>
        </div>
    `;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback'–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
    window.tempBargainCallback = () => {
        closeModal(modal.querySelector('.icon-button'));
        onBargain();
    };
    
    window.tempBuyNowCallback = () => {
        closeModal(modal.querySelector('.icon-button'));
        onBuyNow();
    };
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
}

// –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–∞ (–±—Ä–æ—Å–æ–∫ –°–õ –º–∞—Å—Ç–µ—Ä–æ–º)
function startPurchaseBargaining(itemName, originalPrice, onSuccess) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>–¢–æ—Ä–≥ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <p style="color: ${getThemeColors().text}; margin-bottom: 1rem;">
                    –ú–∞—Å—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∏—Ç—å <strong>2d10</strong> –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –°–ª–æ–∂–Ω–æ—Å—Ç–∏ (–°–õ) —Ç–æ—Ä–≥–∞.
                </p>
                
                <div style="margin-bottom: 1.5rem;">
                    <button class="pill-button primary-button" onclick="rollPurchaseDifficulty()" style="width: 100%;">
                        üé≤ –ë—Ä–æ—Å–∏—Ç—å 2d10 –¥–ª—è –°–õ
                    </button>
                    <div id="purchaseDifficultyResult" style="margin-top: 0.5rem; text-align: center; font-size: 1.2rem; font-weight: 600; color: ${getThemeColors().accent};"></div>
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <label class="input-label">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –°–õ –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä —É–∂–µ –±—Ä–æ—Å–∏–ª):</label>
                    <input type="number" class="input-field" id="purchaseManualDifficulty" placeholder="–°–õ" min="2" max="20">
                </div>
                
                <div style="margin-bottom: 1.5rem;">
                    <button class="pill-button success-button" id="performPurchaseBargainBtn" style="width: 100%;">
                        –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¢–æ—Ä–≥–∞
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    modal.dataset.itemName = itemName;
    modal.dataset.originalPrice = originalPrice;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    document.getElementById('performPurchaseBargainBtn').onclick = () => performPurchaseBargainCheck(itemName, originalPrice, onSuccess);
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
}

// –ë—Ä–æ—Å–æ–∫ 2d10 –¥–ª—è –°–õ
function rollPurchaseDifficulty() {
    const d1 = Math.floor(Math.random() * 10) + 1;
    const d2 = Math.floor(Math.random() * 10) + 1;
    const total = d1 + d2;
    
    const resultDiv = document.getElementById('purchaseDifficultyResult');
    if (resultDiv) {
        resultDiv.textContent = `–°–õ = ${d1} + ${d2} = ${total}`;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
    const manualInput = document.getElementById('purchaseManualDifficulty');
    if (manualInput) {
        manualInput.value = total;
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¢–æ—Ä–≥–∞
function performPurchaseBargainCheck(itemName, originalPrice, onSuccess) {
    const difficultyInput = document.getElementById('purchaseManualDifficulty');
    const difficulty = parseInt(difficultyInput?.value);
    
    if (!difficulty || difficulty < 2 || difficulty > 20) {
        showAlertModal('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –°–õ (–æ—Ç 2 –¥–æ 20).');
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ –¢–æ—Ä–≥
    const bargainSkill = state.skills.find(s => s.name === '–¢–æ—Ä–≥' || (s.customName && s.customName === '–¢–æ—Ä–≥'));
    const bargainLevel = bargainSkill ? bargainSkill.level : 0;
    
    // –ë—Ä–æ—Å–∞–µ–º 2d6 –ë–ï–ó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
    const d1 = Math.floor(Math.random() * 6) + 1;
    const d2 = Math.floor(Math.random() * 6) + 1;
    const diceTotal = d1 + d2;
    
    const checkResult = bargainLevel + diceTotal;
    const success = checkResult > difficulty;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay:last-child .icon-button'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showPurchaseBargainResult(itemName, originalPrice, {
        bargainLevel,
        dice: [d1, d2],
        diceTotal,
        checkResult,
        difficulty,
        success
    }, onSuccess);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã
function showPurchaseBargainResult(itemName, originalPrice, checkData, onSuccess) {
    const { bargainLevel, dice, diceTotal, checkResult, difficulty, success } = checkData;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    const resultText = success 
        ? `<div style="color: ${getThemeColors().success}; font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem;">‚úì –£–°–ü–ï–•!</div>`
        : `<div style="color: ${getThemeColors().danger}; font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem;">‚úó –ü–†–û–í–ê–õ</div>`;
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 600px;">
            <div class="modal-header">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–∞</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                ${resultText}
                <div style="background: ${getThemeColors().bgLight}; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; font-family: monospace;">
                    <div>–¢–æ—Ä–≥ (${bargainLevel}) + 2d6 (${dice[0]} + ${dice[1]} = ${diceTotal}) = <strong>${checkResult}</strong></div>
                    <div>–°–õ: <strong>${difficulty}</strong></div>
                    <div style="margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid ${getThemeColors().border};">
                        –†–µ–∑—É–ª—å—Ç–∞—Ç: ${checkResult} ${success ? '>' : '‚â§'} ${difficulty}
                    </div>
                </div>
                
                ${success ? `
                    <p style="color: ${getThemeColors().text}; margin-bottom: 1rem;">
                        –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ <strong>–†–µ—à–∞–ª–∞</strong>:
                    </p>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <label class="input-label">–£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã (1-10):</label>
                        <input type="number" class="input-field" id="purchaseFixerLevel" placeholder="–£—Ä–æ–≤–µ–Ω—å" min="1" max="10" value="${getProfessionalSkillLevel('–†–µ—à–∞–ª–∞') || 1}">
                    </div>
                    
                    <div style="margin-bottom: 1rem; padding: 1rem; background: ${getThemeColors().successLight}; border: 1px solid ${getThemeColors().success}; border-radius: 8px; font-size: 0.85rem;">
                        <strong>–°–∫–∏–¥–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é –†–µ—à–∞–ª—ã:</strong><br>
                        1-2: 10% | 3-4: 20% | 5-6: 30% | 7: 40% | 8-9: 50% | 10: 100% (–±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
                    </div>
                    
                    <button class="pill-button primary-button" id="calculatePurchasePriceBtn" style="width: 100%;">
                        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
                    </button>
                ` : `
                    <p style="color: ${getThemeColors().text}; margin-bottom: 1.5rem;">
                        –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–Ω–∏–∂–∞—Ç—å —Ü–µ–Ω—É. –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø–æ –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏: <strong>${originalPrice} —É–µ</strong>
                    </p>
                    
                    <button class="pill-button primary-button" id="buyAtFullPriceBtn" style="width: 100%;">
                        –ö—É–ø–∏—Ç—å –∑–∞ ${originalPrice} —É–µ
                    </button>
                `}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    if (success) {
        document.getElementById('calculatePurchasePriceBtn').onclick = () => {
            calculatePurchaseDiscount(itemName, originalPrice, onSuccess);
        };
    } else {
        document.getElementById('buyAtFullPriceBtn').onclick = () => {
            closeModal(modal.querySelector('.icon-button'));
            onSuccess(originalPrice);
        };
    }
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
}

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–∏–¥–∫—É –ø–æ —É—Ä–æ–≤–Ω—é –†–µ—à–∞–ª—ã
function calculatePurchaseDiscount(itemName, originalPrice, onSuccess) {
    const fixerLevelInput = document.getElementById('purchaseFixerLevel');
    const fixerLevel = parseInt(fixerLevelInput?.value) || 1;
    
    if (fixerLevel < 1 || fixerLevel > 10) {
        showAlertModal('–û—à–∏–±–∫–∞', '–£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É –ø–æ —É—Ä–æ–≤–Ω—é –†–µ—à–∞–ª—ã
    let discount = 0;
    if (fixerLevel >= 1 && fixerLevel <= 2) discount = 0.10;
    else if (fixerLevel >= 3 && fixerLevel <= 4) discount = 0.20;
    else if (fixerLevel >= 5 && fixerLevel <= 6) discount = 0.30;
    else if (fixerLevel === 7) discount = 0.40;
    else if (fixerLevel >= 8 && fixerLevel <= 9) discount = 0.50;
    else if (fixerLevel === 10) discount = 1.00;
    
    const finalPrice = fixerLevel === 10 ? 0 : Math.floor(originalPrice * (1 - discount));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥–∞–ª
    closeModal(document.querySelector('.modal-overlay:last-child .icon-button'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
    showPurchaseSuccess(itemName, originalPrice, finalPrice, discount, fixerLevel, onSuccess);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π
function showPurchaseSuccess(itemName, originalPrice, finalPrice, discount, fixerLevel, onSuccess) {
    const savedAmount = originalPrice - finalPrice;
    const discountPercent = (discount * 100).toFixed(0);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞
    document.body.style.overflow = 'hidden';
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    const existingModals = document.querySelectorAll('.modal-overlay');
    modal.style.zIndex = 1000 + (existingModals.length * 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    const originalRemove = modal.remove.bind(modal);
    modal.remove = function() {
        document.body.style.overflow = '';
        originalRemove();
    };
    
    modal.innerHTML = `
        <div class="modal" style="max-width: 500px;">
            <div class="modal-header">
                <h3>–¢–æ—Ä–≥ —É—Å–ø–µ—à–µ–Ω!</h3>
                <button class="icon-button" onclick="closeModal(this)">√ó</button>
            </div>
            <div class="modal-body">
                <div style="background: ${getThemeColors().successLight}; border: 1px solid ${getThemeColors().success}; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
                    <p style="color: ${getThemeColors().success}; font-weight: 600; margin-bottom: 0.5rem;">‚úì –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ —Å–∫–∏–¥–∫–µ!</p>
                    <div style="color: ${getThemeColors().text}; font-size: 0.9rem;">
                        <div>–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: ${originalPrice} —É–µ</div>
                        <div>–£—Ä–æ–≤–µ–Ω—å –†–µ—à–∞–ª—ã: ${fixerLevel}</div>
                        <div>–°–∫–∏–¥–∫–∞: -${discountPercent}%</div>
                        <div style="font-weight: 600; margin-top: 0.5rem; font-size: 1.1rem; color: ${getThemeColors().success};">
                            –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${finalPrice} —É–µ
                        </div>
                        ${savedAmount > 0 ? `<div style="color: ${getThemeColors().muted}; font-size: 0.85rem; margin-top: 0.25rem;">–í—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏: ${savedAmount} —É–µ</div>` : ''}
                    </div>
                </div>
                
                <p style="color: ${getThemeColors().text}; margin-bottom: 1.5rem;">
                    –ö—É–ø–∏—Ç—å <strong>${itemName}</strong> –∑–∞ <strong style="color: ${getThemeColors().success};">${finalPrice} —É–µ</strong>?
                </p>
                
                <div style="display: flex; gap: 1rem;">
                    <button class="pill-button" onclick="closeModal(this)" style="flex: 1;">–û—Ç–º–µ–Ω–∞</button>
                    <button class="pill-button success-button" id="confirmDiscountedPurchaseBtn" style="flex: 1;">–ö—É–ø–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    document.getElementById('confirmDiscountedPurchaseBtn').onclick = () => {
        closeModal(modal.querySelector('.icon-button'));
        onSuccess(finalPrice);
    };
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal.querySelector('.icon-button'));
        }
    });
}

// ============================================================================
// –û–ë–Å–†–¢–ö–ò –î–õ–Ø –§–£–ù–ö–¶–ò–ô –ü–û–ö–£–ü–ö–ò –° –ü–û–î–î–ï–†–ñ–ö–û–ô –¢–û–†–ì–ê
// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
// ============================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±—ë—Ä—Ç–æ–∫
(function applyWrappers() {
    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyGear
    if (typeof buyGear !== 'undefined') {
        const _originalBuyGear = buyGear;
        buyGear = function(name, price, load, description, catalogPrice = null) {
            // –ï—Å–ª–∏ —Ç–æ—Ä–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ü–µ–Ω–∞ = 0 - –ø–æ–∫—É–ø–∞–µ–º —Å—Ä–∞–∑—É
            if (!canBargain() || price === 0) {
                return _originalBuyGear(name, price, load, description, catalogPrice);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä - –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyGear(name, finalPrice, load, description, catalogPrice);
                    });
                },
                () => {
                    _originalBuyGear(name, price, load, description, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyMeleeWeapon
    if (typeof buyMeleeWeapon !== 'undefined') {
        const _originalBuyMeleeWeapon = buyMeleeWeapon;
        buyMeleeWeapon = function(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyMeleeWeapon(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                type,
                price,
                () => {
                    startPurchaseBargaining(type, price, (finalPrice) => {
                        _originalBuyMeleeWeapon(type, finalPrice, load, damage, concealable, stealthPenalty, examples, catalogPrice);
                    });
                },
                () => {
                    _originalBuyMeleeWeapon(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyMeleeWeaponToGear
    if (typeof buyMeleeWeaponToGear !== 'undefined') {
        const _originalBuyMeleeWeaponToGear = buyMeleeWeaponToGear;
        buyMeleeWeaponToGear = function(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyMeleeWeaponToGear(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                type,
                price,
                () => {
                    startPurchaseBargaining(type, price, (finalPrice) => {
                        _originalBuyMeleeWeaponToGear(type, finalPrice, load, damage, concealable, stealthPenalty, examples, catalogPrice);
                    });
                },
                () => {
                    _originalBuyMeleeWeaponToGear(type, price, load, damage, concealable, stealthPenalty, examples, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyRangedWeapon
    if (typeof buyRangedWeapon !== 'undefined') {
        console.log('‚úÖ buyRangedWeapon –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫—É');
        const _originalBuyRangedWeapon = buyRangedWeapon;
        buyRangedWeapon = function(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice = null) {
            console.log('üî´ buyRangedWeapon –≤—ã–∑–≤–∞–Ω–∞:', { type, price, canBargain: canBargain() });
            console.log('üî´ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice });
            if (!canBargain() || price === 0) {
                console.log('üí∞ –ü–æ–∫—É–ø–∞–µ–º —Å—Ä–∞–∑—É –±–µ–∑ —Ç–æ—Ä–≥–∞');
                return _originalBuyRangedWeapon(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                type,
                price,
                () => {
                    startPurchaseBargaining(type, price, (finalPrice) => {
                        _originalBuyRangedWeapon(type, finalPrice, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
                    });
                },
                () => {
                    _originalBuyRangedWeapon(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyRangedWeaponToGear
    if (typeof buyRangedWeaponToGear !== 'undefined') {
        console.log('‚úÖ buyRangedWeaponToGear –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫—É');
        const _originalBuyRangedWeaponToGear = buyRangedWeaponToGear;
        buyRangedWeaponToGear = function(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyRangedWeaponToGear(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                type,
                price,
                () => {
                    startPurchaseBargaining(type, price, (finalPrice) => {
                        _originalBuyRangedWeaponToGear(type, finalPrice, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
                    });
                },
                () => {
                    _originalBuyRangedWeaponToGear(type, price, load, primaryDamage, altDamage, concealable, hands, stealth, magazine, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyAmmoWithQuantity
    if (typeof buyAmmoWithQuantity !== 'undefined') {
        const _originalBuyAmmoWithQuantity = buyAmmoWithQuantity;
        buyAmmoWithQuantity = function(ammoType, weaponType, pricePerUnit, catalogPricePerUnit = null) {
            const quantity = parseInt(document.getElementById('ammoQuantity')?.value) || 1;
            const totalPrice = quantity * pricePerUnit;
            
            if (!canBargain() || pricePerUnit === 0) {
                return _originalBuyAmmoWithQuantity(ammoType, weaponType, pricePerUnit, catalogPricePerUnit);
            }
            
            showPurchaseBargainChoice(
                `${ammoType} (${weaponType}) x${quantity}`,
                totalPrice,
                () => {
                    startPurchaseBargaining(`${ammoType} x${quantity}`, totalPrice, (finalPrice) => {
                        const newPricePerUnit = Math.floor(finalPrice / quantity);
                        _originalBuyAmmoWithQuantity(ammoType, weaponType, newPricePerUnit, catalogPricePerUnit);
                    });
                },
                () => {
                    _originalBuyAmmoWithQuantity(ammoType, weaponType, pricePerUnit, catalogPricePerUnit);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyProgram
    if (typeof buyProgram !== 'undefined') {
        const _originalBuyProgram = buyProgram;
        buyProgram = function(name, price, ram, lethal, description, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyProgram(name, price, ram, lethal, description, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyProgram(name, finalPrice, ram, lethal, description, catalogPrice);
                    });
                },
                () => {
                    _originalBuyProgram(name, price, ram, lethal, description, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyWeaponModule
    if (typeof buyWeaponModule !== 'undefined') {
        const _originalBuyWeaponModule = buyWeaponModule;
        buyWeaponModule = function(category, name, price, load, compatible, description, slotsRequired = 1, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyWeaponModule(category, name, price, load, compatible, description, slotsRequired, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyWeaponModule(category, name, finalPrice, load, compatible, description, slotsRequired, catalogPrice);
                    });
                },
                () => {
                    _originalBuyWeaponModule(category, name, price, load, compatible, description, slotsRequired, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyVehicleModule
    if (typeof buyVehicleModule !== 'undefined') {
        const _originalBuyVehicleModule = buyVehicleModule;
        buyVehicleModule = function(name, description, price, category, requirementsStr, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyVehicleModule(name, description, price, category, requirementsStr, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyVehicleModule(name, description, finalPrice, category, requirementsStr, catalogPrice);
                    });
                },
                () => {
                    _originalBuyVehicleModule(name, description, price, category, requirementsStr, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyDrug
    if (typeof buyDrug !== 'undefined') {
        const _originalBuyDrug = buyDrug;
        buyDrug = function(name, price, description, effect, category, difficulty, secondaryEffect, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyDrug(name, price, description, effect, category, difficulty, secondaryEffect, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyDrug(name, finalPrice, description, effect, category, difficulty, secondaryEffect, catalogPrice);
                    });
                },
                () => {
                    _originalBuyDrug(name, price, description, effect, category, difficulty, secondaryEffect, catalogPrice);
                }
            );
        };
    }

    // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyVehicle
    if (typeof buyVehicle !== 'undefined') {
        const _originalBuyVehicle = buyVehicle;
        buyVehicle = function(name, description, hp, seats, mechanicalSpeed, narrativeSpeed, price, category, catalogPrice = null) {
            if (!canBargain() || price === 0) {
                return _originalBuyVehicle(name, description, hp, seats, mechanicalSpeed, narrativeSpeed, price, category, catalogPrice);
            }
            
            showPurchaseBargainChoice(
                name,
                price,
                () => {
                    startPurchaseBargaining(name, price, (finalPrice) => {
                        _originalBuyVehicle(name, description, hp, seats, mechanicalSpeed, narrativeSpeed, finalPrice, category, catalogPrice);
                    });
                },
                () => {
                    _originalBuyVehicle(name, description, hp, seats, mechanicalSpeed, narrativeSpeed, price, category, catalogPrice);
                }
            );
        };
    }
    
        console.log('–û–±—ë—Ä—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ë—Ä–Ω—É—Ç—ã
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ë—Ä—Ç–æ–∫:');
        console.log('- buyRangedWeapon:', typeof buyRangedWeapon);
        console.log('- buyRangedWeaponToGear:', typeof buyRangedWeaponToGear);
        console.log('- buyGear:', typeof buyGear);
        console.log('- buyMeleeWeapon:', typeof buyMeleeWeapon);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ë—Ä–Ω—É—Ç—ã
        if (typeof buyRangedWeapon === 'undefined') {
            console.warn('buyRangedWeapon –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ');
        }
        
        if (typeof buyRangedWeaponToGear === 'undefined') {
            console.warn('buyRangedWeaponToGear –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ');
        }
        
        // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyDeck
        if (typeof buyDeck !== 'undefined') {
            console.log('‚úÖ buyDeck –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫—É');
            const _originalBuyDeck = buyDeck;
            buyDeck = function(name, memory, ram, grid, price, catalogPrice = null) {
                if (!canBargain() || price === 0) {
                    return _originalBuyDeck(name, memory, ram, grid, price, catalogPrice);
                }
                
                showPurchaseBargainChoice(
                    name,
                    price,
                    () => {
                        startPurchaseBargaining(name, price, (finalPrice) => {
                            _originalBuyDeck(name, memory, ram, grid, finalPrice, catalogPrice);
                        });
                    },
                    () => {
                        _originalBuyDeck(name, memory, ram, grid, price, catalogPrice);
                    }
                );
            };
        }
        
        // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è buyDeckGear
        if (typeof buyDeckGear !== 'undefined') {
            console.log('‚úÖ buyDeckGear –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫—É');
            const _originalBuyDeckGear = buyDeckGear;
            buyDeckGear = function(name, priceStr, type, stat, maxValue, unique, maxQuantity, catalogPrice = null) {
                let price = 0;
                if (priceStr.includes('—É—Ä*')) {
                    const multiplier = parseInt(priceStr.replace('—É—Ä*', ''));
                    price = state.reputation * multiplier;
                } else {
                    price = parseInt(priceStr.replace(/\s/g, ''));
                }
                
                if (!canBargain() || price === 0) {
                    return _originalBuyDeckGear(name, priceStr, type, stat, maxValue, unique, maxQuantity, catalogPrice);
                }
                
                showPurchaseBargainChoice(
                    name,
                    price,
                    () => {
                        startPurchaseBargaining(name, price, (finalPrice) => {
                            // –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É
                            let newPriceStr = priceStr;
                            if (priceStr.includes('—É—Ä*')) {
                                const multiplier = parseInt(priceStr.replace('—É—Ä*', ''));
                                newPriceStr = `—É—Ä*${Math.round(finalPrice / state.reputation)}`;
                            } else {
                                newPriceStr = finalPrice.toString();
                            }
                            _originalBuyDeckGear(name, newPriceStr, type, stat, maxValue, unique, maxQuantity, catalogPrice);
                        });
                    },
                    () => {
                        _originalBuyDeckGear(name, priceStr, type, stat, maxValue, unique, maxQuantity, catalogPrice);
                    }
                );
            };
        }
})(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ë—Ä—Ç–∫–∏ —Å—Ä–∞–∑—É

console.log('‚úÖ bargain-purchase.js –∑–∞–≥—Ä—É–∂–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≥–æ—Ç–æ–≤–∞');
